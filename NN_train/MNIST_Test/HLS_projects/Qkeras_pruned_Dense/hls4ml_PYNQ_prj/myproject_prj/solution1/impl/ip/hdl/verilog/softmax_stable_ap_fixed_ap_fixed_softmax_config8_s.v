// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_ap_fixed_ap_fixed_softmax_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        data_5_V_read,
        data_6_V_read,
        data_7_V_read,
        data_8_V_read,
        data_9_V_read,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld,
        res_5_V,
        res_5_V_ap_vld,
        res_6_V,
        res_6_V_ap_vld,
        res_7_V,
        res_7_V_ap_vld,
        res_8_V,
        res_8_V_ap_vld,
        res_9_V,
        res_9_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_4_V_read;
input  [15:0] data_5_V_read;
input  [15:0] data_6_V_read;
input  [15:0] data_7_V_read;
input  [15:0] data_8_V_read;
input  [15:0] data_9_V_read;
output  [13:0] res_0_V;
output   res_0_V_ap_vld;
output  [13:0] res_1_V;
output   res_1_V_ap_vld;
output  [13:0] res_2_V;
output   res_2_V_ap_vld;
output  [13:0] res_3_V;
output   res_3_V_ap_vld;
output  [13:0] res_4_V;
output   res_4_V_ap_vld;
output  [13:0] res_5_V;
output   res_5_V_ap_vld;
output  [13:0] res_6_V;
output   res_6_V_ap_vld;
output  [13:0] res_7_V;
output   res_7_V_ap_vld;
output  [13:0] res_8_V;
output   res_8_V_ap_vld;
output  [13:0] res_9_V;
output   res_9_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] res_0_V;
reg res_0_V_ap_vld;
reg[13:0] res_1_V;
reg res_1_V_ap_vld;
reg[13:0] res_2_V;
reg res_2_V_ap_vld;
reg[13:0] res_3_V;
reg res_3_V_ap_vld;
reg[13:0] res_4_V;
reg res_4_V_ap_vld;
reg[13:0] res_5_V;
reg res_5_V_ap_vld;
reg[13:0] res_6_V;
reg res_6_V_ap_vld;
reg[13:0] res_7_V;
reg res_7_V_ap_vld;
reg[13:0] res_8_V;
reg res_8_V_ap_vld;
reg[13:0] res_9_V;
reg res_9_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [11:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [11:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [11:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [11:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [11:0] exp_table1_q4;
wire   [9:0] exp_table1_address5;
reg    exp_table1_ce5;
wire   [11:0] exp_table1_q5;
wire   [9:0] exp_table1_address6;
reg    exp_table1_ce6;
wire   [11:0] exp_table1_q6;
wire   [9:0] exp_table1_address7;
reg    exp_table1_ce7;
wire   [11:0] exp_table1_q7;
wire   [9:0] exp_table1_address8;
reg    exp_table1_ce8;
wire   [11:0] exp_table1_q8;
wire   [9:0] exp_table1_address9;
reg    exp_table1_ce9;
wire   [11:0] exp_table1_q9;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [11:0] invert_table2_q0;
reg  signed [15:0] data_9_V_read_1_reg_1576;
reg  signed [15:0] data_9_V_read_1_reg_1576_pp0_iter1_reg;
reg  signed [15:0] data_8_V_read_1_reg_1583;
reg  signed [15:0] data_8_V_read_1_reg_1583_pp0_iter1_reg;
reg  signed [15:0] data_7_V_read_1_reg_1590;
reg  signed [15:0] data_7_V_read_1_reg_1590_pp0_iter1_reg;
reg  signed [15:0] data_6_V_read_1_reg_1595;
reg  signed [15:0] data_6_V_read_1_reg_1595_pp0_iter1_reg;
reg  signed [15:0] data_5_V_read_1_reg_1600;
reg  signed [15:0] data_5_V_read_1_reg_1600_pp0_iter1_reg;
reg  signed [15:0] data_4_V_read_1_reg_1605;
reg  signed [15:0] data_4_V_read_1_reg_1605_pp0_iter1_reg;
reg  signed [15:0] data_3_V_read_1_reg_1610;
reg  signed [15:0] data_3_V_read_1_reg_1610_pp0_iter1_reg;
reg  signed [15:0] data_2_V_read_1_reg_1615;
reg  signed [15:0] data_2_V_read_1_reg_1615_pp0_iter1_reg;
reg  signed [15:0] data_1_V_read_1_reg_1620;
reg  signed [15:0] data_1_V_read_1_reg_1620_pp0_iter1_reg;
reg  signed [15:0] data_0_V_read_1_reg_1625;
reg  signed [15:0] data_0_V_read_1_reg_1625_pp0_iter1_reg;
wire   [15:0] select_ln86_fu_356_p3;
reg   [15:0] select_ln86_reg_1630;
wire   [15:0] select_ln86_1_fu_370_p3;
reg   [15:0] select_ln86_1_reg_1635;
wire   [0:0] icmp_ln1496_2_fu_378_p2;
reg   [0:0] icmp_ln1496_2_reg_1640;
wire   [15:0] select_ln86_3_fu_390_p3;
reg   [15:0] select_ln86_3_reg_1645;
wire   [15:0] select_ln86_4_fu_404_p3;
reg   [15:0] select_ln86_4_reg_1650;
wire   [0:0] icmp_ln1496_5_fu_412_p2;
reg   [0:0] icmp_ln1496_5_reg_1655;
wire   [15:0] select_ln86_6_fu_434_p3;
reg   [15:0] select_ln86_6_reg_1660;
wire   [15:0] select_ln86_7_fu_446_p3;
reg   [15:0] select_ln86_7_reg_1666;
reg   [0:0] tmp_reg_1672;
reg   [0:0] tmp_10_reg_1679;
reg   [0:0] tmp_11_reg_1686;
reg   [0:0] tmp_12_reg_1693;
reg   [0:0] tmp_13_reg_1700;
reg   [0:0] tmp_14_reg_1707;
reg   [0:0] tmp_15_reg_1714;
reg   [0:0] tmp_16_reg_1721;
reg   [0:0] tmp_17_reg_1728;
reg   [0:0] tmp_18_reg_1735;
reg   [0:0] tmp_19_reg_1742;
reg   [0:0] tmp_20_reg_1749;
reg   [0:0] tmp_21_reg_1756;
reg   [0:0] tmp_22_reg_1763;
reg   [0:0] tmp_23_reg_1770;
reg   [0:0] tmp_24_reg_1777;
reg   [0:0] tmp_25_reg_1784;
reg   [0:0] tmp_26_reg_1791;
reg   [0:0] tmp_27_reg_1798;
reg   [0:0] tmp_28_reg_1805;
reg   [9:0] tmp_1_reg_1812;
reg   [9:0] tmp_3_reg_1818;
reg   [9:0] tmp_5_reg_1824;
reg   [9:0] tmp_7_reg_1830;
reg   [9:0] tmp_9_reg_1836;
reg   [9:0] tmp_s_reg_1842;
reg   [9:0] tmp_2_reg_1848;
reg   [9:0] tmp_4_reg_1854;
reg   [9:0] tmp_6_reg_1860;
reg   [9:0] tmp_8_reg_1866;
wire   [9:0] y_V_fu_1070_p3;
reg   [9:0] y_V_reg_1872;
wire   [9:0] y_V_1_fu_1092_p3;
reg   [9:0] y_V_1_reg_1877;
wire   [9:0] y_V_2_fu_1114_p3;
reg   [9:0] y_V_2_reg_1882;
wire   [9:0] y_V_3_fu_1136_p3;
reg   [9:0] y_V_3_reg_1887;
wire   [9:0] y_V_4_fu_1158_p3;
reg   [9:0] y_V_4_reg_1892;
reg   [9:0] y_V_4_reg_1892_pp0_iter4_reg;
wire   [9:0] y_V_5_fu_1180_p3;
reg   [9:0] y_V_5_reg_1897;
reg   [9:0] y_V_5_reg_1897_pp0_iter4_reg;
wire   [9:0] y_V_6_fu_1202_p3;
reg   [9:0] y_V_6_reg_1902;
reg   [9:0] y_V_6_reg_1902_pp0_iter4_reg;
wire   [9:0] y_V_7_fu_1224_p3;
reg   [9:0] y_V_7_reg_1907;
wire   [9:0] y_V_8_fu_1246_p3;
reg   [9:0] y_V_8_reg_1912;
reg   [9:0] y_V_8_reg_1912_pp0_iter4_reg;
wire   [9:0] y_V_9_fu_1268_p3;
reg   [9:0] y_V_9_reg_1917;
reg   [9:0] y_V_9_reg_1917_pp0_iter4_reg;
reg  signed [11:0] exp_res_0_V_reg_1947;
reg  signed [11:0] exp_res_0_V_reg_1947_pp0_iter6_reg;
reg  signed [11:0] exp_res_0_V_reg_1947_pp0_iter7_reg;
reg  signed [11:0] exp_res_0_V_reg_1947_pp0_iter8_reg;
reg  signed [11:0] exp_res_0_V_reg_1947_pp0_iter9_reg;
reg  signed [11:0] exp_res_1_V_reg_1953;
reg  signed [11:0] exp_res_1_V_reg_1953_pp0_iter6_reg;
reg  signed [11:0] exp_res_1_V_reg_1953_pp0_iter7_reg;
reg  signed [11:0] exp_res_1_V_reg_1953_pp0_iter8_reg;
reg  signed [11:0] exp_res_1_V_reg_1953_pp0_iter9_reg;
reg  signed [11:0] exp_res_2_V_reg_1959;
reg  signed [11:0] exp_res_2_V_reg_1959_pp0_iter6_reg;
reg  signed [11:0] exp_res_2_V_reg_1959_pp0_iter7_reg;
reg  signed [11:0] exp_res_2_V_reg_1959_pp0_iter8_reg;
reg  signed [11:0] exp_res_2_V_reg_1959_pp0_iter9_reg;
reg  signed [11:0] exp_res_3_V_reg_1965;
reg  signed [11:0] exp_res_3_V_reg_1965_pp0_iter6_reg;
reg  signed [11:0] exp_res_3_V_reg_1965_pp0_iter7_reg;
reg  signed [11:0] exp_res_3_V_reg_1965_pp0_iter8_reg;
reg  signed [11:0] exp_res_3_V_reg_1965_pp0_iter9_reg;
reg  signed [11:0] exp_res_7_V_reg_1986;
reg  signed [11:0] exp_res_7_V_reg_1986_pp0_iter6_reg;
reg  signed [11:0] exp_res_7_V_reg_1986_pp0_iter7_reg;
reg  signed [11:0] exp_res_7_V_reg_1986_pp0_iter8_reg;
reg  signed [11:0] exp_res_7_V_reg_1986_pp0_iter9_reg;
reg  signed [11:0] exp_res_4_V_reg_2002;
reg  signed [11:0] exp_res_4_V_reg_2002_pp0_iter7_reg;
reg  signed [11:0] exp_res_4_V_reg_2002_pp0_iter8_reg;
reg  signed [11:0] exp_res_4_V_reg_2002_pp0_iter9_reg;
reg  signed [11:0] exp_res_5_V_reg_2008;
reg  signed [11:0] exp_res_5_V_reg_2008_pp0_iter7_reg;
reg  signed [11:0] exp_res_5_V_reg_2008_pp0_iter8_reg;
reg  signed [11:0] exp_res_5_V_reg_2008_pp0_iter9_reg;
reg  signed [11:0] exp_res_6_V_reg_2014;
reg  signed [11:0] exp_res_6_V_reg_2014_pp0_iter7_reg;
reg  signed [11:0] exp_res_6_V_reg_2014_pp0_iter8_reg;
reg  signed [11:0] exp_res_6_V_reg_2014_pp0_iter9_reg;
reg  signed [11:0] exp_res_8_V_reg_2020;
reg  signed [11:0] exp_res_8_V_reg_2020_pp0_iter7_reg;
reg  signed [11:0] exp_res_8_V_reg_2020_pp0_iter8_reg;
reg  signed [11:0] exp_res_8_V_reg_2020_pp0_iter9_reg;
reg  signed [11:0] exp_res_9_V_reg_2026;
reg  signed [11:0] exp_res_9_V_reg_2026_pp0_iter7_reg;
reg  signed [11:0] exp_res_9_V_reg_2026_pp0_iter8_reg;
reg  signed [11:0] exp_res_9_V_reg_2026_pp0_iter9_reg;
wire   [11:0] add_ln703_3_fu_1329_p2;
reg   [11:0] add_ln703_3_reg_2032;
reg   [9:0] y_V_10_reg_2037;
reg   [11:0] inv_exp_sum_V_reg_2047;
wire  signed [19:0] sext_ln1116_fu_1373_p1;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln306_fu_1276_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln306_1_fu_1280_p1;
wire   [63:0] zext_ln306_2_fu_1284_p1;
wire   [63:0] zext_ln306_3_fu_1288_p1;
wire   [63:0] zext_ln306_7_fu_1292_p1;
wire   [63:0] zext_ln306_4_fu_1296_p1;
wire   [63:0] zext_ln306_5_fu_1300_p1;
wire   [63:0] zext_ln306_6_fu_1304_p1;
wire   [63:0] zext_ln306_8_fu_1308_p1;
wire   [63:0] zext_ln306_9_fu_1312_p1;
wire   [63:0] zext_ln314_fu_1369_p1;
reg   [13:0] res_0_V_preg;
reg    ap_block_pp0_stage0_01001;
reg   [13:0] res_1_V_preg;
reg   [13:0] res_2_V_preg;
reg   [13:0] res_3_V_preg;
reg   [13:0] res_4_V_preg;
reg   [13:0] res_5_V_preg;
reg   [13:0] res_6_V_preg;
reg   [13:0] res_7_V_preg;
reg   [13:0] res_8_V_preg;
reg   [13:0] res_9_V_preg;
wire  signed [15:0] icmp_ln1496_fu_350_p0;
wire  signed [15:0] icmp_ln1496_fu_350_p1;
wire   [0:0] icmp_ln1496_fu_350_p2;
wire  signed [15:0] select_ln86_fu_356_p1;
wire  signed [15:0] select_ln86_fu_356_p2;
wire  signed [15:0] icmp_ln1496_1_fu_364_p0;
wire  signed [15:0] icmp_ln1496_1_fu_364_p1;
wire   [0:0] icmp_ln1496_1_fu_364_p2;
wire  signed [15:0] select_ln86_1_fu_370_p1;
wire  signed [15:0] select_ln86_1_fu_370_p2;
wire  signed [15:0] icmp_ln1496_3_fu_384_p0;
wire  signed [15:0] icmp_ln1496_3_fu_384_p1;
wire   [0:0] icmp_ln1496_3_fu_384_p2;
wire  signed [15:0] select_ln86_3_fu_390_p1;
wire  signed [15:0] select_ln86_3_fu_390_p2;
wire  signed [15:0] icmp_ln1496_4_fu_398_p0;
wire  signed [15:0] icmp_ln1496_4_fu_398_p1;
wire   [0:0] icmp_ln1496_4_fu_398_p2;
wire  signed [15:0] select_ln86_4_fu_404_p1;
wire  signed [15:0] select_ln86_4_fu_404_p2;
wire   [15:0] select_ln86_2_fu_418_p3;
wire   [15:0] select_ln86_5_fu_423_p3;
wire   [0:0] icmp_ln1496_6_fu_428_p2;
wire   [0:0] icmp_ln1496_7_fu_442_p2;
wire   [0:0] icmp_ln1496_8_fu_452_p2;
wire   [15:0] x_max_V_fu_456_p3;
wire  signed [16:0] sext_ln703_fu_462_p1;
wire  signed [16:0] sext_ln703_1_fu_465_p1;
wire   [16:0] sub_ln1193_fu_469_p2;
wire  signed [16:0] sext_ln703_2_fu_491_p1;
wire   [16:0] sub_ln1193_1_fu_494_p2;
wire  signed [16:0] sext_ln703_3_fu_516_p1;
wire   [16:0] sub_ln1193_2_fu_519_p2;
wire  signed [16:0] sext_ln703_4_fu_541_p1;
wire   [16:0] sub_ln1193_3_fu_544_p2;
wire  signed [16:0] sext_ln703_5_fu_566_p1;
wire   [16:0] sub_ln1193_4_fu_569_p2;
wire  signed [16:0] sext_ln703_6_fu_591_p1;
wire   [16:0] sub_ln1193_5_fu_594_p2;
wire  signed [16:0] sext_ln703_7_fu_616_p1;
wire   [16:0] sub_ln1193_6_fu_619_p2;
wire  signed [16:0] sext_ln703_8_fu_641_p1;
wire   [16:0] sub_ln1193_7_fu_644_p2;
wire  signed [16:0] sext_ln703_9_fu_666_p1;
wire   [16:0] sub_ln1193_8_fu_669_p2;
wire  signed [16:0] sext_ln703_10_fu_691_p1;
wire   [16:0] sub_ln1193_9_fu_694_p2;
wire   [0:0] xor_ln786_fu_816_p2;
wire   [0:0] xor_ln340_fu_830_p2;
wire   [0:0] xor_ln786_1_fu_840_p2;
wire   [0:0] xor_ln340_1_fu_854_p2;
wire   [0:0] xor_ln786_2_fu_864_p2;
wire   [0:0] xor_ln340_2_fu_878_p2;
wire   [0:0] xor_ln786_3_fu_888_p2;
wire   [0:0] xor_ln340_3_fu_902_p2;
wire   [0:0] xor_ln786_4_fu_912_p2;
wire   [0:0] xor_ln340_4_fu_926_p2;
wire   [0:0] xor_ln786_5_fu_936_p2;
wire   [0:0] xor_ln340_5_fu_950_p2;
wire   [0:0] xor_ln786_6_fu_960_p2;
wire   [0:0] xor_ln340_6_fu_974_p2;
wire   [0:0] xor_ln786_7_fu_984_p2;
wire   [0:0] xor_ln340_7_fu_998_p2;
wire   [0:0] xor_ln786_8_fu_1008_p2;
wire   [0:0] xor_ln340_8_fu_1022_p2;
wire   [0:0] xor_ln786_9_fu_1032_p2;
wire   [0:0] xor_ln340_9_fu_1046_p2;
wire   [0:0] xor_ln340_10_fu_826_p2;
wire   [0:0] and_ln786_fu_821_p2;
wire   [0:0] or_ln340_fu_835_p2;
wire   [9:0] select_ln340_fu_1056_p3;
wire   [9:0] select_ln388_fu_1063_p3;
wire   [0:0] xor_ln340_11_fu_850_p2;
wire   [0:0] and_ln786_1_fu_845_p2;
wire   [0:0] or_ln340_1_fu_859_p2;
wire   [9:0] select_ln340_2_fu_1078_p3;
wire   [9:0] select_ln388_1_fu_1085_p3;
wire   [0:0] xor_ln340_12_fu_874_p2;
wire   [0:0] and_ln786_2_fu_869_p2;
wire   [0:0] or_ln340_2_fu_883_p2;
wire   [9:0] select_ln340_4_fu_1100_p3;
wire   [9:0] select_ln388_2_fu_1107_p3;
wire   [0:0] xor_ln340_13_fu_898_p2;
wire   [0:0] and_ln786_3_fu_893_p2;
wire   [0:0] or_ln340_3_fu_907_p2;
wire   [9:0] select_ln340_6_fu_1122_p3;
wire   [9:0] select_ln388_3_fu_1129_p3;
wire   [0:0] xor_ln340_14_fu_922_p2;
wire   [0:0] and_ln786_4_fu_917_p2;
wire   [0:0] or_ln340_4_fu_931_p2;
wire   [9:0] select_ln340_8_fu_1144_p3;
wire   [9:0] select_ln388_4_fu_1151_p3;
wire   [0:0] xor_ln340_15_fu_946_p2;
wire   [0:0] and_ln786_5_fu_941_p2;
wire   [0:0] or_ln340_5_fu_955_p2;
wire   [9:0] select_ln340_10_fu_1166_p3;
wire   [9:0] select_ln388_5_fu_1173_p3;
wire   [0:0] xor_ln340_16_fu_970_p2;
wire   [0:0] and_ln786_6_fu_965_p2;
wire   [0:0] or_ln340_6_fu_979_p2;
wire   [9:0] select_ln340_12_fu_1188_p3;
wire   [9:0] select_ln388_6_fu_1195_p3;
wire   [0:0] xor_ln340_17_fu_994_p2;
wire   [0:0] and_ln786_7_fu_989_p2;
wire   [0:0] or_ln340_7_fu_1003_p2;
wire   [9:0] select_ln340_14_fu_1210_p3;
wire   [9:0] select_ln388_7_fu_1217_p3;
wire   [0:0] xor_ln340_18_fu_1018_p2;
wire   [0:0] and_ln786_8_fu_1013_p2;
wire   [0:0] or_ln340_8_fu_1027_p2;
wire   [9:0] select_ln340_16_fu_1232_p3;
wire   [9:0] select_ln388_8_fu_1239_p3;
wire   [0:0] xor_ln340_19_fu_1042_p2;
wire   [0:0] and_ln786_9_fu_1037_p2;
wire   [0:0] or_ln340_9_fu_1051_p2;
wire   [9:0] select_ln340_18_fu_1254_p3;
wire   [9:0] select_ln388_9_fu_1261_p3;
wire   [11:0] add_ln703_1_fu_1320_p2;
wire   [11:0] add_ln703_fu_1316_p2;
wire   [11:0] add_ln703_2_fu_1324_p2;
wire   [11:0] add_ln703_5_fu_1339_p2;
wire   [11:0] add_ln703_4_fu_1335_p2;
wire   [11:0] add_ln703_6_fu_1343_p2;
wire   [11:0] add_ln703_7_fu_1348_p2;
wire   [11:0] exp_sum_V_fu_1354_p2;
wire  signed [19:0] grp_fu_1506_p2;
wire  signed [19:0] grp_fu_1513_p2;
wire  signed [19:0] grp_fu_1520_p2;
wire  signed [19:0] grp_fu_1527_p2;
wire  signed [19:0] grp_fu_1534_p2;
wire  signed [19:0] grp_fu_1541_p2;
wire  signed [19:0] grp_fu_1548_p2;
wire  signed [19:0] grp_fu_1555_p2;
wire  signed [19:0] grp_fu_1562_p2;
wire  signed [19:0] grp_fu_1569_p2;
wire  signed [11:0] grp_fu_1506_p1;
wire  signed [11:0] grp_fu_1513_p1;
wire  signed [11:0] grp_fu_1520_p1;
wire  signed [11:0] grp_fu_1527_p1;
wire  signed [11:0] grp_fu_1534_p1;
wire  signed [11:0] grp_fu_1541_p1;
wire  signed [11:0] grp_fu_1548_p1;
wire  signed [11:0] grp_fu_1555_p1;
wire  signed [11:0] grp_fu_1562_p1;
wire  signed [11:0] grp_fu_1569_p1;
reg    grp_fu_1506_ce;
reg    grp_fu_1513_ce;
reg    grp_fu_1520_ce;
reg    grp_fu_1527_ce;
reg    grp_fu_1534_ce;
reg    grp_fu_1541_ce;
reg    grp_fu_1548_ce;
reg    grp_fu_1555_ce;
reg    grp_fu_1562_ce;
reg    grp_fu_1569_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to11;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 res_0_V_preg = 14'd0;
#0 res_1_V_preg = 14'd0;
#0 res_2_V_preg = 14'd0;
#0 res_3_V_preg = 14'd0;
#0 res_4_V_preg = 14'd0;
#0 res_5_V_preg = 14'd0;
#0 res_6_V_preg = 14'd0;
#0 res_7_V_preg = 14'd0;
#0 res_8_V_preg = 14'd0;
#0 res_9_V_preg = 14'd0;
end

softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_exp_tabkb #(
    .DataWidth( 12 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4),
    .address5(exp_table1_address5),
    .ce5(exp_table1_ce5),
    .q5(exp_table1_q5),
    .address6(exp_table1_address6),
    .ce6(exp_table1_ce6),
    .q6(exp_table1_q6),
    .address7(exp_table1_address7),
    .ce7(exp_table1_ce7),
    .q7(exp_table1_q7),
    .address8(exp_table1_address8),
    .ce8(exp_table1_ce8),
    .q8(exp_table1_q8),
    .address9(exp_table1_address9),
    .ce9(exp_table1_ce9),
    .q9(exp_table1_q9)
);

softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_invertcud #(
    .DataWidth( 12 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_axi_mul_mul_12s_12s_20_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
myproject_axi_mul_mul_12s_12s_20_3_1_U1423(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_0_V_reg_1947_pp0_iter9_reg),
    .din1(grp_fu_1506_p1),
    .ce(grp_fu_1506_ce),
    .dout(grp_fu_1506_p2)
);

myproject_axi_mul_mul_12s_12s_20_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
myproject_axi_mul_mul_12s_12s_20_3_1_U1424(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_1_V_reg_1953_pp0_iter9_reg),
    .din1(grp_fu_1513_p1),
    .ce(grp_fu_1513_ce),
    .dout(grp_fu_1513_p2)
);

myproject_axi_mul_mul_12s_12s_20_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
myproject_axi_mul_mul_12s_12s_20_3_1_U1425(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_2_V_reg_1959_pp0_iter9_reg),
    .din1(grp_fu_1520_p1),
    .ce(grp_fu_1520_ce),
    .dout(grp_fu_1520_p2)
);

myproject_axi_mul_mul_12s_12s_20_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
myproject_axi_mul_mul_12s_12s_20_3_1_U1426(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_3_V_reg_1965_pp0_iter9_reg),
    .din1(grp_fu_1527_p1),
    .ce(grp_fu_1527_ce),
    .dout(grp_fu_1527_p2)
);

myproject_axi_mul_mul_12s_12s_20_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
myproject_axi_mul_mul_12s_12s_20_3_1_U1427(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_4_V_reg_2002_pp0_iter9_reg),
    .din1(grp_fu_1534_p1),
    .ce(grp_fu_1534_ce),
    .dout(grp_fu_1534_p2)
);

myproject_axi_mul_mul_12s_12s_20_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
myproject_axi_mul_mul_12s_12s_20_3_1_U1428(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_5_V_reg_2008_pp0_iter9_reg),
    .din1(grp_fu_1541_p1),
    .ce(grp_fu_1541_ce),
    .dout(grp_fu_1541_p2)
);

myproject_axi_mul_mul_12s_12s_20_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
myproject_axi_mul_mul_12s_12s_20_3_1_U1429(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_6_V_reg_2014_pp0_iter9_reg),
    .din1(grp_fu_1548_p1),
    .ce(grp_fu_1548_ce),
    .dout(grp_fu_1548_p2)
);

myproject_axi_mul_mul_12s_12s_20_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
myproject_axi_mul_mul_12s_12s_20_3_1_U1430(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_7_V_reg_1986_pp0_iter9_reg),
    .din1(grp_fu_1555_p1),
    .ce(grp_fu_1555_ce),
    .dout(grp_fu_1555_p2)
);

myproject_axi_mul_mul_12s_12s_20_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
myproject_axi_mul_mul_12s_12s_20_3_1_U1431(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_8_V_reg_2020_pp0_iter9_reg),
    .din1(grp_fu_1562_p1),
    .ce(grp_fu_1562_ce),
    .dout(grp_fu_1562_p2)
);

myproject_axi_mul_mul_12s_12s_20_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
myproject_axi_mul_mul_12s_12s_20_3_1_U1432(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_9_V_reg_2026_pp0_iter9_reg),
    .din1(grp_fu_1569_p1),
    .ce(grp_fu_1569_ce),
    .dout(grp_fu_1569_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_0_V_preg <= 14'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
            res_0_V_preg <= {{grp_fu_1506_p2[19:6]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_1_V_preg <= 14'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
            res_1_V_preg <= {{grp_fu_1513_p2[19:6]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_2_V_preg <= 14'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
            res_2_V_preg <= {{grp_fu_1520_p2[19:6]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_3_V_preg <= 14'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
            res_3_V_preg <= {{grp_fu_1527_p2[19:6]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_4_V_preg <= 14'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
            res_4_V_preg <= {{grp_fu_1534_p2[19:6]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_5_V_preg <= 14'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
            res_5_V_preg <= {{grp_fu_1541_p2[19:6]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_6_V_preg <= 14'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
            res_6_V_preg <= {{grp_fu_1548_p2[19:6]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_7_V_preg <= 14'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
            res_7_V_preg <= {{grp_fu_1555_p2[19:6]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_8_V_preg <= 14'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
            res_8_V_preg <= {{grp_fu_1562_p2[19:6]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_9_V_preg <= 14'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
            res_9_V_preg <= {{grp_fu_1569_p2[19:6]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln703_3_reg_2032 <= add_ln703_3_fu_1329_p2;
        exp_res_0_V_reg_1947_pp0_iter6_reg <= exp_res_0_V_reg_1947;
        exp_res_0_V_reg_1947_pp0_iter7_reg <= exp_res_0_V_reg_1947_pp0_iter6_reg;
        exp_res_0_V_reg_1947_pp0_iter8_reg <= exp_res_0_V_reg_1947_pp0_iter7_reg;
        exp_res_0_V_reg_1947_pp0_iter9_reg <= exp_res_0_V_reg_1947_pp0_iter8_reg;
        exp_res_1_V_reg_1953_pp0_iter6_reg <= exp_res_1_V_reg_1953;
        exp_res_1_V_reg_1953_pp0_iter7_reg <= exp_res_1_V_reg_1953_pp0_iter6_reg;
        exp_res_1_V_reg_1953_pp0_iter8_reg <= exp_res_1_V_reg_1953_pp0_iter7_reg;
        exp_res_1_V_reg_1953_pp0_iter9_reg <= exp_res_1_V_reg_1953_pp0_iter8_reg;
        exp_res_2_V_reg_1959_pp0_iter6_reg <= exp_res_2_V_reg_1959;
        exp_res_2_V_reg_1959_pp0_iter7_reg <= exp_res_2_V_reg_1959_pp0_iter6_reg;
        exp_res_2_V_reg_1959_pp0_iter8_reg <= exp_res_2_V_reg_1959_pp0_iter7_reg;
        exp_res_2_V_reg_1959_pp0_iter9_reg <= exp_res_2_V_reg_1959_pp0_iter8_reg;
        exp_res_3_V_reg_1965_pp0_iter6_reg <= exp_res_3_V_reg_1965;
        exp_res_3_V_reg_1965_pp0_iter7_reg <= exp_res_3_V_reg_1965_pp0_iter6_reg;
        exp_res_3_V_reg_1965_pp0_iter8_reg <= exp_res_3_V_reg_1965_pp0_iter7_reg;
        exp_res_3_V_reg_1965_pp0_iter9_reg <= exp_res_3_V_reg_1965_pp0_iter8_reg;
        exp_res_4_V_reg_2002_pp0_iter7_reg <= exp_res_4_V_reg_2002;
        exp_res_4_V_reg_2002_pp0_iter8_reg <= exp_res_4_V_reg_2002_pp0_iter7_reg;
        exp_res_4_V_reg_2002_pp0_iter9_reg <= exp_res_4_V_reg_2002_pp0_iter8_reg;
        exp_res_5_V_reg_2008_pp0_iter7_reg <= exp_res_5_V_reg_2008;
        exp_res_5_V_reg_2008_pp0_iter8_reg <= exp_res_5_V_reg_2008_pp0_iter7_reg;
        exp_res_5_V_reg_2008_pp0_iter9_reg <= exp_res_5_V_reg_2008_pp0_iter8_reg;
        exp_res_6_V_reg_2014_pp0_iter7_reg <= exp_res_6_V_reg_2014;
        exp_res_6_V_reg_2014_pp0_iter8_reg <= exp_res_6_V_reg_2014_pp0_iter7_reg;
        exp_res_6_V_reg_2014_pp0_iter9_reg <= exp_res_6_V_reg_2014_pp0_iter8_reg;
        exp_res_7_V_reg_1986_pp0_iter6_reg <= exp_res_7_V_reg_1986;
        exp_res_7_V_reg_1986_pp0_iter7_reg <= exp_res_7_V_reg_1986_pp0_iter6_reg;
        exp_res_7_V_reg_1986_pp0_iter8_reg <= exp_res_7_V_reg_1986_pp0_iter7_reg;
        exp_res_7_V_reg_1986_pp0_iter9_reg <= exp_res_7_V_reg_1986_pp0_iter8_reg;
        exp_res_8_V_reg_2020_pp0_iter7_reg <= exp_res_8_V_reg_2020;
        exp_res_8_V_reg_2020_pp0_iter8_reg <= exp_res_8_V_reg_2020_pp0_iter7_reg;
        exp_res_8_V_reg_2020_pp0_iter9_reg <= exp_res_8_V_reg_2020_pp0_iter8_reg;
        exp_res_9_V_reg_2026_pp0_iter7_reg <= exp_res_9_V_reg_2026;
        exp_res_9_V_reg_2026_pp0_iter8_reg <= exp_res_9_V_reg_2026_pp0_iter7_reg;
        exp_res_9_V_reg_2026_pp0_iter9_reg <= exp_res_9_V_reg_2026_pp0_iter8_reg;
        inv_exp_sum_V_reg_2047 <= invert_table2_q0;
        tmp_10_reg_1679 <= sub_ln1193_fu_469_p2[32'd15];
        tmp_11_reg_1686 <= sub_ln1193_1_fu_494_p2[32'd16];
        tmp_12_reg_1693 <= sub_ln1193_1_fu_494_p2[32'd15];
        tmp_13_reg_1700 <= sub_ln1193_2_fu_519_p2[32'd16];
        tmp_14_reg_1707 <= sub_ln1193_2_fu_519_p2[32'd15];
        tmp_15_reg_1714 <= sub_ln1193_3_fu_544_p2[32'd16];
        tmp_16_reg_1721 <= sub_ln1193_3_fu_544_p2[32'd15];
        tmp_17_reg_1728 <= sub_ln1193_4_fu_569_p2[32'd16];
        tmp_18_reg_1735 <= sub_ln1193_4_fu_569_p2[32'd15];
        tmp_19_reg_1742 <= sub_ln1193_5_fu_594_p2[32'd16];
        tmp_1_reg_1812 <= {{sub_ln1193_fu_469_p2[15:6]}};
        tmp_20_reg_1749 <= sub_ln1193_5_fu_594_p2[32'd15];
        tmp_21_reg_1756 <= sub_ln1193_6_fu_619_p2[32'd16];
        tmp_22_reg_1763 <= sub_ln1193_6_fu_619_p2[32'd15];
        tmp_23_reg_1770 <= sub_ln1193_7_fu_644_p2[32'd16];
        tmp_24_reg_1777 <= sub_ln1193_7_fu_644_p2[32'd15];
        tmp_25_reg_1784 <= sub_ln1193_8_fu_669_p2[32'd16];
        tmp_26_reg_1791 <= sub_ln1193_8_fu_669_p2[32'd15];
        tmp_27_reg_1798 <= sub_ln1193_9_fu_694_p2[32'd16];
        tmp_28_reg_1805 <= sub_ln1193_9_fu_694_p2[32'd15];
        tmp_2_reg_1848 <= {{sub_ln1193_6_fu_619_p2[15:6]}};
        tmp_3_reg_1818 <= {{sub_ln1193_1_fu_494_p2[15:6]}};
        tmp_4_reg_1854 <= {{sub_ln1193_7_fu_644_p2[15:6]}};
        tmp_5_reg_1824 <= {{sub_ln1193_2_fu_519_p2[15:6]}};
        tmp_6_reg_1860 <= {{sub_ln1193_8_fu_669_p2[15:6]}};
        tmp_7_reg_1830 <= {{sub_ln1193_3_fu_544_p2[15:6]}};
        tmp_8_reg_1866 <= {{sub_ln1193_9_fu_694_p2[15:6]}};
        tmp_9_reg_1836 <= {{sub_ln1193_4_fu_569_p2[15:6]}};
        tmp_reg_1672 <= sub_ln1193_fu_469_p2[32'd16];
        tmp_s_reg_1842 <= {{sub_ln1193_5_fu_594_p2[15:6]}};
        y_V_10_reg_2037 <= {{exp_sum_V_fu_1354_p2[11:2]}};
        y_V_1_reg_1877 <= y_V_1_fu_1092_p3;
        y_V_2_reg_1882 <= y_V_2_fu_1114_p3;
        y_V_3_reg_1887 <= y_V_3_fu_1136_p3;
        y_V_4_reg_1892 <= y_V_4_fu_1158_p3;
        y_V_4_reg_1892_pp0_iter4_reg <= y_V_4_reg_1892;
        y_V_5_reg_1897 <= y_V_5_fu_1180_p3;
        y_V_5_reg_1897_pp0_iter4_reg <= y_V_5_reg_1897;
        y_V_6_reg_1902 <= y_V_6_fu_1202_p3;
        y_V_6_reg_1902_pp0_iter4_reg <= y_V_6_reg_1902;
        y_V_7_reg_1907 <= y_V_7_fu_1224_p3;
        y_V_8_reg_1912 <= y_V_8_fu_1246_p3;
        y_V_8_reg_1912_pp0_iter4_reg <= y_V_8_reg_1912;
        y_V_9_reg_1917 <= y_V_9_fu_1268_p3;
        y_V_9_reg_1917_pp0_iter4_reg <= y_V_9_reg_1917;
        y_V_reg_1872 <= y_V_fu_1070_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_0_V_read_1_reg_1625 <= data_0_V_read;
        data_0_V_read_1_reg_1625_pp0_iter1_reg <= data_0_V_read_1_reg_1625;
        data_1_V_read_1_reg_1620 <= data_1_V_read;
        data_1_V_read_1_reg_1620_pp0_iter1_reg <= data_1_V_read_1_reg_1620;
        data_2_V_read_1_reg_1615 <= data_2_V_read;
        data_2_V_read_1_reg_1615_pp0_iter1_reg <= data_2_V_read_1_reg_1615;
        data_3_V_read_1_reg_1610 <= data_3_V_read;
        data_3_V_read_1_reg_1610_pp0_iter1_reg <= data_3_V_read_1_reg_1610;
        data_4_V_read_1_reg_1605 <= data_4_V_read;
        data_4_V_read_1_reg_1605_pp0_iter1_reg <= data_4_V_read_1_reg_1605;
        data_5_V_read_1_reg_1600 <= data_5_V_read;
        data_5_V_read_1_reg_1600_pp0_iter1_reg <= data_5_V_read_1_reg_1600;
        data_6_V_read_1_reg_1595 <= data_6_V_read;
        data_6_V_read_1_reg_1595_pp0_iter1_reg <= data_6_V_read_1_reg_1595;
        data_7_V_read_1_reg_1590 <= data_7_V_read;
        data_7_V_read_1_reg_1590_pp0_iter1_reg <= data_7_V_read_1_reg_1590;
        data_8_V_read_1_reg_1583 <= data_8_V_read;
        data_8_V_read_1_reg_1583_pp0_iter1_reg <= data_8_V_read_1_reg_1583;
        data_9_V_read_1_reg_1576 <= data_9_V_read;
        data_9_V_read_1_reg_1576_pp0_iter1_reg <= data_9_V_read_1_reg_1576;
        icmp_ln1496_2_reg_1640 <= icmp_ln1496_2_fu_378_p2;
        icmp_ln1496_5_reg_1655 <= icmp_ln1496_5_fu_412_p2;
        select_ln86_1_reg_1635 <= select_ln86_1_fu_370_p3;
        select_ln86_3_reg_1645 <= select_ln86_3_fu_390_p3;
        select_ln86_4_reg_1650 <= select_ln86_4_fu_404_p3;
        select_ln86_6_reg_1660 <= select_ln86_6_fu_434_p3;
        select_ln86_7_reg_1666 <= select_ln86_7_fu_446_p3;
        select_ln86_reg_1630 <= select_ln86_fu_356_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_res_0_V_reg_1947 <= exp_table1_q0;
        exp_res_1_V_reg_1953 <= exp_table1_q1;
        exp_res_2_V_reg_1959 <= exp_table1_q2;
        exp_res_3_V_reg_1965 <= exp_table1_q3;
        exp_res_7_V_reg_1986 <= exp_table1_q4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        exp_res_4_V_reg_2002 <= exp_table1_q5;
        exp_res_5_V_reg_2008 <= exp_table1_q6;
        exp_res_6_V_reg_2014 <= exp_table1_q7;
        exp_res_8_V_reg_2020 <= exp_table1_q8;
        exp_res_9_V_reg_2026 <= exp_table1_q9;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to11 = 1'b1;
    end else begin
        ap_idle_pp0_0to11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to11 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table1_ce5 = 1'b1;
    end else begin
        exp_table1_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table1_ce6 = 1'b1;
    end else begin
        exp_table1_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table1_ce7 = 1'b1;
    end else begin
        exp_table1_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table1_ce8 = 1'b1;
    end else begin
        exp_table1_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table1_ce9 = 1'b1;
    end else begin
        exp_table1_ce9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1506_ce = 1'b1;
    end else begin
        grp_fu_1506_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1513_ce = 1'b1;
    end else begin
        grp_fu_1513_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1520_ce = 1'b1;
    end else begin
        grp_fu_1520_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1527_ce = 1'b1;
    end else begin
        grp_fu_1527_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1534_ce = 1'b1;
    end else begin
        grp_fu_1534_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1541_ce = 1'b1;
    end else begin
        grp_fu_1541_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1548_ce = 1'b1;
    end else begin
        grp_fu_1548_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1555_ce = 1'b1;
    end else begin
        grp_fu_1555_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1562_ce = 1'b1;
    end else begin
        grp_fu_1562_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1569_ce = 1'b1;
    end else begin
        grp_fu_1569_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_0_V = {{grp_fu_1506_p2[19:6]}};
    end else begin
        res_0_V = res_0_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_1_V = {{grp_fu_1513_p2[19:6]}};
    end else begin
        res_1_V = res_1_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_2_V = {{grp_fu_1520_p2[19:6]}};
    end else begin
        res_2_V = res_2_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_3_V = {{grp_fu_1527_p2[19:6]}};
    end else begin
        res_3_V = res_3_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_4_V = {{grp_fu_1534_p2[19:6]}};
    end else begin
        res_4_V = res_4_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_5_V = {{grp_fu_1541_p2[19:6]}};
    end else begin
        res_5_V = res_5_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_5_V_ap_vld = 1'b1;
    end else begin
        res_5_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_6_V = {{grp_fu_1548_p2[19:6]}};
    end else begin
        res_6_V = res_6_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_6_V_ap_vld = 1'b1;
    end else begin
        res_6_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_7_V = {{grp_fu_1555_p2[19:6]}};
    end else begin
        res_7_V = res_7_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_7_V_ap_vld = 1'b1;
    end else begin
        res_7_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_8_V = {{grp_fu_1562_p2[19:6]}};
    end else begin
        res_8_V = res_8_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_8_V_ap_vld = 1'b1;
    end else begin
        res_8_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_9_V = {{grp_fu_1569_p2[19:6]}};
    end else begin
        res_9_V = res_9_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_9_V_ap_vld = 1'b1;
    end else begin
        res_9_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_1320_p2 = ($signed(exp_res_7_V_reg_1986) + $signed(exp_res_2_V_reg_1959));

assign add_ln703_2_fu_1324_p2 = ($signed(exp_res_3_V_reg_1965) + $signed(add_ln703_1_fu_1320_p2));

assign add_ln703_3_fu_1329_p2 = (add_ln703_fu_1316_p2 + add_ln703_2_fu_1324_p2);

assign add_ln703_4_fu_1335_p2 = ($signed(exp_res_5_V_reg_2008) + $signed(exp_res_6_V_reg_2014));

assign add_ln703_5_fu_1339_p2 = ($signed(exp_res_8_V_reg_2020) + $signed(exp_res_9_V_reg_2026));

assign add_ln703_6_fu_1343_p2 = ($signed(exp_res_4_V_reg_2002) + $signed(add_ln703_5_fu_1339_p2));

assign add_ln703_7_fu_1348_p2 = (add_ln703_4_fu_1335_p2 + add_ln703_6_fu_1343_p2);

assign add_ln703_fu_1316_p2 = ($signed(exp_res_1_V_reg_1953) + $signed(exp_res_0_V_reg_1947));

assign and_ln786_1_fu_845_p2 = (xor_ln786_1_fu_840_p2 & tmp_11_reg_1686);

assign and_ln786_2_fu_869_p2 = (xor_ln786_2_fu_864_p2 & tmp_13_reg_1700);

assign and_ln786_3_fu_893_p2 = (xor_ln786_3_fu_888_p2 & tmp_15_reg_1714);

assign and_ln786_4_fu_917_p2 = (xor_ln786_4_fu_912_p2 & tmp_17_reg_1728);

assign and_ln786_5_fu_941_p2 = (xor_ln786_5_fu_936_p2 & tmp_19_reg_1742);

assign and_ln786_6_fu_965_p2 = (xor_ln786_6_fu_960_p2 & tmp_21_reg_1756);

assign and_ln786_7_fu_989_p2 = (xor_ln786_7_fu_984_p2 & tmp_23_reg_1770);

assign and_ln786_8_fu_1013_p2 = (xor_ln786_8_fu_1008_p2 & tmp_25_reg_1784);

assign and_ln786_9_fu_1037_p2 = (xor_ln786_9_fu_1032_p2 & tmp_27_reg_1798);

assign and_ln786_fu_821_p2 = (xor_ln786_fu_816_p2 & tmp_reg_1672);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_sum_V_fu_1354_p2 = (add_ln703_3_reg_2032 + add_ln703_7_fu_1348_p2);

assign exp_table1_address0 = zext_ln306_fu_1276_p1;

assign exp_table1_address1 = zext_ln306_1_fu_1280_p1;

assign exp_table1_address2 = zext_ln306_2_fu_1284_p1;

assign exp_table1_address3 = zext_ln306_3_fu_1288_p1;

assign exp_table1_address4 = zext_ln306_7_fu_1292_p1;

assign exp_table1_address5 = zext_ln306_4_fu_1296_p1;

assign exp_table1_address6 = zext_ln306_5_fu_1300_p1;

assign exp_table1_address7 = zext_ln306_6_fu_1304_p1;

assign exp_table1_address8 = zext_ln306_8_fu_1308_p1;

assign exp_table1_address9 = zext_ln306_9_fu_1312_p1;

assign grp_fu_1506_p1 = sext_ln1116_fu_1373_p1;

assign grp_fu_1513_p1 = sext_ln1116_fu_1373_p1;

assign grp_fu_1520_p1 = sext_ln1116_fu_1373_p1;

assign grp_fu_1527_p1 = sext_ln1116_fu_1373_p1;

assign grp_fu_1534_p1 = sext_ln1116_fu_1373_p1;

assign grp_fu_1541_p1 = sext_ln1116_fu_1373_p1;

assign grp_fu_1548_p1 = sext_ln1116_fu_1373_p1;

assign grp_fu_1555_p1 = sext_ln1116_fu_1373_p1;

assign grp_fu_1562_p1 = sext_ln1116_fu_1373_p1;

assign grp_fu_1569_p1 = sext_ln1116_fu_1373_p1;

assign icmp_ln1496_1_fu_364_p0 = data_2_V_read;

assign icmp_ln1496_1_fu_364_p1 = data_3_V_read;

assign icmp_ln1496_1_fu_364_p2 = (($signed(icmp_ln1496_1_fu_364_p0) < $signed(icmp_ln1496_1_fu_364_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_378_p2 = (($signed(select_ln86_fu_356_p3) < $signed(select_ln86_1_fu_370_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_384_p0 = data_4_V_read;

assign icmp_ln1496_3_fu_384_p1 = data_5_V_read;

assign icmp_ln1496_3_fu_384_p2 = (($signed(icmp_ln1496_3_fu_384_p0) < $signed(icmp_ln1496_3_fu_384_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_398_p0 = data_6_V_read;

assign icmp_ln1496_4_fu_398_p1 = data_7_V_read;

assign icmp_ln1496_4_fu_398_p2 = (($signed(icmp_ln1496_4_fu_398_p0) < $signed(icmp_ln1496_4_fu_398_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_412_p2 = (($signed(select_ln86_3_fu_390_p3) < $signed(select_ln86_4_fu_404_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_428_p2 = (($signed(select_ln86_2_fu_418_p3) < $signed(select_ln86_5_fu_423_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_442_p2 = (($signed(data_8_V_read_1_reg_1583) < $signed(data_9_V_read_1_reg_1576)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_452_p2 = (($signed(select_ln86_6_reg_1660) < $signed(select_ln86_7_reg_1666)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_350_p0 = data_0_V_read;

assign icmp_ln1496_fu_350_p1 = data_1_V_read;

assign icmp_ln1496_fu_350_p2 = (($signed(icmp_ln1496_fu_350_p0) < $signed(icmp_ln1496_fu_350_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln314_fu_1369_p1;

assign or_ln340_1_fu_859_p2 = (xor_ln340_1_fu_854_p2 | tmp_12_reg_1693);

assign or_ln340_2_fu_883_p2 = (xor_ln340_2_fu_878_p2 | tmp_14_reg_1707);

assign or_ln340_3_fu_907_p2 = (xor_ln340_3_fu_902_p2 | tmp_16_reg_1721);

assign or_ln340_4_fu_931_p2 = (xor_ln340_4_fu_926_p2 | tmp_18_reg_1735);

assign or_ln340_5_fu_955_p2 = (xor_ln340_5_fu_950_p2 | tmp_20_reg_1749);

assign or_ln340_6_fu_979_p2 = (xor_ln340_6_fu_974_p2 | tmp_22_reg_1763);

assign or_ln340_7_fu_1003_p2 = (xor_ln340_7_fu_998_p2 | tmp_24_reg_1777);

assign or_ln340_8_fu_1027_p2 = (xor_ln340_8_fu_1022_p2 | tmp_26_reg_1791);

assign or_ln340_9_fu_1051_p2 = (xor_ln340_9_fu_1046_p2 | tmp_28_reg_1805);

assign or_ln340_fu_835_p2 = (xor_ln340_fu_830_p2 | tmp_10_reg_1679);

assign select_ln340_10_fu_1166_p3 = ((xor_ln340_15_fu_946_p2[0:0] === 1'b1) ? 10'd511 : tmp_s_reg_1842);

assign select_ln340_12_fu_1188_p3 = ((xor_ln340_16_fu_970_p2[0:0] === 1'b1) ? 10'd511 : tmp_2_reg_1848);

assign select_ln340_14_fu_1210_p3 = ((xor_ln340_17_fu_994_p2[0:0] === 1'b1) ? 10'd511 : tmp_4_reg_1854);

assign select_ln340_16_fu_1232_p3 = ((xor_ln340_18_fu_1018_p2[0:0] === 1'b1) ? 10'd511 : tmp_6_reg_1860);

assign select_ln340_18_fu_1254_p3 = ((xor_ln340_19_fu_1042_p2[0:0] === 1'b1) ? 10'd511 : tmp_8_reg_1866);

assign select_ln340_2_fu_1078_p3 = ((xor_ln340_11_fu_850_p2[0:0] === 1'b1) ? 10'd511 : tmp_3_reg_1818);

assign select_ln340_4_fu_1100_p3 = ((xor_ln340_12_fu_874_p2[0:0] === 1'b1) ? 10'd511 : tmp_5_reg_1824);

assign select_ln340_6_fu_1122_p3 = ((xor_ln340_13_fu_898_p2[0:0] === 1'b1) ? 10'd511 : tmp_7_reg_1830);

assign select_ln340_8_fu_1144_p3 = ((xor_ln340_14_fu_922_p2[0:0] === 1'b1) ? 10'd511 : tmp_9_reg_1836);

assign select_ln340_fu_1056_p3 = ((xor_ln340_10_fu_826_p2[0:0] === 1'b1) ? 10'd511 : tmp_1_reg_1812);

assign select_ln388_1_fu_1085_p3 = ((and_ln786_1_fu_845_p2[0:0] === 1'b1) ? 10'd512 : tmp_3_reg_1818);

assign select_ln388_2_fu_1107_p3 = ((and_ln786_2_fu_869_p2[0:0] === 1'b1) ? 10'd512 : tmp_5_reg_1824);

assign select_ln388_3_fu_1129_p3 = ((and_ln786_3_fu_893_p2[0:0] === 1'b1) ? 10'd512 : tmp_7_reg_1830);

assign select_ln388_4_fu_1151_p3 = ((and_ln786_4_fu_917_p2[0:0] === 1'b1) ? 10'd512 : tmp_9_reg_1836);

assign select_ln388_5_fu_1173_p3 = ((and_ln786_5_fu_941_p2[0:0] === 1'b1) ? 10'd512 : tmp_s_reg_1842);

assign select_ln388_6_fu_1195_p3 = ((and_ln786_6_fu_965_p2[0:0] === 1'b1) ? 10'd512 : tmp_2_reg_1848);

assign select_ln388_7_fu_1217_p3 = ((and_ln786_7_fu_989_p2[0:0] === 1'b1) ? 10'd512 : tmp_4_reg_1854);

assign select_ln388_8_fu_1239_p3 = ((and_ln786_8_fu_1013_p2[0:0] === 1'b1) ? 10'd512 : tmp_6_reg_1860);

assign select_ln388_9_fu_1261_p3 = ((and_ln786_9_fu_1037_p2[0:0] === 1'b1) ? 10'd512 : tmp_8_reg_1866);

assign select_ln388_fu_1063_p3 = ((and_ln786_fu_821_p2[0:0] === 1'b1) ? 10'd512 : tmp_1_reg_1812);

assign select_ln86_1_fu_370_p1 = data_3_V_read;

assign select_ln86_1_fu_370_p2 = data_2_V_read;

assign select_ln86_1_fu_370_p3 = ((icmp_ln1496_1_fu_364_p2[0:0] === 1'b1) ? select_ln86_1_fu_370_p1 : select_ln86_1_fu_370_p2);

assign select_ln86_2_fu_418_p3 = ((icmp_ln1496_2_reg_1640[0:0] === 1'b1) ? select_ln86_1_reg_1635 : select_ln86_reg_1630);

assign select_ln86_3_fu_390_p1 = data_5_V_read;

assign select_ln86_3_fu_390_p2 = data_4_V_read;

assign select_ln86_3_fu_390_p3 = ((icmp_ln1496_3_fu_384_p2[0:0] === 1'b1) ? select_ln86_3_fu_390_p1 : select_ln86_3_fu_390_p2);

assign select_ln86_4_fu_404_p1 = data_7_V_read;

assign select_ln86_4_fu_404_p2 = data_6_V_read;

assign select_ln86_4_fu_404_p3 = ((icmp_ln1496_4_fu_398_p2[0:0] === 1'b1) ? select_ln86_4_fu_404_p1 : select_ln86_4_fu_404_p2);

assign select_ln86_5_fu_423_p3 = ((icmp_ln1496_5_reg_1655[0:0] === 1'b1) ? select_ln86_4_reg_1650 : select_ln86_3_reg_1645);

assign select_ln86_6_fu_434_p3 = ((icmp_ln1496_6_fu_428_p2[0:0] === 1'b1) ? select_ln86_5_fu_423_p3 : select_ln86_2_fu_418_p3);

assign select_ln86_7_fu_446_p3 = ((icmp_ln1496_7_fu_442_p2[0:0] === 1'b1) ? data_9_V_read_1_reg_1576 : data_8_V_read_1_reg_1583);

assign select_ln86_fu_356_p1 = data_1_V_read;

assign select_ln86_fu_356_p2 = data_0_V_read;

assign select_ln86_fu_356_p3 = ((icmp_ln1496_fu_350_p2[0:0] === 1'b1) ? select_ln86_fu_356_p1 : select_ln86_fu_356_p2);

assign sext_ln1116_fu_1373_p1 = $signed(inv_exp_sum_V_reg_2047);

assign sext_ln703_10_fu_691_p1 = data_9_V_read_1_reg_1576_pp0_iter1_reg;

assign sext_ln703_1_fu_465_p1 = $signed(x_max_V_fu_456_p3);

assign sext_ln703_2_fu_491_p1 = data_1_V_read_1_reg_1620_pp0_iter1_reg;

assign sext_ln703_3_fu_516_p1 = data_2_V_read_1_reg_1615_pp0_iter1_reg;

assign sext_ln703_4_fu_541_p1 = data_3_V_read_1_reg_1610_pp0_iter1_reg;

assign sext_ln703_5_fu_566_p1 = data_4_V_read_1_reg_1605_pp0_iter1_reg;

assign sext_ln703_6_fu_591_p1 = data_5_V_read_1_reg_1600_pp0_iter1_reg;

assign sext_ln703_7_fu_616_p1 = data_6_V_read_1_reg_1595_pp0_iter1_reg;

assign sext_ln703_8_fu_641_p1 = data_7_V_read_1_reg_1590_pp0_iter1_reg;

assign sext_ln703_9_fu_666_p1 = data_8_V_read_1_reg_1583_pp0_iter1_reg;

assign sext_ln703_fu_462_p1 = data_0_V_read_1_reg_1625_pp0_iter1_reg;

assign sub_ln1193_1_fu_494_p2 = ($signed(sext_ln703_2_fu_491_p1) - $signed(sext_ln703_1_fu_465_p1));

assign sub_ln1193_2_fu_519_p2 = ($signed(sext_ln703_3_fu_516_p1) - $signed(sext_ln703_1_fu_465_p1));

assign sub_ln1193_3_fu_544_p2 = ($signed(sext_ln703_4_fu_541_p1) - $signed(sext_ln703_1_fu_465_p1));

assign sub_ln1193_4_fu_569_p2 = ($signed(sext_ln703_5_fu_566_p1) - $signed(sext_ln703_1_fu_465_p1));

assign sub_ln1193_5_fu_594_p2 = ($signed(sext_ln703_6_fu_591_p1) - $signed(sext_ln703_1_fu_465_p1));

assign sub_ln1193_6_fu_619_p2 = ($signed(sext_ln703_7_fu_616_p1) - $signed(sext_ln703_1_fu_465_p1));

assign sub_ln1193_7_fu_644_p2 = ($signed(sext_ln703_8_fu_641_p1) - $signed(sext_ln703_1_fu_465_p1));

assign sub_ln1193_8_fu_669_p2 = ($signed(sext_ln703_9_fu_666_p1) - $signed(sext_ln703_1_fu_465_p1));

assign sub_ln1193_9_fu_694_p2 = ($signed(sext_ln703_10_fu_691_p1) - $signed(sext_ln703_1_fu_465_p1));

assign sub_ln1193_fu_469_p2 = ($signed(sext_ln703_fu_462_p1) - $signed(sext_ln703_1_fu_465_p1));

assign x_max_V_fu_456_p3 = ((icmp_ln1496_8_fu_452_p2[0:0] === 1'b1) ? select_ln86_7_reg_1666 : select_ln86_6_reg_1660);

assign xor_ln340_10_fu_826_p2 = (tmp_reg_1672 ^ tmp_10_reg_1679);

assign xor_ln340_11_fu_850_p2 = (tmp_12_reg_1693 ^ tmp_11_reg_1686);

assign xor_ln340_12_fu_874_p2 = (tmp_14_reg_1707 ^ tmp_13_reg_1700);

assign xor_ln340_13_fu_898_p2 = (tmp_16_reg_1721 ^ tmp_15_reg_1714);

assign xor_ln340_14_fu_922_p2 = (tmp_18_reg_1735 ^ tmp_17_reg_1728);

assign xor_ln340_15_fu_946_p2 = (tmp_20_reg_1749 ^ tmp_19_reg_1742);

assign xor_ln340_16_fu_970_p2 = (tmp_22_reg_1763 ^ tmp_21_reg_1756);

assign xor_ln340_17_fu_994_p2 = (tmp_24_reg_1777 ^ tmp_23_reg_1770);

assign xor_ln340_18_fu_1018_p2 = (tmp_26_reg_1791 ^ tmp_25_reg_1784);

assign xor_ln340_19_fu_1042_p2 = (tmp_28_reg_1805 ^ tmp_27_reg_1798);

assign xor_ln340_1_fu_854_p2 = (tmp_11_reg_1686 ^ 1'd1);

assign xor_ln340_2_fu_878_p2 = (tmp_13_reg_1700 ^ 1'd1);

assign xor_ln340_3_fu_902_p2 = (tmp_15_reg_1714 ^ 1'd1);

assign xor_ln340_4_fu_926_p2 = (tmp_17_reg_1728 ^ 1'd1);

assign xor_ln340_5_fu_950_p2 = (tmp_19_reg_1742 ^ 1'd1);

assign xor_ln340_6_fu_974_p2 = (tmp_21_reg_1756 ^ 1'd1);

assign xor_ln340_7_fu_998_p2 = (tmp_23_reg_1770 ^ 1'd1);

assign xor_ln340_8_fu_1022_p2 = (tmp_25_reg_1784 ^ 1'd1);

assign xor_ln340_9_fu_1046_p2 = (tmp_27_reg_1798 ^ 1'd1);

assign xor_ln340_fu_830_p2 = (tmp_reg_1672 ^ 1'd1);

assign xor_ln786_1_fu_840_p2 = (tmp_12_reg_1693 ^ 1'd1);

assign xor_ln786_2_fu_864_p2 = (tmp_14_reg_1707 ^ 1'd1);

assign xor_ln786_3_fu_888_p2 = (tmp_16_reg_1721 ^ 1'd1);

assign xor_ln786_4_fu_912_p2 = (tmp_18_reg_1735 ^ 1'd1);

assign xor_ln786_5_fu_936_p2 = (tmp_20_reg_1749 ^ 1'd1);

assign xor_ln786_6_fu_960_p2 = (tmp_22_reg_1763 ^ 1'd1);

assign xor_ln786_7_fu_984_p2 = (tmp_24_reg_1777 ^ 1'd1);

assign xor_ln786_8_fu_1008_p2 = (tmp_26_reg_1791 ^ 1'd1);

assign xor_ln786_9_fu_1032_p2 = (tmp_28_reg_1805 ^ 1'd1);

assign xor_ln786_fu_816_p2 = (tmp_10_reg_1679 ^ 1'd1);

assign y_V_1_fu_1092_p3 = ((or_ln340_1_fu_859_p2[0:0] === 1'b1) ? select_ln340_2_fu_1078_p3 : select_ln388_1_fu_1085_p3);

assign y_V_2_fu_1114_p3 = ((or_ln340_2_fu_883_p2[0:0] === 1'b1) ? select_ln340_4_fu_1100_p3 : select_ln388_2_fu_1107_p3);

assign y_V_3_fu_1136_p3 = ((or_ln340_3_fu_907_p2[0:0] === 1'b1) ? select_ln340_6_fu_1122_p3 : select_ln388_3_fu_1129_p3);

assign y_V_4_fu_1158_p3 = ((or_ln340_4_fu_931_p2[0:0] === 1'b1) ? select_ln340_8_fu_1144_p3 : select_ln388_4_fu_1151_p3);

assign y_V_5_fu_1180_p3 = ((or_ln340_5_fu_955_p2[0:0] === 1'b1) ? select_ln340_10_fu_1166_p3 : select_ln388_5_fu_1173_p3);

assign y_V_6_fu_1202_p3 = ((or_ln340_6_fu_979_p2[0:0] === 1'b1) ? select_ln340_12_fu_1188_p3 : select_ln388_6_fu_1195_p3);

assign y_V_7_fu_1224_p3 = ((or_ln340_7_fu_1003_p2[0:0] === 1'b1) ? select_ln340_14_fu_1210_p3 : select_ln388_7_fu_1217_p3);

assign y_V_8_fu_1246_p3 = ((or_ln340_8_fu_1027_p2[0:0] === 1'b1) ? select_ln340_16_fu_1232_p3 : select_ln388_8_fu_1239_p3);

assign y_V_9_fu_1268_p3 = ((or_ln340_9_fu_1051_p2[0:0] === 1'b1) ? select_ln340_18_fu_1254_p3 : select_ln388_9_fu_1261_p3);

assign y_V_fu_1070_p3 = ((or_ln340_fu_835_p2[0:0] === 1'b1) ? select_ln340_fu_1056_p3 : select_ln388_fu_1063_p3);

assign zext_ln306_1_fu_1280_p1 = y_V_1_reg_1877;

assign zext_ln306_2_fu_1284_p1 = y_V_2_reg_1882;

assign zext_ln306_3_fu_1288_p1 = y_V_3_reg_1887;

assign zext_ln306_4_fu_1296_p1 = y_V_4_reg_1892_pp0_iter4_reg;

assign zext_ln306_5_fu_1300_p1 = y_V_5_reg_1897_pp0_iter4_reg;

assign zext_ln306_6_fu_1304_p1 = y_V_6_reg_1902_pp0_iter4_reg;

assign zext_ln306_7_fu_1292_p1 = y_V_7_reg_1907;

assign zext_ln306_8_fu_1308_p1 = y_V_8_reg_1912_pp0_iter4_reg;

assign zext_ln306_9_fu_1312_p1 = y_V_9_reg_1917_pp0_iter4_reg;

assign zext_ln306_fu_1276_p1 = y_V_reg_1872;

assign zext_ln314_fu_1369_p1 = y_V_10_reg_2037;

endmodule //softmax_stable_ap_fixed_ap_fixed_softmax_config8_s
