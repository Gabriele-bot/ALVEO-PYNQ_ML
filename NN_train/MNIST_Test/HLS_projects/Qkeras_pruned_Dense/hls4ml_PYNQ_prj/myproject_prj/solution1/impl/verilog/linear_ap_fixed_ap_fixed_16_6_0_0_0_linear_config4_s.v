// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        data_5_V_read,
        data_6_V_read,
        data_7_V_read,
        data_8_V_read,
        data_9_V_read,
        data_10_V_read,
        data_11_V_read,
        data_12_V_read,
        data_13_V_read,
        data_14_V_read,
        data_15_V_read,
        data_16_V_read,
        data_17_V_read,
        data_18_V_read,
        data_19_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [8:0] data_0_V_read;
input  [8:0] data_1_V_read;
input  [8:0] data_2_V_read;
input  [8:0] data_3_V_read;
input  [8:0] data_4_V_read;
input  [8:0] data_5_V_read;
input  [8:0] data_6_V_read;
input  [8:0] data_7_V_read;
input  [8:0] data_8_V_read;
input  [8:0] data_9_V_read;
input  [8:0] data_10_V_read;
input  [8:0] data_11_V_read;
input  [8:0] data_12_V_read;
input  [8:0] data_13_V_read;
input  [8:0] data_14_V_read;
input  [8:0] data_15_V_read;
input  [8:0] data_16_V_read;
input  [8:0] data_17_V_read;
input  [8:0] data_18_V_read;
input  [8:0] data_19_V_read;
output  [13:0] ap_return_0;
output  [13:0] ap_return_1;
output  [13:0] ap_return_2;
output  [13:0] ap_return_3;
output  [13:0] ap_return_4;
output  [13:0] ap_return_5;
output  [13:0] ap_return_6;
output  [13:0] ap_return_7;
output  [13:0] ap_return_8;
output  [13:0] ap_return_9;
output  [13:0] ap_return_10;
output  [13:0] ap_return_11;
output  [13:0] ap_return_12;
output  [13:0] ap_return_13;
output  [13:0] ap_return_14;
output  [13:0] ap_return_15;
output  [13:0] ap_return_16;
output  [13:0] ap_return_17;
output  [13:0] ap_return_18;
output  [13:0] ap_return_19;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] ap_return_0;
reg[13:0] ap_return_1;
reg[13:0] ap_return_2;
reg[13:0] ap_return_3;
reg[13:0] ap_return_4;
reg[13:0] ap_return_5;
reg[13:0] ap_return_6;
reg[13:0] ap_return_7;
reg[13:0] ap_return_8;
reg[13:0] ap_return_9;
reg[13:0] ap_return_10;
reg[13:0] ap_return_11;
reg[13:0] ap_return_12;
reg[13:0] ap_return_13;
reg[13:0] ap_return_14;
reg[13:0] ap_return_15;
reg[13:0] ap_return_16;
reg[13:0] ap_return_17;
reg[13:0] ap_return_18;
reg[13:0] ap_return_19;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [13:0] res_0_V_write_assign_fu_184_p3;
wire   [13:0] res_1_V_write_assign_fu_192_p3;
wire   [13:0] res_2_V_write_assign_fu_200_p3;
wire   [13:0] res_3_V_write_assign_fu_208_p3;
wire   [13:0] res_4_V_write_assign_fu_216_p3;
wire   [13:0] res_5_V_write_assign_fu_224_p3;
wire   [13:0] res_6_V_write_assign_fu_232_p3;
wire   [13:0] res_7_V_write_assign_fu_240_p3;
wire   [13:0] res_8_V_write_assign_fu_248_p3;
wire   [13:0] res_9_V_write_assign_fu_256_p3;
wire   [13:0] res_10_V_write_assign_fu_264_p3;
wire   [13:0] res_11_V_write_assign_fu_272_p3;
wire   [13:0] res_12_V_write_assign_fu_280_p3;
wire   [13:0] res_13_V_write_assign_fu_288_p3;
wire   [13:0] res_14_V_write_assign_fu_296_p3;
wire   [13:0] res_15_V_write_assign_fu_304_p3;
wire   [13:0] res_16_V_write_assign_fu_312_p3;
wire   [13:0] res_17_V_write_assign_fu_320_p3;
wire   [13:0] res_18_V_write_assign_fu_328_p3;
wire   [13:0] res_19_V_write_assign_fu_336_p3;
reg   [13:0] ap_return_0_preg;
reg   [13:0] ap_return_1_preg;
reg   [13:0] ap_return_2_preg;
reg   [13:0] ap_return_3_preg;
reg   [13:0] ap_return_4_preg;
reg   [13:0] ap_return_5_preg;
reg   [13:0] ap_return_6_preg;
reg   [13:0] ap_return_7_preg;
reg   [13:0] ap_return_8_preg;
reg   [13:0] ap_return_9_preg;
reg   [13:0] ap_return_10_preg;
reg   [13:0] ap_return_11_preg;
reg   [13:0] ap_return_12_preg;
reg   [13:0] ap_return_13_preg;
reg   [13:0] ap_return_14_preg;
reg   [13:0] ap_return_15_preg;
reg   [13:0] ap_return_16_preg;
reg   [13:0] ap_return_17_preg;
reg   [13:0] ap_return_18_preg;
reg   [13:0] ap_return_19_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 14'd0;
#0 ap_return_1_preg = 14'd0;
#0 ap_return_2_preg = 14'd0;
#0 ap_return_3_preg = 14'd0;
#0 ap_return_4_preg = 14'd0;
#0 ap_return_5_preg = 14'd0;
#0 ap_return_6_preg = 14'd0;
#0 ap_return_7_preg = 14'd0;
#0 ap_return_8_preg = 14'd0;
#0 ap_return_9_preg = 14'd0;
#0 ap_return_10_preg = 14'd0;
#0 ap_return_11_preg = 14'd0;
#0 ap_return_12_preg = 14'd0;
#0 ap_return_13_preg = 14'd0;
#0 ap_return_14_preg = 14'd0;
#0 ap_return_15_preg = 14'd0;
#0 ap_return_16_preg = 14'd0;
#0 ap_return_17_preg = 14'd0;
#0 ap_return_18_preg = 14'd0;
#0 ap_return_19_preg = 14'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[5] <= 1'b0;
        ap_return_0_preg[6] <= 1'b0;
        ap_return_0_preg[7] <= 1'b0;
        ap_return_0_preg[8] <= 1'b0;
        ap_return_0_preg[9] <= 1'b0;
        ap_return_0_preg[10] <= 1'b0;
        ap_return_0_preg[11] <= 1'b0;
        ap_return_0_preg[12] <= 1'b0;
        ap_return_0_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_0_preg[13 : 5] <= res_0_V_write_assign_fu_184_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_10_preg[5] <= 1'b0;
        ap_return_10_preg[6] <= 1'b0;
        ap_return_10_preg[7] <= 1'b0;
        ap_return_10_preg[8] <= 1'b0;
        ap_return_10_preg[9] <= 1'b0;
        ap_return_10_preg[10] <= 1'b0;
        ap_return_10_preg[11] <= 1'b0;
        ap_return_10_preg[12] <= 1'b0;
        ap_return_10_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_10_preg[13 : 5] <= res_10_V_write_assign_fu_264_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_11_preg[5] <= 1'b0;
        ap_return_11_preg[6] <= 1'b0;
        ap_return_11_preg[7] <= 1'b0;
        ap_return_11_preg[8] <= 1'b0;
        ap_return_11_preg[9] <= 1'b0;
        ap_return_11_preg[10] <= 1'b0;
        ap_return_11_preg[11] <= 1'b0;
        ap_return_11_preg[12] <= 1'b0;
        ap_return_11_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_11_preg[13 : 5] <= res_11_V_write_assign_fu_272_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_12_preg[5] <= 1'b0;
        ap_return_12_preg[6] <= 1'b0;
        ap_return_12_preg[7] <= 1'b0;
        ap_return_12_preg[8] <= 1'b0;
        ap_return_12_preg[9] <= 1'b0;
        ap_return_12_preg[10] <= 1'b0;
        ap_return_12_preg[11] <= 1'b0;
        ap_return_12_preg[12] <= 1'b0;
        ap_return_12_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_12_preg[13 : 5] <= res_12_V_write_assign_fu_280_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_13_preg[5] <= 1'b0;
        ap_return_13_preg[6] <= 1'b0;
        ap_return_13_preg[7] <= 1'b0;
        ap_return_13_preg[8] <= 1'b0;
        ap_return_13_preg[9] <= 1'b0;
        ap_return_13_preg[10] <= 1'b0;
        ap_return_13_preg[11] <= 1'b0;
        ap_return_13_preg[12] <= 1'b0;
        ap_return_13_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_13_preg[13 : 5] <= res_13_V_write_assign_fu_288_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_14_preg[5] <= 1'b0;
        ap_return_14_preg[6] <= 1'b0;
        ap_return_14_preg[7] <= 1'b0;
        ap_return_14_preg[8] <= 1'b0;
        ap_return_14_preg[9] <= 1'b0;
        ap_return_14_preg[10] <= 1'b0;
        ap_return_14_preg[11] <= 1'b0;
        ap_return_14_preg[12] <= 1'b0;
        ap_return_14_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_14_preg[13 : 5] <= res_14_V_write_assign_fu_296_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_15_preg[5] <= 1'b0;
        ap_return_15_preg[6] <= 1'b0;
        ap_return_15_preg[7] <= 1'b0;
        ap_return_15_preg[8] <= 1'b0;
        ap_return_15_preg[9] <= 1'b0;
        ap_return_15_preg[10] <= 1'b0;
        ap_return_15_preg[11] <= 1'b0;
        ap_return_15_preg[12] <= 1'b0;
        ap_return_15_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_15_preg[13 : 5] <= res_15_V_write_assign_fu_304_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_16_preg[5] <= 1'b0;
        ap_return_16_preg[6] <= 1'b0;
        ap_return_16_preg[7] <= 1'b0;
        ap_return_16_preg[8] <= 1'b0;
        ap_return_16_preg[9] <= 1'b0;
        ap_return_16_preg[10] <= 1'b0;
        ap_return_16_preg[11] <= 1'b0;
        ap_return_16_preg[12] <= 1'b0;
        ap_return_16_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_16_preg[13 : 5] <= res_16_V_write_assign_fu_312_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_17_preg[5] <= 1'b0;
        ap_return_17_preg[6] <= 1'b0;
        ap_return_17_preg[7] <= 1'b0;
        ap_return_17_preg[8] <= 1'b0;
        ap_return_17_preg[9] <= 1'b0;
        ap_return_17_preg[10] <= 1'b0;
        ap_return_17_preg[11] <= 1'b0;
        ap_return_17_preg[12] <= 1'b0;
        ap_return_17_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_17_preg[13 : 5] <= res_17_V_write_assign_fu_320_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_18_preg[5] <= 1'b0;
        ap_return_18_preg[6] <= 1'b0;
        ap_return_18_preg[7] <= 1'b0;
        ap_return_18_preg[8] <= 1'b0;
        ap_return_18_preg[9] <= 1'b0;
        ap_return_18_preg[10] <= 1'b0;
        ap_return_18_preg[11] <= 1'b0;
        ap_return_18_preg[12] <= 1'b0;
        ap_return_18_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_18_preg[13 : 5] <= res_18_V_write_assign_fu_328_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_19_preg[5] <= 1'b0;
        ap_return_19_preg[6] <= 1'b0;
        ap_return_19_preg[7] <= 1'b0;
        ap_return_19_preg[8] <= 1'b0;
        ap_return_19_preg[9] <= 1'b0;
        ap_return_19_preg[10] <= 1'b0;
        ap_return_19_preg[11] <= 1'b0;
        ap_return_19_preg[12] <= 1'b0;
        ap_return_19_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_19_preg[13 : 5] <= res_19_V_write_assign_fu_336_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
        ap_return_1_preg[9] <= 1'b0;
        ap_return_1_preg[10] <= 1'b0;
        ap_return_1_preg[11] <= 1'b0;
        ap_return_1_preg[12] <= 1'b0;
        ap_return_1_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_1_preg[13 : 5] <= res_1_V_write_assign_fu_192_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_2_preg[5] <= 1'b0;
        ap_return_2_preg[6] <= 1'b0;
        ap_return_2_preg[7] <= 1'b0;
        ap_return_2_preg[8] <= 1'b0;
        ap_return_2_preg[9] <= 1'b0;
        ap_return_2_preg[10] <= 1'b0;
        ap_return_2_preg[11] <= 1'b0;
        ap_return_2_preg[12] <= 1'b0;
        ap_return_2_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_2_preg[13 : 5] <= res_2_V_write_assign_fu_200_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_3_preg[5] <= 1'b0;
        ap_return_3_preg[6] <= 1'b0;
        ap_return_3_preg[7] <= 1'b0;
        ap_return_3_preg[8] <= 1'b0;
        ap_return_3_preg[9] <= 1'b0;
        ap_return_3_preg[10] <= 1'b0;
        ap_return_3_preg[11] <= 1'b0;
        ap_return_3_preg[12] <= 1'b0;
        ap_return_3_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_3_preg[13 : 5] <= res_3_V_write_assign_fu_208_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_4_preg[5] <= 1'b0;
        ap_return_4_preg[6] <= 1'b0;
        ap_return_4_preg[7] <= 1'b0;
        ap_return_4_preg[8] <= 1'b0;
        ap_return_4_preg[9] <= 1'b0;
        ap_return_4_preg[10] <= 1'b0;
        ap_return_4_preg[11] <= 1'b0;
        ap_return_4_preg[12] <= 1'b0;
        ap_return_4_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_4_preg[13 : 5] <= res_4_V_write_assign_fu_216_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_5_preg[5] <= 1'b0;
        ap_return_5_preg[6] <= 1'b0;
        ap_return_5_preg[7] <= 1'b0;
        ap_return_5_preg[8] <= 1'b0;
        ap_return_5_preg[9] <= 1'b0;
        ap_return_5_preg[10] <= 1'b0;
        ap_return_5_preg[11] <= 1'b0;
        ap_return_5_preg[12] <= 1'b0;
        ap_return_5_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_5_preg[13 : 5] <= res_5_V_write_assign_fu_224_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_6_preg[5] <= 1'b0;
        ap_return_6_preg[6] <= 1'b0;
        ap_return_6_preg[7] <= 1'b0;
        ap_return_6_preg[8] <= 1'b0;
        ap_return_6_preg[9] <= 1'b0;
        ap_return_6_preg[10] <= 1'b0;
        ap_return_6_preg[11] <= 1'b0;
        ap_return_6_preg[12] <= 1'b0;
        ap_return_6_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_6_preg[13 : 5] <= res_6_V_write_assign_fu_232_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_7_preg[5] <= 1'b0;
        ap_return_7_preg[6] <= 1'b0;
        ap_return_7_preg[7] <= 1'b0;
        ap_return_7_preg[8] <= 1'b0;
        ap_return_7_preg[9] <= 1'b0;
        ap_return_7_preg[10] <= 1'b0;
        ap_return_7_preg[11] <= 1'b0;
        ap_return_7_preg[12] <= 1'b0;
        ap_return_7_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_7_preg[13 : 5] <= res_7_V_write_assign_fu_240_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_8_preg[5] <= 1'b0;
        ap_return_8_preg[6] <= 1'b0;
        ap_return_8_preg[7] <= 1'b0;
        ap_return_8_preg[8] <= 1'b0;
        ap_return_8_preg[9] <= 1'b0;
        ap_return_8_preg[10] <= 1'b0;
        ap_return_8_preg[11] <= 1'b0;
        ap_return_8_preg[12] <= 1'b0;
        ap_return_8_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_8_preg[13 : 5] <= res_8_V_write_assign_fu_248_p3[13 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_9_preg[5] <= 1'b0;
        ap_return_9_preg[6] <= 1'b0;
        ap_return_9_preg[7] <= 1'b0;
        ap_return_9_preg[8] <= 1'b0;
        ap_return_9_preg[9] <= 1'b0;
        ap_return_9_preg[10] <= 1'b0;
        ap_return_9_preg[11] <= 1'b0;
        ap_return_9_preg[12] <= 1'b0;
        ap_return_9_preg[13] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_9_preg[13 : 5] <= res_9_V_write_assign_fu_256_p3[13 : 5];
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = res_0_V_write_assign_fu_184_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = res_1_V_write_assign_fu_192_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_10 = res_10_V_write_assign_fu_264_p3;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_11 = res_11_V_write_assign_fu_272_p3;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_12 = res_12_V_write_assign_fu_280_p3;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_13 = res_13_V_write_assign_fu_288_p3;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_14 = res_14_V_write_assign_fu_296_p3;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_15 = res_15_V_write_assign_fu_304_p3;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_16 = res_16_V_write_assign_fu_312_p3;
    end else begin
        ap_return_16 = ap_return_16_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_17 = res_17_V_write_assign_fu_320_p3;
    end else begin
        ap_return_17 = ap_return_17_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_18 = res_18_V_write_assign_fu_328_p3;
    end else begin
        ap_return_18 = ap_return_18_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_19 = res_19_V_write_assign_fu_336_p3;
    end else begin
        ap_return_19 = ap_return_19_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = res_2_V_write_assign_fu_200_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = res_3_V_write_assign_fu_208_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_4 = res_4_V_write_assign_fu_216_p3;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_5 = res_5_V_write_assign_fu_224_p3;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_6 = res_6_V_write_assign_fu_232_p3;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_7 = res_7_V_write_assign_fu_240_p3;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_8 = res_8_V_write_assign_fu_248_p3;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_9 = res_9_V_write_assign_fu_256_p3;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign res_0_V_write_assign_fu_184_p3 = {{data_0_V_read}, {5'd0}};

assign res_10_V_write_assign_fu_264_p3 = {{data_10_V_read}, {5'd0}};

assign res_11_V_write_assign_fu_272_p3 = {{data_11_V_read}, {5'd0}};

assign res_12_V_write_assign_fu_280_p3 = {{data_12_V_read}, {5'd0}};

assign res_13_V_write_assign_fu_288_p3 = {{data_13_V_read}, {5'd0}};

assign res_14_V_write_assign_fu_296_p3 = {{data_14_V_read}, {5'd0}};

assign res_15_V_write_assign_fu_304_p3 = {{data_15_V_read}, {5'd0}};

assign res_16_V_write_assign_fu_312_p3 = {{data_16_V_read}, {5'd0}};

assign res_17_V_write_assign_fu_320_p3 = {{data_17_V_read}, {5'd0}};

assign res_18_V_write_assign_fu_328_p3 = {{data_18_V_read}, {5'd0}};

assign res_19_V_write_assign_fu_336_p3 = {{data_19_V_read}, {5'd0}};

assign res_1_V_write_assign_fu_192_p3 = {{data_1_V_read}, {5'd0}};

assign res_2_V_write_assign_fu_200_p3 = {{data_2_V_read}, {5'd0}};

assign res_3_V_write_assign_fu_208_p3 = {{data_3_V_read}, {5'd0}};

assign res_4_V_write_assign_fu_216_p3 = {{data_4_V_read}, {5'd0}};

assign res_5_V_write_assign_fu_224_p3 = {{data_5_V_read}, {5'd0}};

assign res_6_V_write_assign_fu_232_p3 = {{data_6_V_read}, {5'd0}};

assign res_7_V_write_assign_fu_240_p3 = {{data_7_V_read}, {5'd0}};

assign res_8_V_write_assign_fu_248_p3 = {{data_8_V_read}, {5'd0}};

assign res_9_V_write_assign_fu_256_p3 = {{data_9_V_read}, {5'd0}};

always @ (posedge ap_clk) begin
    ap_return_0_preg[4:0] <= 5'b00000;
    ap_return_1_preg[4:0] <= 5'b00000;
    ap_return_2_preg[4:0] <= 5'b00000;
    ap_return_3_preg[4:0] <= 5'b00000;
    ap_return_4_preg[4:0] <= 5'b00000;
    ap_return_5_preg[4:0] <= 5'b00000;
    ap_return_6_preg[4:0] <= 5'b00000;
    ap_return_7_preg[4:0] <= 5'b00000;
    ap_return_8_preg[4:0] <= 5'b00000;
    ap_return_9_preg[4:0] <= 5'b00000;
    ap_return_10_preg[4:0] <= 5'b00000;
    ap_return_11_preg[4:0] <= 5'b00000;
    ap_return_12_preg[4:0] <= 5'b00000;
    ap_return_13_preg[4:0] <= 5'b00000;
    ap_return_14_preg[4:0] <= 5'b00000;
    ap_return_15_preg[4:0] <= 5'b00000;
    ap_return_16_preg[4:0] <= 5'b00000;
    ap_return_17_preg[4:0] <= 5'b00000;
    ap_return_18_preg[4:0] <= 5'b00000;
    ap_return_19_preg[4:0] <= 5'b00000;
end

endmodule //linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config4_s
