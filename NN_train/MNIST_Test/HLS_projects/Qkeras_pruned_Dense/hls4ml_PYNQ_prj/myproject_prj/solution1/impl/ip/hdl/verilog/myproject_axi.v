// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject_axi,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=2.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.739000,HLS_SYN_LAT=880,HLS_SYN_TPT=none,HLS_SYN_MEM=418,HLS_SYN_DSP=10,HLS_SYN_FF=51332,HLS_SYN_LUT=188436,HLS_VERSION=2020_1}" *)

module myproject_axi (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_state9 = 6'd4;
parameter    ap_ST_fsm_state10 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state17 = 6'd32;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [0:0] in_r_TLAST;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;

reg in_r_TREADY;

 reg    ap_rst_n_inv;
reg    in_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln19_fu_311_p2;
reg    out_r_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln27_reg_1329;
reg   [0:0] icmp_ln27_reg_1329_pp1_iter3_reg;
reg    ap_enable_reg_pp1_iter5;
reg   [0:0] icmp_ln27_reg_1329_pp1_iter4_reg;
reg   [0:0] is_last_0_reg_250;
reg   [9:0] i_0_reg_262;
reg   [9:0] i_0_reg_262_pp0_iter1_reg;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [9:0] i_0_reg_262_pp0_iter2_reg;
reg   [9:0] i_0_reg_262_pp0_iter3_reg;
reg   [3:0] i2_0_reg_274;
reg   [0:0] icmp_ln19_reg_1185;
reg   [0:0] icmp_ln19_reg_1185_pp0_iter1_reg;
reg   [0:0] icmp_ln19_reg_1185_pp0_iter2_reg;
reg   [0:0] icmp_ln19_reg_1185_pp0_iter3_reg;
reg   [0:0] icmp_ln19_reg_1185_pp0_iter4_reg;
reg   [0:0] icmp_ln19_reg_1185_pp0_iter5_reg;
wire   [9:0] i_fu_317_p2;
reg   [9:0] i_reg_1189;
reg   [31:0] in_data_tmp_reg_1194;
reg   [31:0] in_data_tmp_reg_1194_pp0_iter1_reg;
reg   [31:0] in_data_tmp_reg_1194_pp0_iter2_reg;
wire   [0:0] is_last_fu_332_p2;
reg   [0:0] is_last_reg_1200;
wire   [62:0] trunc_ln556_fu_342_p1;
reg   [62:0] trunc_ln556_reg_1205;
reg   [0:0] p_Result_17_reg_1210;
reg   [0:0] p_Result_17_reg_1210_pp0_iter2_reg;
reg   [10:0] exp_tmp_V_reg_1215;
wire   [51:0] trunc_ln565_fu_364_p1;
reg   [51:0] trunc_ln565_reg_1220;
reg   [51:0] trunc_ln565_reg_1220_pp0_iter2_reg;
wire   [0:0] icmp_ln571_fu_371_p2;
reg   [0:0] icmp_ln571_reg_1225;
wire   [0:0] icmp_ln581_fu_382_p2;
reg   [0:0] icmp_ln581_reg_1231;
wire   [11:0] add_ln581_fu_388_p2;
reg   [11:0] add_ln581_reg_1238;
wire   [11:0] sub_ln581_fu_394_p2;
reg   [11:0] sub_ln581_reg_1243;
wire   [0:0] icmp_ln582_fu_400_p2;
reg   [0:0] icmp_ln582_reg_1248;
wire   [53:0] man_V_2_fu_423_p3;
reg   [53:0] man_V_2_reg_1254;
wire  signed [11:0] sh_amt_fu_430_p3;
reg  signed [11:0] sh_amt_reg_1259;
wire   [7:0] trunc_ln583_fu_435_p1;
reg   [7:0] trunc_ln583_reg_1265;
wire   [0:0] and_ln603_fu_534_p2;
reg   [0:0] and_ln603_reg_1270;
wire   [0:0] or_ln603_fu_540_p2;
reg   [0:0] or_ln603_reg_1275;
wire   [7:0] select_ln603_1_fu_546_p3;
reg   [7:0] select_ln603_1_reg_1280;
wire   [0:0] or_ln603_2_fu_560_p2;
reg   [0:0] or_ln603_2_reg_1285;
wire   [7:0] select_ln603_3_fu_603_p3;
reg   [7:0] select_ln603_3_reg_1290;
wire   [12:0] shl_ln_fu_610_p3;
reg   [12:0] shl_ln_reg_1295;
wire   [12:0] empty_30_fu_618_p2;
reg   [12:0] empty_30_reg_1303;
wire   [0:0] icmp_ln356_fu_624_p2;
reg   [0:0] icmp_ln356_reg_1309;
reg   [0:0] icmp_ln356_reg_1309_pp0_iter5_reg;
wire   [6271:0] shl_ln356_fu_672_p2;
reg   [6271:0] shl_ln356_reg_1317;
wire   [6271:0] and_ln356_fu_690_p2;
reg   [6271:0] and_ln356_reg_1323;
wire   [0:0] icmp_ln27_fu_741_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state11_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_state13_pp1_stage0_iter2;
wire    ap_block_state14_pp1_stage0_iter3;
wire    ap_block_state15_pp1_stage0_iter4;
reg    ap_block_state15_io;
wire    ap_block_state16_pp1_stage0_iter5;
reg    ap_block_state16_io;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln27_reg_1329_pp1_iter1_reg;
reg   [0:0] icmp_ln27_reg_1329_pp1_iter2_reg;
wire   [3:0] i_1_fu_747_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln935_fu_809_p2;
reg   [0:0] icmp_ln935_reg_1338;
reg   [0:0] icmp_ln935_reg_1338_pp1_iter1_reg;
reg   [0:0] icmp_ln935_reg_1338_pp1_iter2_reg;
reg   [0:0] icmp_ln935_reg_1338_pp1_iter3_reg;
wire   [0:0] p_Result_19_fu_815_p3;
reg   [0:0] p_Result_19_reg_1343;
reg   [0:0] p_Result_19_reg_1343_pp1_iter1_reg;
reg   [0:0] p_Result_19_reg_1343_pp1_iter2_reg;
reg   [0:0] p_Result_19_reg_1343_pp1_iter3_reg;
wire   [13:0] tmp_V_4_fu_829_p3;
reg   [13:0] tmp_V_4_reg_1348;
reg   [13:0] tmp_V_4_reg_1348_pp1_iter1_reg;
reg   [13:0] tmp_V_4_reg_1348_pp1_iter2_reg;
reg   [13:0] p_Result_s_fu_837_p4;
reg   [13:0] p_Result_s_reg_1356;
wire   [0:0] and_ln30_fu_853_p2;
reg   [0:0] and_ln30_reg_1361;
reg   [0:0] and_ln30_reg_1361_pp1_iter1_reg;
reg   [0:0] and_ln30_reg_1361_pp1_iter2_reg;
reg   [0:0] and_ln30_reg_1361_pp1_iter3_reg;
wire   [31:0] sub_ln944_fu_874_p2;
reg   [31:0] sub_ln944_reg_1366;
wire   [13:0] trunc_ln944_fu_880_p1;
reg   [13:0] trunc_ln944_reg_1373;
wire   [3:0] trunc_ln947_fu_884_p1;
reg   [3:0] trunc_ln947_reg_1378;
wire   [7:0] trunc_ln943_fu_888_p1;
reg   [7:0] trunc_ln943_reg_1383;
reg   [7:0] trunc_ln943_reg_1383_pp1_iter2_reg;
reg   [7:0] trunc_ln943_reg_1383_pp1_iter3_reg;
wire   [31:0] lsb_index_fu_892_p2;
reg   [31:0] lsb_index_reg_1388;
wire   [0:0] icmp_ln947_fu_907_p2;
reg   [0:0] icmp_ln947_reg_1393;
wire   [0:0] icmp_ln947_1_fu_933_p2;
reg   [0:0] icmp_ln947_1_reg_1398;
wire   [13:0] add_ln949_fu_939_p2;
reg   [13:0] add_ln949_reg_1403;
wire   [0:0] icmp_ln958_fu_944_p2;
reg   [0:0] icmp_ln958_reg_1408;
wire   [31:0] add_ln958_fu_950_p2;
reg   [31:0] add_ln958_reg_1413;
wire   [31:0] sub_ln958_fu_955_p2;
reg   [31:0] sub_ln958_reg_1418;
reg   [62:0] m_5_reg_1423;
reg   [0:0] tmp_2447_reg_1428;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire    ap_CS_fsm_state10;
wire    grp_myproject_fu_285_ap_ready;
wire    grp_myproject_fu_285_ap_done;
wire    ap_sync_grp_myproject_fu_285_ap_ready;
wire    ap_sync_grp_myproject_fu_285_ap_done;
reg    ap_block_state10_on_subcall_done;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
wire   [13:0] grp_myproject_fu_285_layer8_out_0_V;
wire   [13:0] grp_myproject_fu_285_layer8_out_1_V;
wire   [13:0] grp_myproject_fu_285_layer8_out_2_V;
wire   [13:0] grp_myproject_fu_285_layer8_out_3_V;
wire   [13:0] grp_myproject_fu_285_layer8_out_4_V;
wire   [13:0] grp_myproject_fu_285_layer8_out_5_V;
wire   [13:0] grp_myproject_fu_285_layer8_out_6_V;
wire   [13:0] grp_myproject_fu_285_layer8_out_7_V;
wire   [13:0] grp_myproject_fu_285_layer8_out_8_V;
wire   [13:0] grp_myproject_fu_285_layer8_out_9_V;
wire    grp_myproject_fu_285_ap_start;
wire    grp_myproject_fu_285_layer8_out_0_V_ap_vld;
wire    grp_myproject_fu_285_layer8_out_1_V_ap_vld;
wire    grp_myproject_fu_285_layer8_out_2_V_ap_vld;
wire    grp_myproject_fu_285_layer8_out_3_V_ap_vld;
wire    grp_myproject_fu_285_layer8_out_4_V_ap_vld;
wire    grp_myproject_fu_285_layer8_out_5_V_ap_vld;
wire    grp_myproject_fu_285_layer8_out_6_V_ap_vld;
wire    grp_myproject_fu_285_layer8_out_7_V_ap_vld;
wire    grp_myproject_fu_285_layer8_out_8_V_ap_vld;
wire    grp_myproject_fu_285_layer8_out_9_V_ap_vld;
wire    grp_myproject_fu_285_ap_idle;
reg    grp_myproject_fu_285_ap_continue;
reg   [0:0] ap_phi_mux_is_last_0_phi_fu_254_p4;
reg   [9:0] ap_phi_mux_i_0_phi_fu_266_p4;
reg    grp_myproject_fu_285_ap_start_reg;
wire    ap_CS_fsm_state9;
reg    ap_sync_reg_grp_myproject_fu_285_ap_ready;
reg    ap_sync_reg_grp_myproject_fu_285_ap_done;
reg   [6271:0] in_local_V_fu_188;
reg   [13:0] out_local_0_fu_192;
reg   [13:0] out_local_1_fu_196;
reg   [13:0] out_local_2_fu_200;
reg   [13:0] out_local_3_fu_204;
reg   [13:0] out_local_4_fu_208;
reg   [13:0] out_local_5_fu_212;
reg   [13:0] out_local_6_fu_216;
reg   [13:0] out_local_7_fu_220;
reg   [13:0] out_local_8_fu_224;
reg   [13:0] out_local_9_fu_228;
wire   [6271:0] in_local_V_1_fu_730_p2;
wire    ap_block_pp1_stage0_01001;
wire   [63:0] grp_fu_308_p1;
wire   [63:0] ireg_V_fu_338_p1;
wire   [11:0] zext_ln461_fu_368_p1;
wire   [11:0] F2_fu_376_p2;
wire   [52:0] tmp_s_fu_406_p3;
wire   [53:0] p_Result_18_fu_413_p1;
wire   [53:0] man_V_1_fu_417_p2;
wire   [8:0] tmp_2441_fu_445_p4;
wire   [31:0] bitcast_ln696_fu_461_p1;
wire   [0:0] tmp_2442_fu_464_p3;
wire   [0:0] xor_ln571_fu_480_p2;
wire   [0:0] or_ln582_fu_490_p2;
wire   [0:0] xor_ln582_fu_494_p2;
wire   [0:0] icmp_ln585_fu_439_p2;
wire   [0:0] and_ln581_fu_500_p2;
wire   [0:0] xor_ln585_fu_505_p2;
wire   [0:0] or_ln581_fu_523_p2;
wire   [0:0] icmp_ln603_fu_455_p2;
wire   [0:0] xor_ln581_fu_528_p2;
wire   [0:0] and_ln585_1_fu_517_p2;
wire   [0:0] and_ln585_fu_511_p2;
wire   [7:0] select_ln588_fu_472_p3;
wire   [0:0] and_ln582_fu_485_p2;
wire   [0:0] or_ln603_1_fu_554_p2;
wire  signed [31:0] sext_ln581_fu_569_p1;
wire   [53:0] zext_ln586_fu_572_p1;
wire   [53:0] ashr_ln586_fu_576_p2;
wire   [7:0] trunc_ln581_fu_566_p1;
wire   [7:0] shl_ln604_fu_585_p2;
wire   [7:0] trunc_ln586_fu_581_p1;
wire   [7:0] select_ln603_fu_590_p3;
wire   [7:0] select_ln603_2_fu_597_p3;
wire   [12:0] sub_ln356_fu_633_p2;
wire   [12:0] select_ln356_fu_638_p3;
wire   [12:0] select_ln356_2_fu_648_p3;
wire   [12:0] select_ln356_1_fu_643_p3;
wire   [12:0] sub_ln356_1_fu_654_p2;
wire   [6271:0] zext_ln356_fu_630_p1;
wire   [6271:0] zext_ln356_1_fu_660_p1;
wire   [6271:0] zext_ln356_2_fu_664_p1;
wire   [6271:0] zext_ln356_3_fu_668_p1;
wire   [6271:0] shl_ln356_1_fu_678_p2;
wire   [6271:0] lshr_ln356_fu_684_p2;
reg   [6271:0] tmp_2443_fu_699_p4;
wire   [6271:0] xor_ln356_fu_714_p2;
wire   [6271:0] select_ln356_3_fu_708_p3;
wire   [6271:0] and_ln356_1_fu_719_p2;
wire   [6271:0] and_ln356_2_fu_725_p2;
wire   [13:0] tmp_V_3_fu_783_p12;
wire   [13:0] tmp_V_fu_823_p2;
wire   [0:0] icmp_ln30_fu_847_p2;
wire   [31:0] p_Result_20_fu_859_p3;
reg   [31:0] l_fu_866_p3;
wire   [30:0] tmp_2445_fu_897_p4;
wire   [3:0] sub_ln947_fu_913_p2;
wire   [13:0] zext_ln947_fu_918_p1;
wire   [13:0] lshr_ln947_fu_922_p2;
wire   [13:0] p_Result_15_fu_928_p2;
wire   [0:0] tmp_2446_fu_964_p3;
wire   [0:0] p_Result_4_fu_977_p3;
wire   [0:0] xor_ln949_fu_971_p2;
wire   [0:0] and_ln949_fu_983_p2;
wire   [0:0] a_fu_960_p2;
wire   [0:0] or_ln949_fu_989_p2;
wire   [31:0] zext_ln957_1_fu_1006_p1;
wire   [31:0] lshr_ln958_fu_1009_p2;
wire   [63:0] m_fu_1003_p1;
wire   [63:0] zext_ln958_1_fu_1018_p1;
wire   [63:0] zext_ln958_fu_1014_p1;
wire   [63:0] shl_ln958_fu_1021_p2;
wire   [31:0] or_ln_fu_995_p3;
wire   [63:0] zext_ln961_fu_1034_p1;
wire   [63:0] m_1_fu_1027_p3;
wire   [63:0] m_2_fu_1038_p2;
wire   [7:0] sub_ln964_fu_1072_p2;
wire   [7:0] select_ln964_fu_1065_p3;
wire   [7:0] add_ln964_fu_1077_p2;
wire   [63:0] m_6_fu_1062_p1;
wire   [8:0] tmp_21_fu_1083_p3;
wire   [63:0] p_Result_21_fu_1090_p5;
wire   [31:0] trunc_ln738_fu_1102_p1;
wire   [31:0] bitcast_ln739_fu_1106_p1;
reg    grp_fu_308_ce;
reg   [5:0] ap_NS_fsm;
wire    ap_CS_fsm_state17;
wire    regslice_both_out_data_U_apdone_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_in_data_U_apdone_blk;
wire   [31:0] in_r_TDATA_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_data_U_ack_in;
wire    regslice_both_in_last_V_U_apdone_blk;
wire   [0:0] in_r_TLAST_int;
wire    regslice_both_in_last_V_U_vld_out;
wire    regslice_both_in_last_V_U_ack_in;
wire   [31:0] out_r_TDATA_int;
reg    out_r_TVALID_int;
wire    out_r_TREADY_int;
wire    regslice_both_out_data_U_vld_out;
wire    regslice_both_out_last_V_U_apdone_blk;
wire    regslice_both_out_last_V_U_ack_in_dummy;
wire    regslice_both_out_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 grp_myproject_fu_285_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_myproject_fu_285_ap_ready = 1'b0;
#0 ap_sync_reg_grp_myproject_fu_285_ap_done = 1'b0;
end

myproject grp_myproject_fu_285(
    .layer0_V(in_local_V_fu_188),
    .layer8_out_0_V(grp_myproject_fu_285_layer8_out_0_V),
    .layer8_out_1_V(grp_myproject_fu_285_layer8_out_1_V),
    .layer8_out_2_V(grp_myproject_fu_285_layer8_out_2_V),
    .layer8_out_3_V(grp_myproject_fu_285_layer8_out_3_V),
    .layer8_out_4_V(grp_myproject_fu_285_layer8_out_4_V),
    .layer8_out_5_V(grp_myproject_fu_285_layer8_out_5_V),
    .layer8_out_6_V(grp_myproject_fu_285_layer8_out_6_V),
    .layer8_out_7_V(grp_myproject_fu_285_layer8_out_7_V),
    .layer8_out_8_V(grp_myproject_fu_285_layer8_out_8_V),
    .layer8_out_9_V(grp_myproject_fu_285_layer8_out_9_V),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .layer0_V_ap_vld(1'b1),
    .ap_start(grp_myproject_fu_285_ap_start),
    .layer8_out_0_V_ap_vld(grp_myproject_fu_285_layer8_out_0_V_ap_vld),
    .layer8_out_1_V_ap_vld(grp_myproject_fu_285_layer8_out_1_V_ap_vld),
    .layer8_out_2_V_ap_vld(grp_myproject_fu_285_layer8_out_2_V_ap_vld),
    .layer8_out_3_V_ap_vld(grp_myproject_fu_285_layer8_out_3_V_ap_vld),
    .layer8_out_4_V_ap_vld(grp_myproject_fu_285_layer8_out_4_V_ap_vld),
    .layer8_out_5_V_ap_vld(grp_myproject_fu_285_layer8_out_5_V_ap_vld),
    .layer8_out_6_V_ap_vld(grp_myproject_fu_285_layer8_out_6_V_ap_vld),
    .layer8_out_7_V_ap_vld(grp_myproject_fu_285_layer8_out_7_V_ap_vld),
    .layer8_out_8_V_ap_vld(grp_myproject_fu_285_layer8_out_8_V_ap_vld),
    .layer8_out_9_V_ap_vld(grp_myproject_fu_285_layer8_out_9_V_ap_vld),
    .ap_done(grp_myproject_fu_285_ap_done),
    .ap_ready(grp_myproject_fu_285_ap_ready),
    .ap_idle(grp_myproject_fu_285_ap_idle),
    .ap_continue(grp_myproject_fu_285_ap_continue)
);

myproject_axi_fpext_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
myproject_axi_fpext_32ns_64_2_1_U2333(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(in_r_TDATA_int),
    .ce(grp_fu_308_ce),
    .dout(grp_fu_308_p1)
);

myproject_axi_mux_104_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .din3_WIDTH( 14 ),
    .din4_WIDTH( 14 ),
    .din5_WIDTH( 14 ),
    .din6_WIDTH( 14 ),
    .din7_WIDTH( 14 ),
    .din8_WIDTH( 14 ),
    .din9_WIDTH( 14 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 14 ))
myproject_axi_mux_104_14_1_1_U2334(
    .din0(out_local_0_fu_192),
    .din1(out_local_1_fu_196),
    .din2(out_local_2_fu_200),
    .din3(out_local_3_fu_204),
    .din4(out_local_4_fu_208),
    .din5(out_local_5_fu_212),
    .din6(out_local_6_fu_216),
    .din7(out_local_7_fu_220),
    .din8(out_local_8_fu_224),
    .din9(out_local_9_fu_228),
    .din10(i2_0_reg_274),
    .dout(tmp_V_3_fu_783_p12)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_data_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_data_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TLAST),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_last_V_U_ack_in),
    .data_out(in_r_TLAST_int),
    .vld_out(regslice_both_in_last_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TDATA_int),
    .vld_in(out_r_TVALID_int),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_data_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_data_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(and_ln30_reg_1361_pp1_iter3_reg),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state11)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_myproject_fu_285_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_sync_reg_grp_myproject_fu_285_ap_done <= 1'b0;
        end else if ((grp_myproject_fu_285_ap_done == 1'b1)) begin
            ap_sync_reg_grp_myproject_fu_285_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_myproject_fu_285_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_sync_reg_grp_myproject_fu_285_ap_ready <= 1'b0;
        end else if ((grp_myproject_fu_285_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_myproject_fu_285_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_myproject_fu_285_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) | ((ap_sync_grp_myproject_fu_285_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state10)))) begin
            grp_myproject_fu_285_ap_start_reg <= 1'b1;
        end else if ((grp_myproject_fu_285_ap_ready == 1'b1)) begin
            grp_myproject_fu_285_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_741_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i2_0_reg_274 <= i_1_fu_747_p2;
    end else if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        i2_0_reg_274 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        i_0_reg_262 <= 10'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_1185 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_262 <= i_reg_1189;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        is_last_0_reg_250 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_1185 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        is_last_0_reg_250 <= is_last_reg_1200;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_1185_pp0_iter1_reg == 1'd0))) begin
        add_ln581_reg_1238 <= add_ln581_fu_388_p2;
        icmp_ln571_reg_1225 <= icmp_ln571_fu_371_p2;
        icmp_ln581_reg_1231 <= icmp_ln581_fu_382_p2;
        icmp_ln582_reg_1248 <= icmp_ln582_fu_400_p2;
        sub_ln581_reg_1243 <= sub_ln581_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_1338_pp1_iter1_reg == 1'd0) & (icmp_ln27_reg_1329_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln949_reg_1403 <= add_ln949_fu_939_p2;
        add_ln958_reg_1413 <= add_ln958_fu_950_p2;
        icmp_ln947_1_reg_1398 <= icmp_ln947_1_fu_933_p2;
        icmp_ln947_reg_1393 <= icmp_ln947_fu_907_p2;
        icmp_ln958_reg_1408 <= icmp_ln958_fu_944_p2;
        lsb_index_reg_1388 <= lsb_index_fu_892_p2;
        sub_ln958_reg_1418 <= sub_ln958_fu_955_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_741_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        and_ln30_reg_1361 <= and_ln30_fu_853_p2;
        icmp_ln935_reg_1338 <= icmp_ln935_fu_809_p2;
        p_Result_19_reg_1343 <= tmp_V_3_fu_783_p12[32'd13];
        p_Result_s_reg_1356 <= p_Result_s_fu_837_p4;
        tmp_V_4_reg_1348 <= tmp_V_4_fu_829_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        and_ln30_reg_1361_pp1_iter1_reg <= and_ln30_reg_1361;
        icmp_ln27_reg_1329 <= icmp_ln27_fu_741_p2;
        icmp_ln27_reg_1329_pp1_iter1_reg <= icmp_ln27_reg_1329;
        icmp_ln935_reg_1338_pp1_iter1_reg <= icmp_ln935_reg_1338;
        p_Result_19_reg_1343_pp1_iter1_reg <= p_Result_19_reg_1343;
        tmp_V_4_reg_1348_pp1_iter1_reg <= tmp_V_4_reg_1348;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        and_ln30_reg_1361_pp1_iter2_reg <= and_ln30_reg_1361_pp1_iter1_reg;
        and_ln30_reg_1361_pp1_iter3_reg <= and_ln30_reg_1361_pp1_iter2_reg;
        icmp_ln27_reg_1329_pp1_iter2_reg <= icmp_ln27_reg_1329_pp1_iter1_reg;
        icmp_ln27_reg_1329_pp1_iter3_reg <= icmp_ln27_reg_1329_pp1_iter2_reg;
        icmp_ln27_reg_1329_pp1_iter4_reg <= icmp_ln27_reg_1329_pp1_iter3_reg;
        icmp_ln935_reg_1338_pp1_iter2_reg <= icmp_ln935_reg_1338_pp1_iter1_reg;
        icmp_ln935_reg_1338_pp1_iter3_reg <= icmp_ln935_reg_1338_pp1_iter2_reg;
        p_Result_19_reg_1343_pp1_iter2_reg <= p_Result_19_reg_1343_pp1_iter1_reg;
        p_Result_19_reg_1343_pp1_iter3_reg <= p_Result_19_reg_1343_pp1_iter2_reg;
        tmp_V_4_reg_1348_pp1_iter2_reg <= tmp_V_4_reg_1348_pp1_iter1_reg;
        trunc_ln943_reg_1383_pp1_iter2_reg <= trunc_ln943_reg_1383;
        trunc_ln943_reg_1383_pp1_iter3_reg <= trunc_ln943_reg_1383_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_1185_pp0_iter4_reg == 1'd0))) begin
        and_ln356_reg_1323 <= and_ln356_fu_690_p2;
        shl_ln356_reg_1317 <= shl_ln356_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_1185_pp0_iter2_reg == 1'd0))) begin
        and_ln603_reg_1270 <= and_ln603_fu_534_p2;
        man_V_2_reg_1254 <= man_V_2_fu_423_p3;
        or_ln603_2_reg_1285 <= or_ln603_2_fu_560_p2;
        or_ln603_reg_1275 <= or_ln603_fu_540_p2;
        select_ln603_1_reg_1280 <= select_ln603_1_fu_546_p3;
        sh_amt_reg_1259 <= sh_amt_fu_430_p3;
        trunc_ln583_reg_1265 <= trunc_ln583_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_1185_pp0_iter3_reg == 1'd0))) begin
        empty_30_reg_1303[12 : 3] <= empty_30_fu_618_p2[12 : 3];
        icmp_ln356_reg_1309 <= icmp_ln356_fu_624_p2;
        select_ln603_3_reg_1290 <= select_ln603_3_fu_603_p3;
        shl_ln_reg_1295[12 : 3] <= shl_ln_fu_610_p3[12 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_1185 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_tmp_V_reg_1215 <= {{ireg_V_fu_338_p1[62:52]}};
        p_Result_17_reg_1210 <= ireg_V_fu_338_p1[32'd63];
        trunc_ln556_reg_1205 <= trunc_ln556_fu_342_p1;
        trunc_ln565_reg_1220 <= trunc_ln565_fu_364_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_262_pp0_iter1_reg <= i_0_reg_262;
        icmp_ln19_reg_1185 <= icmp_ln19_fu_311_p2;
        icmp_ln19_reg_1185_pp0_iter1_reg <= icmp_ln19_reg_1185;
        in_data_tmp_reg_1194_pp0_iter1_reg <= in_data_tmp_reg_1194;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_0_reg_262_pp0_iter2_reg <= i_0_reg_262_pp0_iter1_reg;
        i_0_reg_262_pp0_iter3_reg <= i_0_reg_262_pp0_iter2_reg;
        icmp_ln19_reg_1185_pp0_iter2_reg <= icmp_ln19_reg_1185_pp0_iter1_reg;
        icmp_ln19_reg_1185_pp0_iter3_reg <= icmp_ln19_reg_1185_pp0_iter2_reg;
        icmp_ln19_reg_1185_pp0_iter4_reg <= icmp_ln19_reg_1185_pp0_iter3_reg;
        icmp_ln19_reg_1185_pp0_iter5_reg <= icmp_ln19_reg_1185_pp0_iter4_reg;
        icmp_ln356_reg_1309_pp0_iter5_reg <= icmp_ln356_reg_1309;
        in_data_tmp_reg_1194_pp0_iter2_reg <= in_data_tmp_reg_1194_pp0_iter1_reg;
        p_Result_17_reg_1210_pp0_iter2_reg <= p_Result_17_reg_1210;
        trunc_ln565_reg_1220_pp0_iter2_reg <= trunc_ln565_reg_1220;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_1189 <= i_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_tmp_reg_1194 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_1185_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        in_local_V_fu_188 <= in_local_V_1_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_fu_311_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        is_last_reg_1200 <= is_last_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_1338_pp1_iter2_reg == 1'd0) & (icmp_ln27_reg_1329_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        m_5_reg_1423 <= {{m_2_fu_1038_p2[63:1]}};
        tmp_2447_reg_1428 <= m_2_fu_1038_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_285_layer8_out_0_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        out_local_0_fu_192 <= grp_myproject_fu_285_layer8_out_0_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_285_layer8_out_1_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        out_local_1_fu_196 <= grp_myproject_fu_285_layer8_out_1_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_285_layer8_out_2_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        out_local_2_fu_200 <= grp_myproject_fu_285_layer8_out_2_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_285_layer8_out_3_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        out_local_3_fu_204 <= grp_myproject_fu_285_layer8_out_3_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_285_layer8_out_4_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        out_local_4_fu_208 <= grp_myproject_fu_285_layer8_out_4_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_285_layer8_out_5_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        out_local_5_fu_212 <= grp_myproject_fu_285_layer8_out_5_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_285_layer8_out_6_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        out_local_6_fu_216 <= grp_myproject_fu_285_layer8_out_6_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_285_layer8_out_7_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        out_local_7_fu_220 <= grp_myproject_fu_285_layer8_out_7_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_285_layer8_out_8_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        out_local_8_fu_224 <= grp_myproject_fu_285_layer8_out_8_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_285_layer8_out_9_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        out_local_9_fu_228 <= grp_myproject_fu_285_layer8_out_9_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_1329 == 1'd0) & (icmp_ln935_reg_1338 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sub_ln944_reg_1366 <= sub_ln944_fu_874_p2;
        trunc_ln943_reg_1383 <= trunc_ln943_fu_888_p1;
        trunc_ln944_reg_1373 <= trunc_ln944_fu_880_p1;
        trunc_ln947_reg_1378 <= trunc_ln947_fu_884_p1;
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_311_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln27_fu_741_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_1185 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_266_p4 = i_reg_1189;
    end else begin
        ap_phi_mux_i_0_phi_fu_266_p4 = i_0_reg_262;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_1185 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_is_last_0_phi_fu_254_p4 = is_last_reg_1200;
    end else begin
        ap_phi_mux_is_last_0_phi_fu_254_p4 = is_last_0_reg_250;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_308_ce = 1'b1;
    end else begin
        grp_fu_308_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        grp_myproject_fu_285_ap_continue = 1'b1;
    end else begin
        grp_myproject_fu_285_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_311_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_TDATA_blk_n = in_r_TVALID_int;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_r_TVALID == 1'b1) & (regslice_both_in_data_U_ack_in == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_fu_311_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_TREADY_int = 1'b1;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (icmp_ln27_reg_1329_pp1_iter4_reg == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln27_reg_1329_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_1329_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        out_r_TVALID_int = 1'b1;
    end else begin
        out_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln19_fu_311_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln19_fu_311_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln27_fu_741_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln27_fu_741_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (regslice_both_out_data_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_376_p2 = (12'd1075 - zext_ln461_fu_368_p1);

assign a_fu_960_p2 = (icmp_ln947_reg_1393 & icmp_ln947_1_reg_1398);

assign add_ln581_fu_388_p2 = ($signed(12'd4091) + $signed(F2_fu_376_p2));

assign add_ln949_fu_939_p2 = ($signed(14'd16360) + $signed(trunc_ln944_reg_1373));

assign add_ln958_fu_950_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_reg_1366));

assign add_ln964_fu_1077_p2 = (sub_ln964_fu_1072_p2 + select_ln964_fu_1065_p3);

assign and_ln30_fu_853_p2 = (is_last_0_reg_250 & icmp_ln30_fu_847_p2);

assign and_ln356_1_fu_719_p2 = (xor_ln356_fu_714_p2 & in_local_V_fu_188);

assign and_ln356_2_fu_725_p2 = (select_ln356_3_fu_708_p3 & and_ln356_reg_1323);

assign and_ln356_fu_690_p2 = (shl_ln356_1_fu_678_p2 & lshr_ln356_fu_684_p2);

assign and_ln581_fu_500_p2 = (xor_ln582_fu_494_p2 & icmp_ln581_reg_1231);

assign and_ln582_fu_485_p2 = (xor_ln571_fu_480_p2 & icmp_ln582_reg_1248);

assign and_ln585_1_fu_517_p2 = (icmp_ln585_fu_439_p2 & and_ln581_fu_500_p2);

assign and_ln585_fu_511_p2 = (xor_ln585_fu_505_p2 & and_ln581_fu_500_p2);

assign and_ln603_fu_534_p2 = (xor_ln581_fu_528_p2 & icmp_ln603_fu_455_p2);

assign and_ln949_fu_983_p2 = (xor_ln949_fu_971_p2 & p_Result_4_fu_977_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln19_fu_311_p2 == 1'd0) & (in_r_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln19_fu_311_p2 == 1'd0) & (in_r_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_on_subcall_done = ((ap_sync_grp_myproject_fu_285_ap_ready & ap_sync_grp_myproject_fu_285_ap_done) == 1'b0);
end

assign ap_block_state11_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((icmp_ln27_reg_1329_pp1_iter3_reg == 1'd0) & (out_r_TREADY_int == 1'b0));
end

assign ap_block_state15_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((icmp_ln27_reg_1329_pp1_iter4_reg == 1'd0) & (out_r_TREADY_int == 1'b0));
end

assign ap_block_state16_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln19_fu_311_p2 == 1'd0) & (in_r_TVALID_int == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_myproject_fu_285_ap_done = (grp_myproject_fu_285_ap_done | ap_sync_reg_grp_myproject_fu_285_ap_done);

assign ap_sync_grp_myproject_fu_285_ap_ready = (grp_myproject_fu_285_ap_ready | ap_sync_reg_grp_myproject_fu_285_ap_ready);

assign ashr_ln586_fu_576_p2 = $signed(man_V_2_reg_1254) >>> zext_ln586_fu_572_p1;

assign bitcast_ln696_fu_461_p1 = in_data_tmp_reg_1194_pp0_iter2_reg;

assign bitcast_ln739_fu_1106_p1 = trunc_ln738_fu_1102_p1;

assign empty_30_fu_618_p2 = (shl_ln_fu_610_p3 | 13'd7);

assign grp_myproject_fu_285_ap_start = grp_myproject_fu_285_ap_start_reg;

assign i_1_fu_747_p2 = (i2_0_reg_274 + 4'd1);

assign i_fu_317_p2 = (ap_phi_mux_i_0_phi_fu_266_p4 + 10'd1);

assign icmp_ln19_fu_311_p2 = ((ap_phi_mux_i_0_phi_fu_266_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_741_p2 = ((i2_0_reg_274 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_847_p2 = ((i2_0_reg_274 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln356_fu_624_p2 = ((shl_ln_fu_610_p3 > empty_30_fu_618_p2) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_371_p2 = ((trunc_ln556_reg_1205 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_382_p2 = (($signed(F2_fu_376_p2) > $signed(12'd5)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_400_p2 = ((F2_fu_376_p2 == 12'd5) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_439_p2 = ((sh_amt_fu_430_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_455_p2 = ((tmp_2441_fu_445_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_809_p2 = ((tmp_V_3_fu_783_p12 == 14'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_933_p2 = ((p_Result_15_fu_928_p2 != 14'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_907_p2 = (($signed(tmp_2445_fu_897_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_944_p2 = (($signed(lsb_index_fu_892_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign in_local_V_1_fu_730_p2 = (and_ln356_2_fu_725_p2 | and_ln356_1_fu_719_p2);

assign ireg_V_fu_338_p1 = grp_fu_308_p1;

assign is_last_fu_332_p2 = (in_r_TLAST_int | ap_phi_mux_is_last_0_phi_fu_254_p4);


always @ (p_Result_20_fu_859_p3) begin
    if (p_Result_20_fu_859_p3[0] == 1'b1) begin
        l_fu_866_p3 = 32'd0;
    end else if (p_Result_20_fu_859_p3[1] == 1'b1) begin
        l_fu_866_p3 = 32'd1;
    end else if (p_Result_20_fu_859_p3[2] == 1'b1) begin
        l_fu_866_p3 = 32'd2;
    end else if (p_Result_20_fu_859_p3[3] == 1'b1) begin
        l_fu_866_p3 = 32'd3;
    end else if (p_Result_20_fu_859_p3[4] == 1'b1) begin
        l_fu_866_p3 = 32'd4;
    end else if (p_Result_20_fu_859_p3[5] == 1'b1) begin
        l_fu_866_p3 = 32'd5;
    end else if (p_Result_20_fu_859_p3[6] == 1'b1) begin
        l_fu_866_p3 = 32'd6;
    end else if (p_Result_20_fu_859_p3[7] == 1'b1) begin
        l_fu_866_p3 = 32'd7;
    end else if (p_Result_20_fu_859_p3[8] == 1'b1) begin
        l_fu_866_p3 = 32'd8;
    end else if (p_Result_20_fu_859_p3[9] == 1'b1) begin
        l_fu_866_p3 = 32'd9;
    end else if (p_Result_20_fu_859_p3[10] == 1'b1) begin
        l_fu_866_p3 = 32'd10;
    end else if (p_Result_20_fu_859_p3[11] == 1'b1) begin
        l_fu_866_p3 = 32'd11;
    end else if (p_Result_20_fu_859_p3[12] == 1'b1) begin
        l_fu_866_p3 = 32'd12;
    end else if (p_Result_20_fu_859_p3[13] == 1'b1) begin
        l_fu_866_p3 = 32'd13;
    end else if (p_Result_20_fu_859_p3[14] == 1'b1) begin
        l_fu_866_p3 = 32'd14;
    end else if (p_Result_20_fu_859_p3[15] == 1'b1) begin
        l_fu_866_p3 = 32'd15;
    end else if (p_Result_20_fu_859_p3[16] == 1'b1) begin
        l_fu_866_p3 = 32'd16;
    end else if (p_Result_20_fu_859_p3[17] == 1'b1) begin
        l_fu_866_p3 = 32'd17;
    end else if (p_Result_20_fu_859_p3[18] == 1'b1) begin
        l_fu_866_p3 = 32'd18;
    end else if (p_Result_20_fu_859_p3[19] == 1'b1) begin
        l_fu_866_p3 = 32'd19;
    end else if (p_Result_20_fu_859_p3[20] == 1'b1) begin
        l_fu_866_p3 = 32'd20;
    end else if (p_Result_20_fu_859_p3[21] == 1'b1) begin
        l_fu_866_p3 = 32'd21;
    end else if (p_Result_20_fu_859_p3[22] == 1'b1) begin
        l_fu_866_p3 = 32'd22;
    end else if (p_Result_20_fu_859_p3[23] == 1'b1) begin
        l_fu_866_p3 = 32'd23;
    end else if (p_Result_20_fu_859_p3[24] == 1'b1) begin
        l_fu_866_p3 = 32'd24;
    end else if (p_Result_20_fu_859_p3[25] == 1'b1) begin
        l_fu_866_p3 = 32'd25;
    end else if (p_Result_20_fu_859_p3[26] == 1'b1) begin
        l_fu_866_p3 = 32'd26;
    end else if (p_Result_20_fu_859_p3[27] == 1'b1) begin
        l_fu_866_p3 = 32'd27;
    end else if (p_Result_20_fu_859_p3[28] == 1'b1) begin
        l_fu_866_p3 = 32'd28;
    end else if (p_Result_20_fu_859_p3[29] == 1'b1) begin
        l_fu_866_p3 = 32'd29;
    end else if (p_Result_20_fu_859_p3[30] == 1'b1) begin
        l_fu_866_p3 = 32'd30;
    end else if (p_Result_20_fu_859_p3[31] == 1'b1) begin
        l_fu_866_p3 = 32'd31;
    end else begin
        l_fu_866_p3 = 32'd32;
    end
end

assign lsb_index_fu_892_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_reg_1366));

assign lshr_ln356_fu_684_p2 = 6272'dzext_ln356_3_fu_668_p1;

assign lshr_ln947_fu_922_p2 = 14'd16383 >> zext_ln947_fu_918_p1;

assign lshr_ln958_fu_1009_p2 = zext_ln957_1_fu_1006_p1 >> add_ln958_reg_1413;

assign m_1_fu_1027_p3 = ((icmp_ln958_reg_1408[0:0] === 1'b1) ? zext_ln958_fu_1014_p1 : shl_ln958_fu_1021_p2);

assign m_2_fu_1038_p2 = (zext_ln961_fu_1034_p1 + m_1_fu_1027_p3);

assign m_6_fu_1062_p1 = m_5_reg_1423;

assign m_fu_1003_p1 = tmp_V_4_reg_1348_pp1_iter2_reg;

assign man_V_1_fu_417_p2 = (54'd0 - p_Result_18_fu_413_p1);

assign man_V_2_fu_423_p3 = ((p_Result_17_reg_1210_pp0_iter2_reg[0:0] === 1'b1) ? man_V_1_fu_417_p2 : p_Result_18_fu_413_p1);

assign or_ln581_fu_523_p2 = (or_ln582_fu_490_p2 | icmp_ln581_reg_1231);

assign or_ln582_fu_490_p2 = (icmp_ln582_reg_1248 | icmp_ln571_reg_1225);

assign or_ln603_1_fu_554_p2 = (and_ln585_fu_511_p2 | and_ln582_fu_485_p2);

assign or_ln603_2_fu_560_p2 = (or_ln603_fu_540_p2 | or_ln603_1_fu_554_p2);

assign or_ln603_fu_540_p2 = (and_ln603_fu_534_p2 | and_ln585_1_fu_517_p2);

assign or_ln949_fu_989_p2 = (and_ln949_fu_983_p2 | a_fu_960_p2);

assign or_ln_fu_995_p3 = {{31'd0}, {or_ln949_fu_989_p2}};

assign out_r_TDATA_int = ((icmp_ln935_reg_1338_pp1_iter3_reg[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_1106_p1);

assign out_r_TVALID = regslice_both_out_data_U_vld_out;

assign p_Result_15_fu_928_p2 = (tmp_V_4_reg_1348_pp1_iter1_reg & lshr_ln947_fu_922_p2);

assign p_Result_18_fu_413_p1 = tmp_s_fu_406_p3;

assign p_Result_19_fu_815_p3 = tmp_V_3_fu_783_p12[32'd13];

assign p_Result_20_fu_859_p3 = {{18'd262143}, {p_Result_s_reg_1356}};

assign p_Result_21_fu_1090_p5 = {{m_6_fu_1062_p1[63:32]}, {tmp_21_fu_1083_p3}, {m_6_fu_1062_p1[22:0]}};

assign p_Result_4_fu_977_p3 = tmp_V_4_reg_1348_pp1_iter2_reg[add_ln949_reg_1403];

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_829_p3) begin
    for (ap_tvar_int_0 = 14 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 13 - 0) begin
            p_Result_s_fu_837_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_837_p4[ap_tvar_int_0] = tmp_V_4_fu_829_p3[13 - ap_tvar_int_0];
        end
    end
end

assign select_ln356_1_fu_643_p3 = ((icmp_ln356_reg_1309[0:0] === 1'b1) ? empty_30_reg_1303 : shl_ln_reg_1295);

assign select_ln356_2_fu_648_p3 = ((icmp_ln356_reg_1309[0:0] === 1'b1) ? sub_ln356_fu_633_p2 : shl_ln_reg_1295);

assign select_ln356_3_fu_708_p3 = ((icmp_ln356_reg_1309_pp0_iter5_reg[0:0] === 1'b1) ? tmp_2443_fu_699_p4 : shl_ln356_reg_1317);

assign select_ln356_fu_638_p3 = ((icmp_ln356_reg_1309[0:0] === 1'b1) ? shl_ln_reg_1295 : empty_30_reg_1303);

assign select_ln588_fu_472_p3 = ((tmp_2442_fu_464_p3[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln603_1_fu_546_p3 = ((and_ln585_fu_511_p2[0:0] === 1'b1) ? select_ln588_fu_472_p3 : trunc_ln583_fu_435_p1);

assign select_ln603_2_fu_597_p3 = ((or_ln603_reg_1275[0:0] === 1'b1) ? select_ln603_fu_590_p3 : select_ln603_1_reg_1280);

assign select_ln603_3_fu_603_p3 = ((or_ln603_2_reg_1285[0:0] === 1'b1) ? select_ln603_2_fu_597_p3 : 8'd0);

assign select_ln603_fu_590_p3 = ((and_ln603_reg_1270[0:0] === 1'b1) ? shl_ln604_fu_585_p2 : trunc_ln586_fu_581_p1);

assign select_ln964_fu_1065_p3 = ((tmp_2447_reg_1428[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign sext_ln581_fu_569_p1 = sh_amt_reg_1259;

assign sh_amt_fu_430_p3 = ((icmp_ln581_reg_1231[0:0] === 1'b1) ? add_ln581_reg_1238 : sub_ln581_reg_1243);

assign shl_ln356_1_fu_678_p2 = 6272'dzext_ln356_2_fu_664_p1;

assign shl_ln356_fu_672_p2 = zext_ln356_fu_630_p1 << zext_ln356_1_fu_660_p1;

assign shl_ln604_fu_585_p2 = trunc_ln583_reg_1265 << trunc_ln581_fu_566_p1;

assign shl_ln958_fu_1021_p2 = m_fu_1003_p1 << zext_ln958_1_fu_1018_p1;

assign shl_ln_fu_610_p3 = {{i_0_reg_262_pp0_iter3_reg}, {3'd0}};

assign sub_ln356_1_fu_654_p2 = ($signed(13'd6271) - $signed(select_ln356_fu_638_p3));

assign sub_ln356_fu_633_p2 = ($signed(13'd6271) - $signed(shl_ln_reg_1295));

assign sub_ln581_fu_394_p2 = (12'd5 - F2_fu_376_p2);

assign sub_ln944_fu_874_p2 = (32'd14 - l_fu_866_p3);

assign sub_ln947_fu_913_p2 = (4'd7 - trunc_ln947_reg_1378);

assign sub_ln958_fu_955_p2 = (32'd25 - sub_ln944_reg_1366);

assign sub_ln964_fu_1072_p2 = (8'd2 - trunc_ln943_reg_1383_pp1_iter3_reg);

assign tmp_21_fu_1083_p3 = {{p_Result_19_reg_1343_pp1_iter3_reg}, {add_ln964_fu_1077_p2}};

assign tmp_2441_fu_445_p4 = {{sh_amt_fu_430_p3[11:3]}};

assign tmp_2442_fu_464_p3 = bitcast_ln696_fu_461_p1[32'd31];

integer ap_tvar_int_1;

always @ (shl_ln356_reg_1317) begin
    for (ap_tvar_int_1 = 6272 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 6271 - 0) begin
            tmp_2443_fu_699_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_2443_fu_699_p4[ap_tvar_int_1] = shl_ln356_reg_1317[6271 - ap_tvar_int_1];
        end
    end
end

assign tmp_2445_fu_897_p4 = {{lsb_index_fu_892_p2[31:1]}};

assign tmp_2446_fu_964_p3 = lsb_index_reg_1388[32'd31];

assign tmp_V_4_fu_829_p3 = ((p_Result_19_fu_815_p3[0:0] === 1'b1) ? tmp_V_fu_823_p2 : tmp_V_3_fu_783_p12);

assign tmp_V_fu_823_p2 = (14'd0 - tmp_V_3_fu_783_p12);

assign tmp_s_fu_406_p3 = {{1'd1}, {trunc_ln565_reg_1220_pp0_iter2_reg}};

assign trunc_ln556_fu_342_p1 = ireg_V_fu_338_p1[62:0];

assign trunc_ln565_fu_364_p1 = ireg_V_fu_338_p1[51:0];

assign trunc_ln581_fu_566_p1 = sh_amt_reg_1259[7:0];

assign trunc_ln583_fu_435_p1 = man_V_2_fu_423_p3[7:0];

assign trunc_ln586_fu_581_p1 = ashr_ln586_fu_576_p2[7:0];

assign trunc_ln738_fu_1102_p1 = p_Result_21_fu_1090_p5[31:0];

assign trunc_ln943_fu_888_p1 = l_fu_866_p3[7:0];

assign trunc_ln944_fu_880_p1 = sub_ln944_fu_874_p2[13:0];

assign trunc_ln947_fu_884_p1 = sub_ln944_fu_874_p2[3:0];

assign xor_ln356_fu_714_p2 = (6272'dand_ln356_reg_1323);

assign xor_ln571_fu_480_p2 = (icmp_ln571_reg_1225 ^ 1'd1);

assign xor_ln581_fu_528_p2 = (or_ln581_fu_523_p2 ^ 1'd1);

assign xor_ln582_fu_494_p2 = (or_ln582_fu_490_p2 ^ 1'd1);

assign xor_ln585_fu_505_p2 = (icmp_ln585_fu_439_p2 ^ 1'd1);

assign xor_ln949_fu_971_p2 = (tmp_2446_fu_964_p3 ^ 1'd1);

assign zext_ln356_1_fu_660_p1 = select_ln356_2_fu_648_p3;

assign zext_ln356_2_fu_664_p1 = select_ln356_1_fu_643_p3;

assign zext_ln356_3_fu_668_p1 = sub_ln356_1_fu_654_p2;

assign zext_ln356_fu_630_p1 = select_ln603_3_reg_1290;

assign zext_ln461_fu_368_p1 = exp_tmp_V_reg_1215;

assign zext_ln586_fu_572_p1 = $unsigned(sext_ln581_fu_569_p1);

assign zext_ln947_fu_918_p1 = sub_ln947_fu_913_p2;

assign zext_ln957_1_fu_1006_p1 = tmp_V_4_reg_1348_pp1_iter2_reg;

assign zext_ln958_1_fu_1018_p1 = sub_ln958_reg_1418;

assign zext_ln958_fu_1014_p1 = lshr_ln958_fu_1009_p2;

assign zext_ln961_fu_1034_p1 = or_ln_fu_995_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_1295[2:0] <= 3'b000;
    empty_30_reg_1303[2:0] <= 3'b111;
end

endmodule //myproject_axi
