-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_ap_fixed_ap_fixed_softmax_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    res_1_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_1_V_ap_vld : OUT STD_LOGIC;
    res_2_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_2_V_ap_vld : OUT STD_LOGIC;
    res_3_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_3_V_ap_vld : OUT STD_LOGIC;
    res_4_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_4_V_ap_vld : OUT STD_LOGIC;
    res_5_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_5_V_ap_vld : OUT STD_LOGIC;
    res_6_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_6_V_ap_vld : OUT STD_LOGIC;
    res_7_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_7_V_ap_vld : OUT STD_LOGIC;
    res_8_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_8_V_ap_vld : OUT STD_LOGIC;
    res_9_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_9_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of softmax_stable_ap_fixed_ap_fixed_softmax_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce5 : STD_LOGIC;
    signal exp_table1_q5 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce6 : STD_LOGIC;
    signal exp_table1_q6 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce7 : STD_LOGIC;
    signal exp_table1_q7 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address8 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce8 : STD_LOGIC;
    signal exp_table1_q8 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address9 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce9 : STD_LOGIC;
    signal exp_table1_q9 : STD_LOGIC_VECTOR (11 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_9_V_read_1_reg_1576 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_9_V_read_1_reg_1576_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_8_V_read_1_reg_1583 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_8_V_read_1_reg_1583_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_7_V_read_1_reg_1590 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_7_V_read_1_reg_1590_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_V_read_1_reg_1595 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_V_read_1_reg_1595_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_5_V_read_1_reg_1600 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_5_V_read_1_reg_1600_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_V_read_1_reg_1605 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_V_read_1_reg_1605_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_read_1_reg_1610 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_read_1_reg_1610_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_read_1_reg_1615 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_read_1_reg_1615_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_read_1_reg_1620 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_read_1_reg_1620_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_read_1_reg_1625 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_read_1_reg_1625_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_fu_356_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_reg_1630 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_1_fu_370_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_1_reg_1635 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_2_reg_1640 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_3_fu_390_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_3_reg_1645 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_4_fu_404_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_4_reg_1650 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_5_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_5_reg_1655 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_6_fu_434_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_6_reg_1660 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_7_fu_446_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_7_reg_1666 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_1672 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1679 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1686 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1693 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1700 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1707 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_1714 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1721 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_1728 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1735 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_1742 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_1749 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1756 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_1763 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_1770 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_1777 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_1784 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1791 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_1798 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1805 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1812 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_reg_1818 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_1824 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_reg_1830 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_reg_1836 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_reg_1842 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_1848 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_reg_1854 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_reg_1860 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_reg_1866 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_fu_1070_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_reg_1872 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_1092_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_reg_1877 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_1114_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_reg_1882 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_1136_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_reg_1887 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_1158_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1892 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1892_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_fu_1180_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_reg_1897 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_reg_1897_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_6_fu_1202_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_6_reg_1902 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_6_reg_1902_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_7_fu_1224_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_7_reg_1907 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_8_fu_1246_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_8_reg_1912 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_8_reg_1912_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_9_fu_1268_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_9_reg_1917 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_9_reg_1917_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_1947 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_0_V_reg_1947_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_0_V_reg_1947_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_0_V_reg_1947_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_0_V_reg_1947_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_1_V_reg_1953 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_1_V_reg_1953_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_1_V_reg_1953_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_1_V_reg_1953_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_1_V_reg_1953_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_2_V_reg_1959 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_2_V_reg_1959_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_2_V_reg_1959_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_2_V_reg_1959_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_2_V_reg_1959_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_3_V_reg_1965 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_3_V_reg_1965_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_3_V_reg_1965_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_3_V_reg_1965_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_3_V_reg_1965_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_7_V_reg_1986 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_7_V_reg_1986_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_7_V_reg_1986_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_7_V_reg_1986_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_7_V_reg_1986_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_4_V_reg_2002 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_4_V_reg_2002_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_4_V_reg_2002_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_4_V_reg_2002_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_5_V_reg_2008 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_5_V_reg_2008_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_5_V_reg_2008_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_5_V_reg_2008_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_6_V_reg_2014 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_6_V_reg_2014_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_6_V_reg_2014_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_6_V_reg_2014_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_8_V_reg_2020 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_8_V_reg_2020_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_8_V_reg_2020_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_8_V_reg_2020_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_9_V_reg_2026 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_9_V_reg_2026_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_9_V_reg_2026_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_9_V_reg_2026_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_3_fu_1329_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_3_reg_2032 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_V_10_reg_2037 : STD_LOGIC_VECTOR (9 downto 0);
    signal inv_exp_sum_V_reg_2047 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1116_fu_1373_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln306_fu_1276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln306_1_fu_1280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_2_fu_1284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_3_fu_1288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_7_fu_1292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_4_fu_1296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_5_fu_1300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_6_fu_1304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_8_fu_1308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_9_fu_1312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln314_fu_1369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_0_V_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal res_1_V_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal res_2_V_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal res_3_V_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal res_4_V_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal res_5_V_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal res_6_V_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal res_7_V_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal res_8_V_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal res_9_V_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal icmp_ln1496_fu_350_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_fu_356_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_fu_356_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_364_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_1_fu_370_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_1_fu_370_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_3_fu_384_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_3_fu_384_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_3_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_3_fu_390_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_3_fu_390_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_4_fu_398_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_4_fu_398_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_4_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_4_fu_404_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_4_fu_404_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_2_fu_418_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln86_5_fu_423_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_6_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_7_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_8_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_456_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_462_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_1_fu_465_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_469_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_2_fu_491_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_1_fu_494_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_3_fu_516_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_2_fu_519_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_4_fu_541_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_3_fu_544_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_5_fu_566_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_4_fu_569_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_6_fu_591_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_5_fu_594_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_7_fu_616_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_6_fu_619_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_8_fu_641_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_7_fu_644_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_9_fu_666_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_8_fu_669_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_10_fu_691_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_9_fu_694_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal xor_ln786_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_5_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_6_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_6_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_7_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_7_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_8_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_8_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_9_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_9_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_10_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_1056_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_1063_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_11_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_1078_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_1085_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_12_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_2_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_1100_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_1107_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_13_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_3_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_1122_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_1129_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_14_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_4_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_1144_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_4_fu_1151_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_15_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_5_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_10_fu_1166_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_5_fu_1173_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_16_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_6_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_1188_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_6_fu_1195_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_17_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_7_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_7_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_14_fu_1210_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_7_fu_1217_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_18_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_8_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_8_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_16_fu_1232_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_8_fu_1239_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_19_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_9_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_9_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_18_fu_1254_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_9_fu_1261_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln703_1_fu_1320_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_fu_1316_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_2_fu_1324_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_5_fu_1339_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_4_fu_1335_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_6_fu_1343_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_7_fu_1348_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_sum_V_fu_1354_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1506_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1513_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1520_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1527_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1534_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1541_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1548_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1555_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1562_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1569_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1506_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1513_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1520_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1527_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1534_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1541_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1548_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1555_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1562_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1569_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1506_ce : STD_LOGIC;
    signal grp_fu_1513_ce : STD_LOGIC;
    signal grp_fu_1520_ce : STD_LOGIC;
    signal grp_fu_1527_ce : STD_LOGIC;
    signal grp_fu_1534_ce : STD_LOGIC;
    signal grp_fu_1541_ce : STD_LOGIC;
    signal grp_fu_1548_ce : STD_LOGIC;
    signal grp_fu_1555_ce : STD_LOGIC;
    signal grp_fu_1562_ce : STD_LOGIC;
    signal grp_fu_1569_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to11 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_axi_mul_mul_12s_12s_20_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_exp_tabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address8 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address9 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_invertcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_exp_tabkb
    generic map (
        DataWidth => 12,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4,
        address5 => exp_table1_address5,
        ce5 => exp_table1_ce5,
        q5 => exp_table1_q5,
        address6 => exp_table1_address6,
        ce6 => exp_table1_ce6,
        q6 => exp_table1_q6,
        address7 => exp_table1_address7,
        ce7 => exp_table1_ce7,
        q7 => exp_table1_q7,
        address8 => exp_table1_address8,
        ce8 => exp_table1_ce8,
        q8 => exp_table1_q8,
        address9 => exp_table1_address9,
        ce9 => exp_table1_ce9,
        q9 => exp_table1_q9);

    invert_table2_U : component softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_invertcud
    generic map (
        DataWidth => 12,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    myproject_axi_mul_mul_12s_12s_20_3_1_U1423 : component myproject_axi_mul_mul_12s_12s_20_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_0_V_reg_1947_pp0_iter9_reg,
        din1 => grp_fu_1506_p1,
        ce => grp_fu_1506_ce,
        dout => grp_fu_1506_p2);

    myproject_axi_mul_mul_12s_12s_20_3_1_U1424 : component myproject_axi_mul_mul_12s_12s_20_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_1_V_reg_1953_pp0_iter9_reg,
        din1 => grp_fu_1513_p1,
        ce => grp_fu_1513_ce,
        dout => grp_fu_1513_p2);

    myproject_axi_mul_mul_12s_12s_20_3_1_U1425 : component myproject_axi_mul_mul_12s_12s_20_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_2_V_reg_1959_pp0_iter9_reg,
        din1 => grp_fu_1520_p1,
        ce => grp_fu_1520_ce,
        dout => grp_fu_1520_p2);

    myproject_axi_mul_mul_12s_12s_20_3_1_U1426 : component myproject_axi_mul_mul_12s_12s_20_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_3_V_reg_1965_pp0_iter9_reg,
        din1 => grp_fu_1527_p1,
        ce => grp_fu_1527_ce,
        dout => grp_fu_1527_p2);

    myproject_axi_mul_mul_12s_12s_20_3_1_U1427 : component myproject_axi_mul_mul_12s_12s_20_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_4_V_reg_2002_pp0_iter9_reg,
        din1 => grp_fu_1534_p1,
        ce => grp_fu_1534_ce,
        dout => grp_fu_1534_p2);

    myproject_axi_mul_mul_12s_12s_20_3_1_U1428 : component myproject_axi_mul_mul_12s_12s_20_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_5_V_reg_2008_pp0_iter9_reg,
        din1 => grp_fu_1541_p1,
        ce => grp_fu_1541_ce,
        dout => grp_fu_1541_p2);

    myproject_axi_mul_mul_12s_12s_20_3_1_U1429 : component myproject_axi_mul_mul_12s_12s_20_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_6_V_reg_2014_pp0_iter9_reg,
        din1 => grp_fu_1548_p1,
        ce => grp_fu_1548_ce,
        dout => grp_fu_1548_p2);

    myproject_axi_mul_mul_12s_12s_20_3_1_U1430 : component myproject_axi_mul_mul_12s_12s_20_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_7_V_reg_1986_pp0_iter9_reg,
        din1 => grp_fu_1555_p1,
        ce => grp_fu_1555_ce,
        dout => grp_fu_1555_p2);

    myproject_axi_mul_mul_12s_12s_20_3_1_U1431 : component myproject_axi_mul_mul_12s_12s_20_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_8_V_reg_2020_pp0_iter9_reg,
        din1 => grp_fu_1562_p1,
        ce => grp_fu_1562_ce,
        dout => grp_fu_1562_p2);

    myproject_axi_mul_mul_12s_12s_20_3_1_U1432 : component myproject_axi_mul_mul_12s_12s_20_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_9_V_reg_2026_pp0_iter9_reg,
        din1 => grp_fu_1569_p1,
        ce => grp_fu_1569_ce,
        dout => grp_fu_1569_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    res_0_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                res_0_V_preg <= ap_const_lv14_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
                    res_0_V_preg <= grp_fu_1506_p2(19 downto 6);
                end if; 
            end if;
        end if;
    end process;


    res_1_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                res_1_V_preg <= ap_const_lv14_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
                    res_1_V_preg <= grp_fu_1513_p2(19 downto 6);
                end if; 
            end if;
        end if;
    end process;


    res_2_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                res_2_V_preg <= ap_const_lv14_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
                    res_2_V_preg <= grp_fu_1520_p2(19 downto 6);
                end if; 
            end if;
        end if;
    end process;


    res_3_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                res_3_V_preg <= ap_const_lv14_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
                    res_3_V_preg <= grp_fu_1527_p2(19 downto 6);
                end if; 
            end if;
        end if;
    end process;


    res_4_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                res_4_V_preg <= ap_const_lv14_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
                    res_4_V_preg <= grp_fu_1534_p2(19 downto 6);
                end if; 
            end if;
        end if;
    end process;


    res_5_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                res_5_V_preg <= ap_const_lv14_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
                    res_5_V_preg <= grp_fu_1541_p2(19 downto 6);
                end if; 
            end if;
        end if;
    end process;


    res_6_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                res_6_V_preg <= ap_const_lv14_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
                    res_6_V_preg <= grp_fu_1548_p2(19 downto 6);
                end if; 
            end if;
        end if;
    end process;


    res_7_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                res_7_V_preg <= ap_const_lv14_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
                    res_7_V_preg <= grp_fu_1555_p2(19 downto 6);
                end if; 
            end if;
        end if;
    end process;


    res_8_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                res_8_V_preg <= ap_const_lv14_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
                    res_8_V_preg <= grp_fu_1562_p2(19 downto 6);
                end if; 
            end if;
        end if;
    end process;


    res_9_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                res_9_V_preg <= ap_const_lv14_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
                    res_9_V_preg <= grp_fu_1569_p2(19 downto 6);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln703_3_reg_2032 <= add_ln703_3_fu_1329_p2;
                exp_res_0_V_reg_1947_pp0_iter6_reg <= exp_res_0_V_reg_1947;
                exp_res_0_V_reg_1947_pp0_iter7_reg <= exp_res_0_V_reg_1947_pp0_iter6_reg;
                exp_res_0_V_reg_1947_pp0_iter8_reg <= exp_res_0_V_reg_1947_pp0_iter7_reg;
                exp_res_0_V_reg_1947_pp0_iter9_reg <= exp_res_0_V_reg_1947_pp0_iter8_reg;
                exp_res_1_V_reg_1953_pp0_iter6_reg <= exp_res_1_V_reg_1953;
                exp_res_1_V_reg_1953_pp0_iter7_reg <= exp_res_1_V_reg_1953_pp0_iter6_reg;
                exp_res_1_V_reg_1953_pp0_iter8_reg <= exp_res_1_V_reg_1953_pp0_iter7_reg;
                exp_res_1_V_reg_1953_pp0_iter9_reg <= exp_res_1_V_reg_1953_pp0_iter8_reg;
                exp_res_2_V_reg_1959_pp0_iter6_reg <= exp_res_2_V_reg_1959;
                exp_res_2_V_reg_1959_pp0_iter7_reg <= exp_res_2_V_reg_1959_pp0_iter6_reg;
                exp_res_2_V_reg_1959_pp0_iter8_reg <= exp_res_2_V_reg_1959_pp0_iter7_reg;
                exp_res_2_V_reg_1959_pp0_iter9_reg <= exp_res_2_V_reg_1959_pp0_iter8_reg;
                exp_res_3_V_reg_1965_pp0_iter6_reg <= exp_res_3_V_reg_1965;
                exp_res_3_V_reg_1965_pp0_iter7_reg <= exp_res_3_V_reg_1965_pp0_iter6_reg;
                exp_res_3_V_reg_1965_pp0_iter8_reg <= exp_res_3_V_reg_1965_pp0_iter7_reg;
                exp_res_3_V_reg_1965_pp0_iter9_reg <= exp_res_3_V_reg_1965_pp0_iter8_reg;
                exp_res_4_V_reg_2002_pp0_iter7_reg <= exp_res_4_V_reg_2002;
                exp_res_4_V_reg_2002_pp0_iter8_reg <= exp_res_4_V_reg_2002_pp0_iter7_reg;
                exp_res_4_V_reg_2002_pp0_iter9_reg <= exp_res_4_V_reg_2002_pp0_iter8_reg;
                exp_res_5_V_reg_2008_pp0_iter7_reg <= exp_res_5_V_reg_2008;
                exp_res_5_V_reg_2008_pp0_iter8_reg <= exp_res_5_V_reg_2008_pp0_iter7_reg;
                exp_res_5_V_reg_2008_pp0_iter9_reg <= exp_res_5_V_reg_2008_pp0_iter8_reg;
                exp_res_6_V_reg_2014_pp0_iter7_reg <= exp_res_6_V_reg_2014;
                exp_res_6_V_reg_2014_pp0_iter8_reg <= exp_res_6_V_reg_2014_pp0_iter7_reg;
                exp_res_6_V_reg_2014_pp0_iter9_reg <= exp_res_6_V_reg_2014_pp0_iter8_reg;
                exp_res_7_V_reg_1986_pp0_iter6_reg <= exp_res_7_V_reg_1986;
                exp_res_7_V_reg_1986_pp0_iter7_reg <= exp_res_7_V_reg_1986_pp0_iter6_reg;
                exp_res_7_V_reg_1986_pp0_iter8_reg <= exp_res_7_V_reg_1986_pp0_iter7_reg;
                exp_res_7_V_reg_1986_pp0_iter9_reg <= exp_res_7_V_reg_1986_pp0_iter8_reg;
                exp_res_8_V_reg_2020_pp0_iter7_reg <= exp_res_8_V_reg_2020;
                exp_res_8_V_reg_2020_pp0_iter8_reg <= exp_res_8_V_reg_2020_pp0_iter7_reg;
                exp_res_8_V_reg_2020_pp0_iter9_reg <= exp_res_8_V_reg_2020_pp0_iter8_reg;
                exp_res_9_V_reg_2026_pp0_iter7_reg <= exp_res_9_V_reg_2026;
                exp_res_9_V_reg_2026_pp0_iter8_reg <= exp_res_9_V_reg_2026_pp0_iter7_reg;
                exp_res_9_V_reg_2026_pp0_iter9_reg <= exp_res_9_V_reg_2026_pp0_iter8_reg;
                inv_exp_sum_V_reg_2047 <= invert_table2_q0;
                tmp_10_reg_1679 <= sub_ln1193_fu_469_p2(15 downto 15);
                tmp_11_reg_1686 <= sub_ln1193_1_fu_494_p2(16 downto 16);
                tmp_12_reg_1693 <= sub_ln1193_1_fu_494_p2(15 downto 15);
                tmp_13_reg_1700 <= sub_ln1193_2_fu_519_p2(16 downto 16);
                tmp_14_reg_1707 <= sub_ln1193_2_fu_519_p2(15 downto 15);
                tmp_15_reg_1714 <= sub_ln1193_3_fu_544_p2(16 downto 16);
                tmp_16_reg_1721 <= sub_ln1193_3_fu_544_p2(15 downto 15);
                tmp_17_reg_1728 <= sub_ln1193_4_fu_569_p2(16 downto 16);
                tmp_18_reg_1735 <= sub_ln1193_4_fu_569_p2(15 downto 15);
                tmp_19_reg_1742 <= sub_ln1193_5_fu_594_p2(16 downto 16);
                tmp_1_reg_1812 <= sub_ln1193_fu_469_p2(15 downto 6);
                tmp_20_reg_1749 <= sub_ln1193_5_fu_594_p2(15 downto 15);
                tmp_21_reg_1756 <= sub_ln1193_6_fu_619_p2(16 downto 16);
                tmp_22_reg_1763 <= sub_ln1193_6_fu_619_p2(15 downto 15);
                tmp_23_reg_1770 <= sub_ln1193_7_fu_644_p2(16 downto 16);
                tmp_24_reg_1777 <= sub_ln1193_7_fu_644_p2(15 downto 15);
                tmp_25_reg_1784 <= sub_ln1193_8_fu_669_p2(16 downto 16);
                tmp_26_reg_1791 <= sub_ln1193_8_fu_669_p2(15 downto 15);
                tmp_27_reg_1798 <= sub_ln1193_9_fu_694_p2(16 downto 16);
                tmp_28_reg_1805 <= sub_ln1193_9_fu_694_p2(15 downto 15);
                tmp_2_reg_1848 <= sub_ln1193_6_fu_619_p2(15 downto 6);
                tmp_3_reg_1818 <= sub_ln1193_1_fu_494_p2(15 downto 6);
                tmp_4_reg_1854 <= sub_ln1193_7_fu_644_p2(15 downto 6);
                tmp_5_reg_1824 <= sub_ln1193_2_fu_519_p2(15 downto 6);
                tmp_6_reg_1860 <= sub_ln1193_8_fu_669_p2(15 downto 6);
                tmp_7_reg_1830 <= sub_ln1193_3_fu_544_p2(15 downto 6);
                tmp_8_reg_1866 <= sub_ln1193_9_fu_694_p2(15 downto 6);
                tmp_9_reg_1836 <= sub_ln1193_4_fu_569_p2(15 downto 6);
                tmp_reg_1672 <= sub_ln1193_fu_469_p2(16 downto 16);
                tmp_s_reg_1842 <= sub_ln1193_5_fu_594_p2(15 downto 6);
                y_V_10_reg_2037 <= exp_sum_V_fu_1354_p2(11 downto 2);
                y_V_1_reg_1877 <= y_V_1_fu_1092_p3;
                y_V_2_reg_1882 <= y_V_2_fu_1114_p3;
                y_V_3_reg_1887 <= y_V_3_fu_1136_p3;
                y_V_4_reg_1892 <= y_V_4_fu_1158_p3;
                y_V_4_reg_1892_pp0_iter4_reg <= y_V_4_reg_1892;
                y_V_5_reg_1897 <= y_V_5_fu_1180_p3;
                y_V_5_reg_1897_pp0_iter4_reg <= y_V_5_reg_1897;
                y_V_6_reg_1902 <= y_V_6_fu_1202_p3;
                y_V_6_reg_1902_pp0_iter4_reg <= y_V_6_reg_1902;
                y_V_7_reg_1907 <= y_V_7_fu_1224_p3;
                y_V_8_reg_1912 <= y_V_8_fu_1246_p3;
                y_V_8_reg_1912_pp0_iter4_reg <= y_V_8_reg_1912;
                y_V_9_reg_1917 <= y_V_9_fu_1268_p3;
                y_V_9_reg_1917_pp0_iter4_reg <= y_V_9_reg_1917;
                y_V_reg_1872 <= y_V_fu_1070_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_0_V_read_1_reg_1625 <= data_0_V_read;
                data_0_V_read_1_reg_1625_pp0_iter1_reg <= data_0_V_read_1_reg_1625;
                data_1_V_read_1_reg_1620 <= data_1_V_read;
                data_1_V_read_1_reg_1620_pp0_iter1_reg <= data_1_V_read_1_reg_1620;
                data_2_V_read_1_reg_1615 <= data_2_V_read;
                data_2_V_read_1_reg_1615_pp0_iter1_reg <= data_2_V_read_1_reg_1615;
                data_3_V_read_1_reg_1610 <= data_3_V_read;
                data_3_V_read_1_reg_1610_pp0_iter1_reg <= data_3_V_read_1_reg_1610;
                data_4_V_read_1_reg_1605 <= data_4_V_read;
                data_4_V_read_1_reg_1605_pp0_iter1_reg <= data_4_V_read_1_reg_1605;
                data_5_V_read_1_reg_1600 <= data_5_V_read;
                data_5_V_read_1_reg_1600_pp0_iter1_reg <= data_5_V_read_1_reg_1600;
                data_6_V_read_1_reg_1595 <= data_6_V_read;
                data_6_V_read_1_reg_1595_pp0_iter1_reg <= data_6_V_read_1_reg_1595;
                data_7_V_read_1_reg_1590 <= data_7_V_read;
                data_7_V_read_1_reg_1590_pp0_iter1_reg <= data_7_V_read_1_reg_1590;
                data_8_V_read_1_reg_1583 <= data_8_V_read;
                data_8_V_read_1_reg_1583_pp0_iter1_reg <= data_8_V_read_1_reg_1583;
                data_9_V_read_1_reg_1576 <= data_9_V_read;
                data_9_V_read_1_reg_1576_pp0_iter1_reg <= data_9_V_read_1_reg_1576;
                icmp_ln1496_2_reg_1640 <= icmp_ln1496_2_fu_378_p2;
                icmp_ln1496_5_reg_1655 <= icmp_ln1496_5_fu_412_p2;
                select_ln86_1_reg_1635 <= select_ln86_1_fu_370_p3;
                select_ln86_3_reg_1645 <= select_ln86_3_fu_390_p3;
                select_ln86_4_reg_1650 <= select_ln86_4_fu_404_p3;
                select_ln86_6_reg_1660 <= select_ln86_6_fu_434_p3;
                select_ln86_7_reg_1666 <= select_ln86_7_fu_446_p3;
                select_ln86_reg_1630 <= select_ln86_fu_356_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                exp_res_0_V_reg_1947 <= exp_table1_q0;
                exp_res_1_V_reg_1953 <= exp_table1_q1;
                exp_res_2_V_reg_1959 <= exp_table1_q2;
                exp_res_3_V_reg_1965 <= exp_table1_q3;
                exp_res_7_V_reg_1986 <= exp_table1_q4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                exp_res_4_V_reg_2002 <= exp_table1_q5;
                exp_res_5_V_reg_2008 <= exp_table1_q6;
                exp_res_6_V_reg_2014 <= exp_table1_q7;
                exp_res_8_V_reg_2020 <= exp_table1_q8;
                exp_res_9_V_reg_2026 <= exp_table1_q9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_1_fu_1320_p2 <= std_logic_vector(signed(exp_res_7_V_reg_1986) + signed(exp_res_2_V_reg_1959));
    add_ln703_2_fu_1324_p2 <= std_logic_vector(signed(exp_res_3_V_reg_1965) + signed(add_ln703_1_fu_1320_p2));
    add_ln703_3_fu_1329_p2 <= std_logic_vector(unsigned(add_ln703_fu_1316_p2) + unsigned(add_ln703_2_fu_1324_p2));
    add_ln703_4_fu_1335_p2 <= std_logic_vector(signed(exp_res_5_V_reg_2008) + signed(exp_res_6_V_reg_2014));
    add_ln703_5_fu_1339_p2 <= std_logic_vector(signed(exp_res_8_V_reg_2020) + signed(exp_res_9_V_reg_2026));
    add_ln703_6_fu_1343_p2 <= std_logic_vector(signed(exp_res_4_V_reg_2002) + signed(add_ln703_5_fu_1339_p2));
    add_ln703_7_fu_1348_p2 <= std_logic_vector(unsigned(add_ln703_4_fu_1335_p2) + unsigned(add_ln703_6_fu_1343_p2));
    add_ln703_fu_1316_p2 <= std_logic_vector(signed(exp_res_1_V_reg_1953) + signed(exp_res_0_V_reg_1947));
    and_ln786_1_fu_845_p2 <= (xor_ln786_1_fu_840_p2 and tmp_11_reg_1686);
    and_ln786_2_fu_869_p2 <= (xor_ln786_2_fu_864_p2 and tmp_13_reg_1700);
    and_ln786_3_fu_893_p2 <= (xor_ln786_3_fu_888_p2 and tmp_15_reg_1714);
    and_ln786_4_fu_917_p2 <= (xor_ln786_4_fu_912_p2 and tmp_17_reg_1728);
    and_ln786_5_fu_941_p2 <= (xor_ln786_5_fu_936_p2 and tmp_19_reg_1742);
    and_ln786_6_fu_965_p2 <= (xor_ln786_6_fu_960_p2 and tmp_21_reg_1756);
    and_ln786_7_fu_989_p2 <= (xor_ln786_7_fu_984_p2 and tmp_23_reg_1770);
    and_ln786_8_fu_1013_p2 <= (xor_ln786_8_fu_1008_p2 and tmp_25_reg_1784);
    and_ln786_9_fu_1037_p2 <= (xor_ln786_9_fu_1032_p2 and tmp_27_reg_1798);
    and_ln786_fu_821_p2 <= (xor_ln786_fu_816_p2 and tmp_reg_1672);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to11_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to11)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to11 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_sum_V_fu_1354_p2 <= std_logic_vector(unsigned(add_ln703_3_reg_2032) + unsigned(add_ln703_7_fu_1348_p2));
    exp_table1_address0 <= zext_ln306_fu_1276_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln306_1_fu_1280_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln306_2_fu_1284_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln306_3_fu_1288_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln306_7_fu_1292_p1(10 - 1 downto 0);
    exp_table1_address5 <= zext_ln306_4_fu_1296_p1(10 - 1 downto 0);
    exp_table1_address6 <= zext_ln306_5_fu_1300_p1(10 - 1 downto 0);
    exp_table1_address7 <= zext_ln306_6_fu_1304_p1(10 - 1 downto 0);
    exp_table1_address8 <= zext_ln306_8_fu_1308_p1(10 - 1 downto 0);
    exp_table1_address9 <= zext_ln306_9_fu_1312_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce5_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table1_ce5 <= ap_const_logic_1;
        else 
            exp_table1_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce6_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table1_ce6 <= ap_const_logic_1;
        else 
            exp_table1_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce7_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table1_ce7 <= ap_const_logic_1;
        else 
            exp_table1_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce8_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table1_ce8 <= ap_const_logic_1;
        else 
            exp_table1_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce9_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table1_ce9 <= ap_const_logic_1;
        else 
            exp_table1_ce9 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1506_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1506_ce <= ap_const_logic_1;
        else 
            grp_fu_1506_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1506_p1 <= sext_ln1116_fu_1373_p1(12 - 1 downto 0);

    grp_fu_1513_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1513_ce <= ap_const_logic_1;
        else 
            grp_fu_1513_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1513_p1 <= sext_ln1116_fu_1373_p1(12 - 1 downto 0);

    grp_fu_1520_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1520_ce <= ap_const_logic_1;
        else 
            grp_fu_1520_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1520_p1 <= sext_ln1116_fu_1373_p1(12 - 1 downto 0);

    grp_fu_1527_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1527_ce <= ap_const_logic_1;
        else 
            grp_fu_1527_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1527_p1 <= sext_ln1116_fu_1373_p1(12 - 1 downto 0);

    grp_fu_1534_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1534_ce <= ap_const_logic_1;
        else 
            grp_fu_1534_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1534_p1 <= sext_ln1116_fu_1373_p1(12 - 1 downto 0);

    grp_fu_1541_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1541_ce <= ap_const_logic_1;
        else 
            grp_fu_1541_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1541_p1 <= sext_ln1116_fu_1373_p1(12 - 1 downto 0);

    grp_fu_1548_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1548_ce <= ap_const_logic_1;
        else 
            grp_fu_1548_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1548_p1 <= sext_ln1116_fu_1373_p1(12 - 1 downto 0);

    grp_fu_1555_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1555_ce <= ap_const_logic_1;
        else 
            grp_fu_1555_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1555_p1 <= sext_ln1116_fu_1373_p1(12 - 1 downto 0);

    grp_fu_1562_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1562_ce <= ap_const_logic_1;
        else 
            grp_fu_1562_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1562_p1 <= sext_ln1116_fu_1373_p1(12 - 1 downto 0);

    grp_fu_1569_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1569_ce <= ap_const_logic_1;
        else 
            grp_fu_1569_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1569_p1 <= sext_ln1116_fu_1373_p1(12 - 1 downto 0);
    icmp_ln1496_1_fu_364_p0 <= data_2_V_read;
    icmp_ln1496_1_fu_364_p1 <= data_3_V_read;
    icmp_ln1496_1_fu_364_p2 <= "1" when (signed(icmp_ln1496_1_fu_364_p0) < signed(icmp_ln1496_1_fu_364_p1)) else "0";
    icmp_ln1496_2_fu_378_p2 <= "1" when (signed(select_ln86_fu_356_p3) < signed(select_ln86_1_fu_370_p3)) else "0";
    icmp_ln1496_3_fu_384_p0 <= data_4_V_read;
    icmp_ln1496_3_fu_384_p1 <= data_5_V_read;
    icmp_ln1496_3_fu_384_p2 <= "1" when (signed(icmp_ln1496_3_fu_384_p0) < signed(icmp_ln1496_3_fu_384_p1)) else "0";
    icmp_ln1496_4_fu_398_p0 <= data_6_V_read;
    icmp_ln1496_4_fu_398_p1 <= data_7_V_read;
    icmp_ln1496_4_fu_398_p2 <= "1" when (signed(icmp_ln1496_4_fu_398_p0) < signed(icmp_ln1496_4_fu_398_p1)) else "0";
    icmp_ln1496_5_fu_412_p2 <= "1" when (signed(select_ln86_3_fu_390_p3) < signed(select_ln86_4_fu_404_p3)) else "0";
    icmp_ln1496_6_fu_428_p2 <= "1" when (signed(select_ln86_2_fu_418_p3) < signed(select_ln86_5_fu_423_p3)) else "0";
    icmp_ln1496_7_fu_442_p2 <= "1" when (signed(data_8_V_read_1_reg_1583) < signed(data_9_V_read_1_reg_1576)) else "0";
    icmp_ln1496_8_fu_452_p2 <= "1" when (signed(select_ln86_6_reg_1660) < signed(select_ln86_7_reg_1666)) else "0";
    icmp_ln1496_fu_350_p0 <= data_0_V_read;
    icmp_ln1496_fu_350_p1 <= data_1_V_read;
    icmp_ln1496_fu_350_p2 <= "1" when (signed(icmp_ln1496_fu_350_p0) < signed(icmp_ln1496_fu_350_p1)) else "0";
    invert_table2_address0 <= zext_ln314_fu_1369_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln340_1_fu_859_p2 <= (xor_ln340_1_fu_854_p2 or tmp_12_reg_1693);
    or_ln340_2_fu_883_p2 <= (xor_ln340_2_fu_878_p2 or tmp_14_reg_1707);
    or_ln340_3_fu_907_p2 <= (xor_ln340_3_fu_902_p2 or tmp_16_reg_1721);
    or_ln340_4_fu_931_p2 <= (xor_ln340_4_fu_926_p2 or tmp_18_reg_1735);
    or_ln340_5_fu_955_p2 <= (xor_ln340_5_fu_950_p2 or tmp_20_reg_1749);
    or_ln340_6_fu_979_p2 <= (xor_ln340_6_fu_974_p2 or tmp_22_reg_1763);
    or_ln340_7_fu_1003_p2 <= (xor_ln340_7_fu_998_p2 or tmp_24_reg_1777);
    or_ln340_8_fu_1027_p2 <= (xor_ln340_8_fu_1022_p2 or tmp_26_reg_1791);
    or_ln340_9_fu_1051_p2 <= (xor_ln340_9_fu_1046_p2 or tmp_28_reg_1805);
    or_ln340_fu_835_p2 <= (xor_ln340_fu_830_p2 or tmp_10_reg_1679);

    res_0_V_assign_proc : process(ap_enable_reg_pp0_iter12, res_0_V_preg, ap_block_pp0_stage0_01001, grp_fu_1506_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_0_V <= grp_fu_1506_p2(19 downto 6);
        else 
            res_0_V <= res_0_V_preg;
        end if; 
    end process;


    res_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    res_1_V_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_01001, res_1_V_preg, grp_fu_1513_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_1_V <= grp_fu_1513_p2(19 downto 6);
        else 
            res_1_V <= res_1_V_preg;
        end if; 
    end process;


    res_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_1_V_ap_vld <= ap_const_logic_1;
        else 
            res_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    res_2_V_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_01001, res_2_V_preg, grp_fu_1520_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_2_V <= grp_fu_1520_p2(19 downto 6);
        else 
            res_2_V <= res_2_V_preg;
        end if; 
    end process;


    res_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_2_V_ap_vld <= ap_const_logic_1;
        else 
            res_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    res_3_V_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_01001, res_3_V_preg, grp_fu_1527_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_3_V <= grp_fu_1527_p2(19 downto 6);
        else 
            res_3_V <= res_3_V_preg;
        end if; 
    end process;


    res_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_3_V_ap_vld <= ap_const_logic_1;
        else 
            res_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    res_4_V_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_01001, res_4_V_preg, grp_fu_1534_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_4_V <= grp_fu_1534_p2(19 downto 6);
        else 
            res_4_V <= res_4_V_preg;
        end if; 
    end process;


    res_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_4_V_ap_vld <= ap_const_logic_1;
        else 
            res_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    res_5_V_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_01001, res_5_V_preg, grp_fu_1541_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_5_V <= grp_fu_1541_p2(19 downto 6);
        else 
            res_5_V <= res_5_V_preg;
        end if; 
    end process;


    res_5_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_5_V_ap_vld <= ap_const_logic_1;
        else 
            res_5_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    res_6_V_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_01001, res_6_V_preg, grp_fu_1548_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_6_V <= grp_fu_1548_p2(19 downto 6);
        else 
            res_6_V <= res_6_V_preg;
        end if; 
    end process;


    res_6_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_6_V_ap_vld <= ap_const_logic_1;
        else 
            res_6_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    res_7_V_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_01001, res_7_V_preg, grp_fu_1555_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_7_V <= grp_fu_1555_p2(19 downto 6);
        else 
            res_7_V <= res_7_V_preg;
        end if; 
    end process;


    res_7_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_7_V_ap_vld <= ap_const_logic_1;
        else 
            res_7_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    res_8_V_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_01001, res_8_V_preg, grp_fu_1562_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_8_V <= grp_fu_1562_p2(19 downto 6);
        else 
            res_8_V <= res_8_V_preg;
        end if; 
    end process;


    res_8_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_8_V_ap_vld <= ap_const_logic_1;
        else 
            res_8_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    res_9_V_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_01001, res_9_V_preg, grp_fu_1569_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_9_V <= grp_fu_1569_p2(19 downto 6);
        else 
            res_9_V <= res_9_V_preg;
        end if; 
    end process;


    res_9_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            res_9_V_ap_vld <= ap_const_logic_1;
        else 
            res_9_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln340_10_fu_1166_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_15_fu_946_p2(0) = '1') else 
        tmp_s_reg_1842;
    select_ln340_12_fu_1188_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_16_fu_970_p2(0) = '1') else 
        tmp_2_reg_1848;
    select_ln340_14_fu_1210_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_17_fu_994_p2(0) = '1') else 
        tmp_4_reg_1854;
    select_ln340_16_fu_1232_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_18_fu_1018_p2(0) = '1') else 
        tmp_6_reg_1860;
    select_ln340_18_fu_1254_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_19_fu_1042_p2(0) = '1') else 
        tmp_8_reg_1866;
    select_ln340_2_fu_1078_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_11_fu_850_p2(0) = '1') else 
        tmp_3_reg_1818;
    select_ln340_4_fu_1100_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_12_fu_874_p2(0) = '1') else 
        tmp_5_reg_1824;
    select_ln340_6_fu_1122_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_13_fu_898_p2(0) = '1') else 
        tmp_7_reg_1830;
    select_ln340_8_fu_1144_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_14_fu_922_p2(0) = '1') else 
        tmp_9_reg_1836;
    select_ln340_fu_1056_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_10_fu_826_p2(0) = '1') else 
        tmp_1_reg_1812;
    select_ln388_1_fu_1085_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_845_p2(0) = '1') else 
        tmp_3_reg_1818;
    select_ln388_2_fu_1107_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_869_p2(0) = '1') else 
        tmp_5_reg_1824;
    select_ln388_3_fu_1129_p3 <= 
        ap_const_lv10_200 when (and_ln786_3_fu_893_p2(0) = '1') else 
        tmp_7_reg_1830;
    select_ln388_4_fu_1151_p3 <= 
        ap_const_lv10_200 when (and_ln786_4_fu_917_p2(0) = '1') else 
        tmp_9_reg_1836;
    select_ln388_5_fu_1173_p3 <= 
        ap_const_lv10_200 when (and_ln786_5_fu_941_p2(0) = '1') else 
        tmp_s_reg_1842;
    select_ln388_6_fu_1195_p3 <= 
        ap_const_lv10_200 when (and_ln786_6_fu_965_p2(0) = '1') else 
        tmp_2_reg_1848;
    select_ln388_7_fu_1217_p3 <= 
        ap_const_lv10_200 when (and_ln786_7_fu_989_p2(0) = '1') else 
        tmp_4_reg_1854;
    select_ln388_8_fu_1239_p3 <= 
        ap_const_lv10_200 when (and_ln786_8_fu_1013_p2(0) = '1') else 
        tmp_6_reg_1860;
    select_ln388_9_fu_1261_p3 <= 
        ap_const_lv10_200 when (and_ln786_9_fu_1037_p2(0) = '1') else 
        tmp_8_reg_1866;
    select_ln388_fu_1063_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_821_p2(0) = '1') else 
        tmp_1_reg_1812;
    select_ln86_1_fu_370_p1 <= data_3_V_read;
    select_ln86_1_fu_370_p2 <= data_2_V_read;
    select_ln86_1_fu_370_p3 <= 
        select_ln86_1_fu_370_p1 when (icmp_ln1496_1_fu_364_p2(0) = '1') else 
        select_ln86_1_fu_370_p2;
    select_ln86_2_fu_418_p3 <= 
        select_ln86_1_reg_1635 when (icmp_ln1496_2_reg_1640(0) = '1') else 
        select_ln86_reg_1630;
    select_ln86_3_fu_390_p1 <= data_5_V_read;
    select_ln86_3_fu_390_p2 <= data_4_V_read;
    select_ln86_3_fu_390_p3 <= 
        select_ln86_3_fu_390_p1 when (icmp_ln1496_3_fu_384_p2(0) = '1') else 
        select_ln86_3_fu_390_p2;
    select_ln86_4_fu_404_p1 <= data_7_V_read;
    select_ln86_4_fu_404_p2 <= data_6_V_read;
    select_ln86_4_fu_404_p3 <= 
        select_ln86_4_fu_404_p1 when (icmp_ln1496_4_fu_398_p2(0) = '1') else 
        select_ln86_4_fu_404_p2;
    select_ln86_5_fu_423_p3 <= 
        select_ln86_4_reg_1650 when (icmp_ln1496_5_reg_1655(0) = '1') else 
        select_ln86_3_reg_1645;
    select_ln86_6_fu_434_p3 <= 
        select_ln86_5_fu_423_p3 when (icmp_ln1496_6_fu_428_p2(0) = '1') else 
        select_ln86_2_fu_418_p3;
    select_ln86_7_fu_446_p3 <= 
        data_9_V_read_1_reg_1576 when (icmp_ln1496_7_fu_442_p2(0) = '1') else 
        data_8_V_read_1_reg_1583;
    select_ln86_fu_356_p1 <= data_1_V_read;
    select_ln86_fu_356_p2 <= data_0_V_read;
    select_ln86_fu_356_p3 <= 
        select_ln86_fu_356_p1 when (icmp_ln1496_fu_350_p2(0) = '1') else 
        select_ln86_fu_356_p2;
        sext_ln1116_fu_1373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_2047),20));

        sext_ln703_10_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_9_V_read_1_reg_1576_pp0_iter1_reg),17));

        sext_ln703_1_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_456_p3),17));

        sext_ln703_2_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_1_V_read_1_reg_1620_pp0_iter1_reg),17));

        sext_ln703_3_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_2_V_read_1_reg_1615_pp0_iter1_reg),17));

        sext_ln703_4_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_3_V_read_1_reg_1610_pp0_iter1_reg),17));

        sext_ln703_5_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_4_V_read_1_reg_1605_pp0_iter1_reg),17));

        sext_ln703_6_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_5_V_read_1_reg_1600_pp0_iter1_reg),17));

        sext_ln703_7_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_6_V_read_1_reg_1595_pp0_iter1_reg),17));

        sext_ln703_8_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_7_V_read_1_reg_1590_pp0_iter1_reg),17));

        sext_ln703_9_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_8_V_read_1_reg_1583_pp0_iter1_reg),17));

        sext_ln703_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_0_V_read_1_reg_1625_pp0_iter1_reg),17));

    sub_ln1193_1_fu_494_p2 <= std_logic_vector(signed(sext_ln703_2_fu_491_p1) - signed(sext_ln703_1_fu_465_p1));
    sub_ln1193_2_fu_519_p2 <= std_logic_vector(signed(sext_ln703_3_fu_516_p1) - signed(sext_ln703_1_fu_465_p1));
    sub_ln1193_3_fu_544_p2 <= std_logic_vector(signed(sext_ln703_4_fu_541_p1) - signed(sext_ln703_1_fu_465_p1));
    sub_ln1193_4_fu_569_p2 <= std_logic_vector(signed(sext_ln703_5_fu_566_p1) - signed(sext_ln703_1_fu_465_p1));
    sub_ln1193_5_fu_594_p2 <= std_logic_vector(signed(sext_ln703_6_fu_591_p1) - signed(sext_ln703_1_fu_465_p1));
    sub_ln1193_6_fu_619_p2 <= std_logic_vector(signed(sext_ln703_7_fu_616_p1) - signed(sext_ln703_1_fu_465_p1));
    sub_ln1193_7_fu_644_p2 <= std_logic_vector(signed(sext_ln703_8_fu_641_p1) - signed(sext_ln703_1_fu_465_p1));
    sub_ln1193_8_fu_669_p2 <= std_logic_vector(signed(sext_ln703_9_fu_666_p1) - signed(sext_ln703_1_fu_465_p1));
    sub_ln1193_9_fu_694_p2 <= std_logic_vector(signed(sext_ln703_10_fu_691_p1) - signed(sext_ln703_1_fu_465_p1));
    sub_ln1193_fu_469_p2 <= std_logic_vector(signed(sext_ln703_fu_462_p1) - signed(sext_ln703_1_fu_465_p1));
    x_max_V_fu_456_p3 <= 
        select_ln86_7_reg_1666 when (icmp_ln1496_8_fu_452_p2(0) = '1') else 
        select_ln86_6_reg_1660;
    xor_ln340_10_fu_826_p2 <= (tmp_reg_1672 xor tmp_10_reg_1679);
    xor_ln340_11_fu_850_p2 <= (tmp_12_reg_1693 xor tmp_11_reg_1686);
    xor_ln340_12_fu_874_p2 <= (tmp_14_reg_1707 xor tmp_13_reg_1700);
    xor_ln340_13_fu_898_p2 <= (tmp_16_reg_1721 xor tmp_15_reg_1714);
    xor_ln340_14_fu_922_p2 <= (tmp_18_reg_1735 xor tmp_17_reg_1728);
    xor_ln340_15_fu_946_p2 <= (tmp_20_reg_1749 xor tmp_19_reg_1742);
    xor_ln340_16_fu_970_p2 <= (tmp_22_reg_1763 xor tmp_21_reg_1756);
    xor_ln340_17_fu_994_p2 <= (tmp_24_reg_1777 xor tmp_23_reg_1770);
    xor_ln340_18_fu_1018_p2 <= (tmp_26_reg_1791 xor tmp_25_reg_1784);
    xor_ln340_19_fu_1042_p2 <= (tmp_28_reg_1805 xor tmp_27_reg_1798);
    xor_ln340_1_fu_854_p2 <= (tmp_11_reg_1686 xor ap_const_lv1_1);
    xor_ln340_2_fu_878_p2 <= (tmp_13_reg_1700 xor ap_const_lv1_1);
    xor_ln340_3_fu_902_p2 <= (tmp_15_reg_1714 xor ap_const_lv1_1);
    xor_ln340_4_fu_926_p2 <= (tmp_17_reg_1728 xor ap_const_lv1_1);
    xor_ln340_5_fu_950_p2 <= (tmp_19_reg_1742 xor ap_const_lv1_1);
    xor_ln340_6_fu_974_p2 <= (tmp_21_reg_1756 xor ap_const_lv1_1);
    xor_ln340_7_fu_998_p2 <= (tmp_23_reg_1770 xor ap_const_lv1_1);
    xor_ln340_8_fu_1022_p2 <= (tmp_25_reg_1784 xor ap_const_lv1_1);
    xor_ln340_9_fu_1046_p2 <= (tmp_27_reg_1798 xor ap_const_lv1_1);
    xor_ln340_fu_830_p2 <= (tmp_reg_1672 xor ap_const_lv1_1);
    xor_ln786_1_fu_840_p2 <= (tmp_12_reg_1693 xor ap_const_lv1_1);
    xor_ln786_2_fu_864_p2 <= (tmp_14_reg_1707 xor ap_const_lv1_1);
    xor_ln786_3_fu_888_p2 <= (tmp_16_reg_1721 xor ap_const_lv1_1);
    xor_ln786_4_fu_912_p2 <= (tmp_18_reg_1735 xor ap_const_lv1_1);
    xor_ln786_5_fu_936_p2 <= (tmp_20_reg_1749 xor ap_const_lv1_1);
    xor_ln786_6_fu_960_p2 <= (tmp_22_reg_1763 xor ap_const_lv1_1);
    xor_ln786_7_fu_984_p2 <= (tmp_24_reg_1777 xor ap_const_lv1_1);
    xor_ln786_8_fu_1008_p2 <= (tmp_26_reg_1791 xor ap_const_lv1_1);
    xor_ln786_9_fu_1032_p2 <= (tmp_28_reg_1805 xor ap_const_lv1_1);
    xor_ln786_fu_816_p2 <= (tmp_10_reg_1679 xor ap_const_lv1_1);
    y_V_1_fu_1092_p3 <= 
        select_ln340_2_fu_1078_p3 when (or_ln340_1_fu_859_p2(0) = '1') else 
        select_ln388_1_fu_1085_p3;
    y_V_2_fu_1114_p3 <= 
        select_ln340_4_fu_1100_p3 when (or_ln340_2_fu_883_p2(0) = '1') else 
        select_ln388_2_fu_1107_p3;
    y_V_3_fu_1136_p3 <= 
        select_ln340_6_fu_1122_p3 when (or_ln340_3_fu_907_p2(0) = '1') else 
        select_ln388_3_fu_1129_p3;
    y_V_4_fu_1158_p3 <= 
        select_ln340_8_fu_1144_p3 when (or_ln340_4_fu_931_p2(0) = '1') else 
        select_ln388_4_fu_1151_p3;
    y_V_5_fu_1180_p3 <= 
        select_ln340_10_fu_1166_p3 when (or_ln340_5_fu_955_p2(0) = '1') else 
        select_ln388_5_fu_1173_p3;
    y_V_6_fu_1202_p3 <= 
        select_ln340_12_fu_1188_p3 when (or_ln340_6_fu_979_p2(0) = '1') else 
        select_ln388_6_fu_1195_p3;
    y_V_7_fu_1224_p3 <= 
        select_ln340_14_fu_1210_p3 when (or_ln340_7_fu_1003_p2(0) = '1') else 
        select_ln388_7_fu_1217_p3;
    y_V_8_fu_1246_p3 <= 
        select_ln340_16_fu_1232_p3 when (or_ln340_8_fu_1027_p2(0) = '1') else 
        select_ln388_8_fu_1239_p3;
    y_V_9_fu_1268_p3 <= 
        select_ln340_18_fu_1254_p3 when (or_ln340_9_fu_1051_p2(0) = '1') else 
        select_ln388_9_fu_1261_p3;
    y_V_fu_1070_p3 <= 
        select_ln340_fu_1056_p3 when (or_ln340_fu_835_p2(0) = '1') else 
        select_ln388_fu_1063_p3;
    zext_ln306_1_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_1877),64));
    zext_ln306_2_fu_1284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_1882),64));
    zext_ln306_3_fu_1288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_reg_1887),64));
    zext_ln306_4_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_reg_1892_pp0_iter4_reg),64));
    zext_ln306_5_fu_1300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_reg_1897_pp0_iter4_reg),64));
    zext_ln306_6_fu_1304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_6_reg_1902_pp0_iter4_reg),64));
    zext_ln306_7_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_7_reg_1907),64));
    zext_ln306_8_fu_1308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_8_reg_1912_pp0_iter4_reg),64));
    zext_ln306_9_fu_1312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_9_reg_1917_pp0_iter4_reg),64));
    zext_ln306_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_1872),64));
    zext_ln314_fu_1369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_10_reg_2037),64));
end behav;
