-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_exp_tabkb_rom is 
    generic(
             DWIDTH     : integer := 12; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          addr2      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce2       : in std_logic; 
          q2         : out std_logic_vector(DWIDTH-1 downto 0);
          addr3      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce3       : in std_logic; 
          q3         : out std_logic_vector(DWIDTH-1 downto 0);
          addr4      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce4       : in std_logic; 
          q4         : out std_logic_vector(DWIDTH-1 downto 0);
          addr5      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce5       : in std_logic; 
          q5         : out std_logic_vector(DWIDTH-1 downto 0);
          addr6      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce6       : in std_logic; 
          q6         : out std_logic_vector(DWIDTH-1 downto 0);
          addr7      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce7       : in std_logic; 
          q7         : out std_logic_vector(DWIDTH-1 downto 0);
          addr8      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce8       : in std_logic; 
          q8         : out std_logic_vector(DWIDTH-1 downto 0);
          addr9      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce9       : in std_logic; 
          q9         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_exp_tabkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr2_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr3_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr4_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr5_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr6_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr7_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr8_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr9_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem0 : mem_array := (
    0 => "000100000000", 1 => "000100010000", 2 => "000100100010", 
    3 => "000100110100", 4 => "000101001000", 5 => "000101011101", 
    6 => "000101110100", 7 => "000110001100", 8 => "000110100110", 
    9 => "000111000001", 10 => "000111011110", 11 => "000111111101", 
    12 => "001000011101", 13 => "001001000000", 14 => "001001100110", 
    15 => "001010001101", 16 => "001010110111", 17 => "001011100100", 
    18 => "001100010100", 19 => "001101000111", 20 => "001101111101", 
    21 => "001110110111", 22 => "001111110100", 23 => "010000110101", 
    24 => "010001111011", 25 => "010011000101", 26 => "010100010100", 
    27 => "010101100111", 28 => "010111000001", 29 => "011000100000", 
    30 => "011010000101", 31 => "011011110000", 32 => "011101100011", 
    33 => "011111011101", 34 => "100001011111", 35 => "100011101001", 
    36 => "100101111100", 37 => "101000011001", 38 => "101011000000", 
    39 => "101101110001", 40 => "110000101110", 41 => "110011110111", 
    42 => "110111001101", 43 => "111010110001", 44 => "111110100100", 
    45 => "000010100110", 46 => "000110111001", 47 => "001011011110", 
    48 => "010000010101", 49 => "010101100001", 50 => "011011000010", 
    51 => "100000111010", 52 => "100111001010", 53 => "101101110100", 
    54 => "110100111001", 55 => "111100011011", 56 => "000100011101", 
    57 => "001101000000", 58 => "010110000110", 59 => "011111110001", 
    60 => "101010000101", 61 => "110101000011", 62 => "000000101110", 
    63 => "001101001010", 64 => "011010011001", 65 => "101000011110", 
    66 => "110111011110", 67 => "000111011011", 68 => "011000011010", 
    69 => "101010100000", 70 => "111101110000", 71 => "010010010000", 
    72 => "101000000100", 73 => "111111010010", 74 => "011000000000", 
    75 => "110010010100", 76 => "001110010101", 77 => "101100001001", 
    78 => "001011111001", 79 => "101101101011", 80 => "010001101001", 
    81 => "110111111100", 82 => "100000101100", 83 => "001100000101", 
    84 => "111010010000", 85 => "101011011011", 86 => "011111110000", 
    87 => "010111011101", 88 => "010010110001", 89 => "010001111001", 
    90 => "010101000101", 91 => "011100100111", 92 => "101000110000", 
    93 => "111001110100", 94 => "010000000110", 95 => "101011111100", 
    96 => "001101101101", 97 => "110101110010", 98 => "100100100101", 
    99 => "011010100000", 100 => "011000000011", 101 => "011101101011", 
    102 => "101011111100", 103 => "000011010111", 104 => "100100100100", 
    105 => "010000001010", 106 => "000110110100", 107 => "001001010000", 
    108 => "011000001111", 109 => "110100100100", 110 => "011111000110", 
    111 => "011000110001", 112 => "100010100010", 113 => "111101011100", 
    114 => "101010100101", 115 => "101011001010", 116 => "000000011010", 
    117 => "101011101011", 118 => "101110010111", 119 => "001001111111", 
    120 => "000000001010", 121 => "010010100110", 122 => "000011000111", 
    123 => "010011101010", 124 => "000110010010", 125 => "011101001101", 
    126 => "011010101111", 127 => "000001011001", 128 => "010011110101", 
    129 => "010100110110", 130 => "000111011110", 131 => "101110111000", 
    132 => "001110100000", 133 => "101001111100", 134 => "000101000100", 
    135 => "100011111111", 136 => "001011000100", 137 => "111110111110", 
    138 => "000100101001", 139 => "100001010111", 140 => "011010110000", 
    141 => "110110110001", 142 => "111011110010", 143 => "110000100100", 
    144 => "011100010101", 145 => "000110110000", 146 => "110111111111", 
    147 => "111000101111", 148 => "010010010000", 149 => "001110011010", 
    150 => "110111101011", 151 => "011001001101", 152 => "111110111010", 
    153 => "110101011011", 154 => "001010001101", 155 => "001011101000", 
    156 => "001000111010", 157 => "010010010101", 158 => "111001001001", 
    159 => "001111110011", 160 => "101001110111", 161 => "011100001101", 
    162 => "111101000001", 163 => "100011111101", 164 => "101010001010", 
    165 => "101010011100", 166 => "000001010001", 167 => "001101000010", 
    168 => "101110000001", 169 => "000110100111", 170 => "111011011011", 
    171 => "110011011100", 172 => "011000000111", 173 => "010101101000", 
    174 => "011010111111", 175 => "011010001101", 176 => "001000100100", 
    177 => "011110110001", 178 => "011001001010", 179 => "111000000000", 
    180 => "111111101100", 181 => "111001000000", 182 => "110001011100", 
    183 => "111011100010", 184 => "101111000110", 185 => "101001100100", 
    186 => "001110100000", 187 => "000111110010", 188 => "000110010000", 
    189 => "000001111000", 190 => "111010011000", 191 => "110111111100", 
    192 => "001011001100", 193 => "001110010100", 194 => "100101011000", 
    195 => "111111000000", 196 => "010101001000", 197 => "101101101100", 
    198 => "011011010100", 199 => "111110001100", 200 => "000101001000", 
    201 => "101110010000", 202 => "000111111000", 203 => "110010010000", 
    204 => "011111101000", 205 => "010110011000", 206 => "110001110000", 
    207 => "100011101000", 208 => "110101101000", 209 => "001010011000", 
    210 => "100000010000", 211 => "010001110000", 212 => "011000010000", 
    213 => "001101110000", 214 => "101110110000", 215 => "011101000000", 
    216 => "100001100000", 217 => "101110110000", 218 => "100100000000", 
    219 => "010000010000", 220 => "110100110000", 221 => "001000000000", 
    222 => "111010000000", 223 => "111000100000", 224 => "110001000000", 
    225 => "010110100000", 226 => "100100100000", 227 => "100110100000", 
    228 => "111010000000", 229 => "010100100000", 230 => "001011100000", 
    231 => "011000000000", 232 => "011101000000", 233 => "110001000000", 
    234 => "100010000000", 235 => "000001000000", 236 => "100101000000", 
    237 => "111010000000", 238 => "000111000000", 239 => "110110000000", 
    240 => "100101000000", 241 => "101100000000", 242 => "101000000000", 
    243 => "001111000000", 244 => "110110000000", 245 => "100100000000", 
    246 => "100000000000", 247 => "000100000000", 248 => "001010000000", 
    249 => "100000000000", 250 => "000010000000", 251 => "000110000000", 
    252 => "111000000000", 253 => "110010000000", 254 => "110100000000", 
    255 => "000010000000", 256 to 257=> "111100000000", 258 => "001000000000", 
    259 => "011100000000", 260 => "100000000000", 261 => "000100000000", 
    262 => "111100000000", 263 => "010100000000", 264 => "111100000000", 
    265 => "101000000000", 266 => "000000000000", 267 => "110000000000", 
    268 to 269=> "100000000000", 270 => "111000000000", 271 => "011000000000", 
    272 => "100000000000", 273 => "111000000000", 274 => "110000000000", 
    275 => "001000000000", 276 => "011000000000", 277 => "001000000000", 
    278 => "000000000000", 279 => "010000000000", 280 to 282=> "000000000000", 
    283 to 284=> "010000000000", 285 => "110000000000", 286 => "000000000000", 
    287 => "100000000000", 288 to 292=> "000000000000", 293 => "100000000000", 
    294 => "000000000000", 295 to 296=> "100000000000", 297 => "000000000000", 
    298 to 299=> "100000000000", 300 to 935=> "000000000000", 936 to 946=> "000000000001", 
    947 to 952=> "000000000010", 953 to 957=> "000000000011", 958 to 961=> "000000000100", 
    962 to 963=> "000000000101", 964 to 966=> "000000000110", 967 to 968=> "000000000111", 
    969 to 970=> "000000001000", 971 to 972=> "000000001001", 973 => "000000001010", 
    974 to 975=> "000000001011", 976 => "000000001100", 977 => "000000001101", 
    978 => "000000001110", 979 => "000000001111", 980 => "000000010000", 
    981 => "000000010001", 982 => "000000010010", 983 => "000000010011", 
    984 => "000000010101", 985 => "000000010110", 986 => "000000010111", 
    987 => "000000011001", 988 => "000000011010", 989 => "000000011100", 
    990 => "000000011110", 991 => "000000100000", 992 => "000000100010", 
    993 => "000000100100", 994 => "000000100111", 995 => "000000101001", 
    996 => "000000101100", 997 => "000000101111", 998 => "000000110010", 
    999 => "000000110101", 1000 => "000000111001", 1001 => "000000111100", 
    1002 => "000001000000", 1003 => "000001000100", 1004 => "000001001001", 
    1005 => "000001001110", 1006 => "000001010011", 1007 => "000001011000", 
    1008 => "000001011110", 1009 => "000001100100", 1010 => "000001101010", 
    1011 => "000001110001", 1012 => "000001111000", 1013 => "000010000000", 
    1014 => "000010001001", 1015 => "000010010001", 1016 => "000010011011", 
    1017 => "000010100101", 1018 => "000010101111", 1019 => "000010111011", 
    1020 => "000011000111", 1021 => "000011010100", 1022 => "000011100001", 
    1023 => "000011110000" );
signal mem1 : mem_array := (
    0 => "000100000000", 1 => "000100010000", 2 => "000100100010", 
    3 => "000100110100", 4 => "000101001000", 5 => "000101011101", 
    6 => "000101110100", 7 => "000110001100", 8 => "000110100110", 
    9 => "000111000001", 10 => "000111011110", 11 => "000111111101", 
    12 => "001000011101", 13 => "001001000000", 14 => "001001100110", 
    15 => "001010001101", 16 => "001010110111", 17 => "001011100100", 
    18 => "001100010100", 19 => "001101000111", 20 => "001101111101", 
    21 => "001110110111", 22 => "001111110100", 23 => "010000110101", 
    24 => "010001111011", 25 => "010011000101", 26 => "010100010100", 
    27 => "010101100111", 28 => "010111000001", 29 => "011000100000", 
    30 => "011010000101", 31 => "011011110000", 32 => "011101100011", 
    33 => "011111011101", 34 => "100001011111", 35 => "100011101001", 
    36 => "100101111100", 37 => "101000011001", 38 => "101011000000", 
    39 => "101101110001", 40 => "110000101110", 41 => "110011110111", 
    42 => "110111001101", 43 => "111010110001", 44 => "111110100100", 
    45 => "000010100110", 46 => "000110111001", 47 => "001011011110", 
    48 => "010000010101", 49 => "010101100001", 50 => "011011000010", 
    51 => "100000111010", 52 => "100111001010", 53 => "101101110100", 
    54 => "110100111001", 55 => "111100011011", 56 => "000100011101", 
    57 => "001101000000", 58 => "010110000110", 59 => "011111110001", 
    60 => "101010000101", 61 => "110101000011", 62 => "000000101110", 
    63 => "001101001010", 64 => "011010011001", 65 => "101000011110", 
    66 => "110111011110", 67 => "000111011011", 68 => "011000011010", 
    69 => "101010100000", 70 => "111101110000", 71 => "010010010000", 
    72 => "101000000100", 73 => "111111010010", 74 => "011000000000", 
    75 => "110010010100", 76 => "001110010101", 77 => "101100001001", 
    78 => "001011111001", 79 => "101101101011", 80 => "010001101001", 
    81 => "110111111100", 82 => "100000101100", 83 => "001100000101", 
    84 => "111010010000", 85 => "101011011011", 86 => "011111110000", 
    87 => "010111011101", 88 => "010010110001", 89 => "010001111001", 
    90 => "010101000101", 91 => "011100100111", 92 => "101000110000", 
    93 => "111001110100", 94 => "010000000110", 95 => "101011111100", 
    96 => "001101101101", 97 => "110101110010", 98 => "100100100101", 
    99 => "011010100000", 100 => "011000000011", 101 => "011101101011", 
    102 => "101011111100", 103 => "000011010111", 104 => "100100100100", 
    105 => "010000001010", 106 => "000110110100", 107 => "001001010000", 
    108 => "011000001111", 109 => "110100100100", 110 => "011111000110", 
    111 => "011000110001", 112 => "100010100010", 113 => "111101011100", 
    114 => "101010100101", 115 => "101011001010", 116 => "000000011010", 
    117 => "101011101011", 118 => "101110010111", 119 => "001001111111", 
    120 => "000000001010", 121 => "010010100110", 122 => "000011000111", 
    123 => "010011101010", 124 => "000110010010", 125 => "011101001101", 
    126 => "011010101111", 127 => "000001011001", 128 => "010011110101", 
    129 => "010100110110", 130 => "000111011110", 131 => "101110111000", 
    132 => "001110100000", 133 => "101001111100", 134 => "000101000100", 
    135 => "100011111111", 136 => "001011000100", 137 => "111110111110", 
    138 => "000100101001", 139 => "100001010111", 140 => "011010110000", 
    141 => "110110110001", 142 => "111011110010", 143 => "110000100100", 
    144 => "011100010101", 145 => "000110110000", 146 => "110111111111", 
    147 => "111000101111", 148 => "010010010000", 149 => "001110011010", 
    150 => "110111101011", 151 => "011001001101", 152 => "111110111010", 
    153 => "110101011011", 154 => "001010001101", 155 => "001011101000", 
    156 => "001000111010", 157 => "010010010101", 158 => "111001001001", 
    159 => "001111110011", 160 => "101001110111", 161 => "011100001101", 
    162 => "111101000001", 163 => "100011111101", 164 => "101010001010", 
    165 => "101010011100", 166 => "000001010001", 167 => "001101000010", 
    168 => "101110000001", 169 => "000110100111", 170 => "111011011011", 
    171 => "110011011100", 172 => "011000000111", 173 => "010101101000", 
    174 => "011010111111", 175 => "011010001101", 176 => "001000100100", 
    177 => "011110110001", 178 => "011001001010", 179 => "111000000000", 
    180 => "111111101100", 181 => "111001000000", 182 => "110001011100", 
    183 => "111011100010", 184 => "101111000110", 185 => "101001100100", 
    186 => "001110100000", 187 => "000111110010", 188 => "000110010000", 
    189 => "000001111000", 190 => "111010011000", 191 => "110111111100", 
    192 => "001011001100", 193 => "001110010100", 194 => "100101011000", 
    195 => "111111000000", 196 => "010101001000", 197 => "101101101100", 
    198 => "011011010100", 199 => "111110001100", 200 => "000101001000", 
    201 => "101110010000", 202 => "000111111000", 203 => "110010010000", 
    204 => "011111101000", 205 => "010110011000", 206 => "110001110000", 
    207 => "100011101000", 208 => "110101101000", 209 => "001010011000", 
    210 => "100000010000", 211 => "010001110000", 212 => "011000010000", 
    213 => "001101110000", 214 => "101110110000", 215 => "011101000000", 
    216 => "100001100000", 217 => "101110110000", 218 => "100100000000", 
    219 => "010000010000", 220 => "110100110000", 221 => "001000000000", 
    222 => "111010000000", 223 => "111000100000", 224 => "110001000000", 
    225 => "010110100000", 226 => "100100100000", 227 => "100110100000", 
    228 => "111010000000", 229 => "010100100000", 230 => "001011100000", 
    231 => "011000000000", 232 => "011101000000", 233 => "110001000000", 
    234 => "100010000000", 235 => "000001000000", 236 => "100101000000", 
    237 => "111010000000", 238 => "000111000000", 239 => "110110000000", 
    240 => "100101000000", 241 => "101100000000", 242 => "101000000000", 
    243 => "001111000000", 244 => "110110000000", 245 => "100100000000", 
    246 => "100000000000", 247 => "000100000000", 248 => "001010000000", 
    249 => "100000000000", 250 => "000010000000", 251 => "000110000000", 
    252 => "111000000000", 253 => "110010000000", 254 => "110100000000", 
    255 => "000010000000", 256 to 257=> "111100000000", 258 => "001000000000", 
    259 => "011100000000", 260 => "100000000000", 261 => "000100000000", 
    262 => "111100000000", 263 => "010100000000", 264 => "111100000000", 
    265 => "101000000000", 266 => "000000000000", 267 => "110000000000", 
    268 to 269=> "100000000000", 270 => "111000000000", 271 => "011000000000", 
    272 => "100000000000", 273 => "111000000000", 274 => "110000000000", 
    275 => "001000000000", 276 => "011000000000", 277 => "001000000000", 
    278 => "000000000000", 279 => "010000000000", 280 to 282=> "000000000000", 
    283 to 284=> "010000000000", 285 => "110000000000", 286 => "000000000000", 
    287 => "100000000000", 288 to 292=> "000000000000", 293 => "100000000000", 
    294 => "000000000000", 295 to 296=> "100000000000", 297 => "000000000000", 
    298 to 299=> "100000000000", 300 to 935=> "000000000000", 936 to 946=> "000000000001", 
    947 to 952=> "000000000010", 953 to 957=> "000000000011", 958 to 961=> "000000000100", 
    962 to 963=> "000000000101", 964 to 966=> "000000000110", 967 to 968=> "000000000111", 
    969 to 970=> "000000001000", 971 to 972=> "000000001001", 973 => "000000001010", 
    974 to 975=> "000000001011", 976 => "000000001100", 977 => "000000001101", 
    978 => "000000001110", 979 => "000000001111", 980 => "000000010000", 
    981 => "000000010001", 982 => "000000010010", 983 => "000000010011", 
    984 => "000000010101", 985 => "000000010110", 986 => "000000010111", 
    987 => "000000011001", 988 => "000000011010", 989 => "000000011100", 
    990 => "000000011110", 991 => "000000100000", 992 => "000000100010", 
    993 => "000000100100", 994 => "000000100111", 995 => "000000101001", 
    996 => "000000101100", 997 => "000000101111", 998 => "000000110010", 
    999 => "000000110101", 1000 => "000000111001", 1001 => "000000111100", 
    1002 => "000001000000", 1003 => "000001000100", 1004 => "000001001001", 
    1005 => "000001001110", 1006 => "000001010011", 1007 => "000001011000", 
    1008 => "000001011110", 1009 => "000001100100", 1010 => "000001101010", 
    1011 => "000001110001", 1012 => "000001111000", 1013 => "000010000000", 
    1014 => "000010001001", 1015 => "000010010001", 1016 => "000010011011", 
    1017 => "000010100101", 1018 => "000010101111", 1019 => "000010111011", 
    1020 => "000011000111", 1021 => "000011010100", 1022 => "000011100001", 
    1023 => "000011110000" );
signal mem2 : mem_array := (
    0 => "000100000000", 1 => "000100010000", 2 => "000100100010", 
    3 => "000100110100", 4 => "000101001000", 5 => "000101011101", 
    6 => "000101110100", 7 => "000110001100", 8 => "000110100110", 
    9 => "000111000001", 10 => "000111011110", 11 => "000111111101", 
    12 => "001000011101", 13 => "001001000000", 14 => "001001100110", 
    15 => "001010001101", 16 => "001010110111", 17 => "001011100100", 
    18 => "001100010100", 19 => "001101000111", 20 => "001101111101", 
    21 => "001110110111", 22 => "001111110100", 23 => "010000110101", 
    24 => "010001111011", 25 => "010011000101", 26 => "010100010100", 
    27 => "010101100111", 28 => "010111000001", 29 => "011000100000", 
    30 => "011010000101", 31 => "011011110000", 32 => "011101100011", 
    33 => "011111011101", 34 => "100001011111", 35 => "100011101001", 
    36 => "100101111100", 37 => "101000011001", 38 => "101011000000", 
    39 => "101101110001", 40 => "110000101110", 41 => "110011110111", 
    42 => "110111001101", 43 => "111010110001", 44 => "111110100100", 
    45 => "000010100110", 46 => "000110111001", 47 => "001011011110", 
    48 => "010000010101", 49 => "010101100001", 50 => "011011000010", 
    51 => "100000111010", 52 => "100111001010", 53 => "101101110100", 
    54 => "110100111001", 55 => "111100011011", 56 => "000100011101", 
    57 => "001101000000", 58 => "010110000110", 59 => "011111110001", 
    60 => "101010000101", 61 => "110101000011", 62 => "000000101110", 
    63 => "001101001010", 64 => "011010011001", 65 => "101000011110", 
    66 => "110111011110", 67 => "000111011011", 68 => "011000011010", 
    69 => "101010100000", 70 => "111101110000", 71 => "010010010000", 
    72 => "101000000100", 73 => "111111010010", 74 => "011000000000", 
    75 => "110010010100", 76 => "001110010101", 77 => "101100001001", 
    78 => "001011111001", 79 => "101101101011", 80 => "010001101001", 
    81 => "110111111100", 82 => "100000101100", 83 => "001100000101", 
    84 => "111010010000", 85 => "101011011011", 86 => "011111110000", 
    87 => "010111011101", 88 => "010010110001", 89 => "010001111001", 
    90 => "010101000101", 91 => "011100100111", 92 => "101000110000", 
    93 => "111001110100", 94 => "010000000110", 95 => "101011111100", 
    96 => "001101101101", 97 => "110101110010", 98 => "100100100101", 
    99 => "011010100000", 100 => "011000000011", 101 => "011101101011", 
    102 => "101011111100", 103 => "000011010111", 104 => "100100100100", 
    105 => "010000001010", 106 => "000110110100", 107 => "001001010000", 
    108 => "011000001111", 109 => "110100100100", 110 => "011111000110", 
    111 => "011000110001", 112 => "100010100010", 113 => "111101011100", 
    114 => "101010100101", 115 => "101011001010", 116 => "000000011010", 
    117 => "101011101011", 118 => "101110010111", 119 => "001001111111", 
    120 => "000000001010", 121 => "010010100110", 122 => "000011000111", 
    123 => "010011101010", 124 => "000110010010", 125 => "011101001101", 
    126 => "011010101111", 127 => "000001011001", 128 => "010011110101", 
    129 => "010100110110", 130 => "000111011110", 131 => "101110111000", 
    132 => "001110100000", 133 => "101001111100", 134 => "000101000100", 
    135 => "100011111111", 136 => "001011000100", 137 => "111110111110", 
    138 => "000100101001", 139 => "100001010111", 140 => "011010110000", 
    141 => "110110110001", 142 => "111011110010", 143 => "110000100100", 
    144 => "011100010101", 145 => "000110110000", 146 => "110111111111", 
    147 => "111000101111", 148 => "010010010000", 149 => "001110011010", 
    150 => "110111101011", 151 => "011001001101", 152 => "111110111010", 
    153 => "110101011011", 154 => "001010001101", 155 => "001011101000", 
    156 => "001000111010", 157 => "010010010101", 158 => "111001001001", 
    159 => "001111110011", 160 => "101001110111", 161 => "011100001101", 
    162 => "111101000001", 163 => "100011111101", 164 => "101010001010", 
    165 => "101010011100", 166 => "000001010001", 167 => "001101000010", 
    168 => "101110000001", 169 => "000110100111", 170 => "111011011011", 
    171 => "110011011100", 172 => "011000000111", 173 => "010101101000", 
    174 => "011010111111", 175 => "011010001101", 176 => "001000100100", 
    177 => "011110110001", 178 => "011001001010", 179 => "111000000000", 
    180 => "111111101100", 181 => "111001000000", 182 => "110001011100", 
    183 => "111011100010", 184 => "101111000110", 185 => "101001100100", 
    186 => "001110100000", 187 => "000111110010", 188 => "000110010000", 
    189 => "000001111000", 190 => "111010011000", 191 => "110111111100", 
    192 => "001011001100", 193 => "001110010100", 194 => "100101011000", 
    195 => "111111000000", 196 => "010101001000", 197 => "101101101100", 
    198 => "011011010100", 199 => "111110001100", 200 => "000101001000", 
    201 => "101110010000", 202 => "000111111000", 203 => "110010010000", 
    204 => "011111101000", 205 => "010110011000", 206 => "110001110000", 
    207 => "100011101000", 208 => "110101101000", 209 => "001010011000", 
    210 => "100000010000", 211 => "010001110000", 212 => "011000010000", 
    213 => "001101110000", 214 => "101110110000", 215 => "011101000000", 
    216 => "100001100000", 217 => "101110110000", 218 => "100100000000", 
    219 => "010000010000", 220 => "110100110000", 221 => "001000000000", 
    222 => "111010000000", 223 => "111000100000", 224 => "110001000000", 
    225 => "010110100000", 226 => "100100100000", 227 => "100110100000", 
    228 => "111010000000", 229 => "010100100000", 230 => "001011100000", 
    231 => "011000000000", 232 => "011101000000", 233 => "110001000000", 
    234 => "100010000000", 235 => "000001000000", 236 => "100101000000", 
    237 => "111010000000", 238 => "000111000000", 239 => "110110000000", 
    240 => "100101000000", 241 => "101100000000", 242 => "101000000000", 
    243 => "001111000000", 244 => "110110000000", 245 => "100100000000", 
    246 => "100000000000", 247 => "000100000000", 248 => "001010000000", 
    249 => "100000000000", 250 => "000010000000", 251 => "000110000000", 
    252 => "111000000000", 253 => "110010000000", 254 => "110100000000", 
    255 => "000010000000", 256 to 257=> "111100000000", 258 => "001000000000", 
    259 => "011100000000", 260 => "100000000000", 261 => "000100000000", 
    262 => "111100000000", 263 => "010100000000", 264 => "111100000000", 
    265 => "101000000000", 266 => "000000000000", 267 => "110000000000", 
    268 to 269=> "100000000000", 270 => "111000000000", 271 => "011000000000", 
    272 => "100000000000", 273 => "111000000000", 274 => "110000000000", 
    275 => "001000000000", 276 => "011000000000", 277 => "001000000000", 
    278 => "000000000000", 279 => "010000000000", 280 to 282=> "000000000000", 
    283 to 284=> "010000000000", 285 => "110000000000", 286 => "000000000000", 
    287 => "100000000000", 288 to 292=> "000000000000", 293 => "100000000000", 
    294 => "000000000000", 295 to 296=> "100000000000", 297 => "000000000000", 
    298 to 299=> "100000000000", 300 to 935=> "000000000000", 936 to 946=> "000000000001", 
    947 to 952=> "000000000010", 953 to 957=> "000000000011", 958 to 961=> "000000000100", 
    962 to 963=> "000000000101", 964 to 966=> "000000000110", 967 to 968=> "000000000111", 
    969 to 970=> "000000001000", 971 to 972=> "000000001001", 973 => "000000001010", 
    974 to 975=> "000000001011", 976 => "000000001100", 977 => "000000001101", 
    978 => "000000001110", 979 => "000000001111", 980 => "000000010000", 
    981 => "000000010001", 982 => "000000010010", 983 => "000000010011", 
    984 => "000000010101", 985 => "000000010110", 986 => "000000010111", 
    987 => "000000011001", 988 => "000000011010", 989 => "000000011100", 
    990 => "000000011110", 991 => "000000100000", 992 => "000000100010", 
    993 => "000000100100", 994 => "000000100111", 995 => "000000101001", 
    996 => "000000101100", 997 => "000000101111", 998 => "000000110010", 
    999 => "000000110101", 1000 => "000000111001", 1001 => "000000111100", 
    1002 => "000001000000", 1003 => "000001000100", 1004 => "000001001001", 
    1005 => "000001001110", 1006 => "000001010011", 1007 => "000001011000", 
    1008 => "000001011110", 1009 => "000001100100", 1010 => "000001101010", 
    1011 => "000001110001", 1012 => "000001111000", 1013 => "000010000000", 
    1014 => "000010001001", 1015 => "000010010001", 1016 => "000010011011", 
    1017 => "000010100101", 1018 => "000010101111", 1019 => "000010111011", 
    1020 => "000011000111", 1021 => "000011010100", 1022 => "000011100001", 
    1023 => "000011110000" );
signal mem3 : mem_array := (
    0 => "000100000000", 1 => "000100010000", 2 => "000100100010", 
    3 => "000100110100", 4 => "000101001000", 5 => "000101011101", 
    6 => "000101110100", 7 => "000110001100", 8 => "000110100110", 
    9 => "000111000001", 10 => "000111011110", 11 => "000111111101", 
    12 => "001000011101", 13 => "001001000000", 14 => "001001100110", 
    15 => "001010001101", 16 => "001010110111", 17 => "001011100100", 
    18 => "001100010100", 19 => "001101000111", 20 => "001101111101", 
    21 => "001110110111", 22 => "001111110100", 23 => "010000110101", 
    24 => "010001111011", 25 => "010011000101", 26 => "010100010100", 
    27 => "010101100111", 28 => "010111000001", 29 => "011000100000", 
    30 => "011010000101", 31 => "011011110000", 32 => "011101100011", 
    33 => "011111011101", 34 => "100001011111", 35 => "100011101001", 
    36 => "100101111100", 37 => "101000011001", 38 => "101011000000", 
    39 => "101101110001", 40 => "110000101110", 41 => "110011110111", 
    42 => "110111001101", 43 => "111010110001", 44 => "111110100100", 
    45 => "000010100110", 46 => "000110111001", 47 => "001011011110", 
    48 => "010000010101", 49 => "010101100001", 50 => "011011000010", 
    51 => "100000111010", 52 => "100111001010", 53 => "101101110100", 
    54 => "110100111001", 55 => "111100011011", 56 => "000100011101", 
    57 => "001101000000", 58 => "010110000110", 59 => "011111110001", 
    60 => "101010000101", 61 => "110101000011", 62 => "000000101110", 
    63 => "001101001010", 64 => "011010011001", 65 => "101000011110", 
    66 => "110111011110", 67 => "000111011011", 68 => "011000011010", 
    69 => "101010100000", 70 => "111101110000", 71 => "010010010000", 
    72 => "101000000100", 73 => "111111010010", 74 => "011000000000", 
    75 => "110010010100", 76 => "001110010101", 77 => "101100001001", 
    78 => "001011111001", 79 => "101101101011", 80 => "010001101001", 
    81 => "110111111100", 82 => "100000101100", 83 => "001100000101", 
    84 => "111010010000", 85 => "101011011011", 86 => "011111110000", 
    87 => "010111011101", 88 => "010010110001", 89 => "010001111001", 
    90 => "010101000101", 91 => "011100100111", 92 => "101000110000", 
    93 => "111001110100", 94 => "010000000110", 95 => "101011111100", 
    96 => "001101101101", 97 => "110101110010", 98 => "100100100101", 
    99 => "011010100000", 100 => "011000000011", 101 => "011101101011", 
    102 => "101011111100", 103 => "000011010111", 104 => "100100100100", 
    105 => "010000001010", 106 => "000110110100", 107 => "001001010000", 
    108 => "011000001111", 109 => "110100100100", 110 => "011111000110", 
    111 => "011000110001", 112 => "100010100010", 113 => "111101011100", 
    114 => "101010100101", 115 => "101011001010", 116 => "000000011010", 
    117 => "101011101011", 118 => "101110010111", 119 => "001001111111", 
    120 => "000000001010", 121 => "010010100110", 122 => "000011000111", 
    123 => "010011101010", 124 => "000110010010", 125 => "011101001101", 
    126 => "011010101111", 127 => "000001011001", 128 => "010011110101", 
    129 => "010100110110", 130 => "000111011110", 131 => "101110111000", 
    132 => "001110100000", 133 => "101001111100", 134 => "000101000100", 
    135 => "100011111111", 136 => "001011000100", 137 => "111110111110", 
    138 => "000100101001", 139 => "100001010111", 140 => "011010110000", 
    141 => "110110110001", 142 => "111011110010", 143 => "110000100100", 
    144 => "011100010101", 145 => "000110110000", 146 => "110111111111", 
    147 => "111000101111", 148 => "010010010000", 149 => "001110011010", 
    150 => "110111101011", 151 => "011001001101", 152 => "111110111010", 
    153 => "110101011011", 154 => "001010001101", 155 => "001011101000", 
    156 => "001000111010", 157 => "010010010101", 158 => "111001001001", 
    159 => "001111110011", 160 => "101001110111", 161 => "011100001101", 
    162 => "111101000001", 163 => "100011111101", 164 => "101010001010", 
    165 => "101010011100", 166 => "000001010001", 167 => "001101000010", 
    168 => "101110000001", 169 => "000110100111", 170 => "111011011011", 
    171 => "110011011100", 172 => "011000000111", 173 => "010101101000", 
    174 => "011010111111", 175 => "011010001101", 176 => "001000100100", 
    177 => "011110110001", 178 => "011001001010", 179 => "111000000000", 
    180 => "111111101100", 181 => "111001000000", 182 => "110001011100", 
    183 => "111011100010", 184 => "101111000110", 185 => "101001100100", 
    186 => "001110100000", 187 => "000111110010", 188 => "000110010000", 
    189 => "000001111000", 190 => "111010011000", 191 => "110111111100", 
    192 => "001011001100", 193 => "001110010100", 194 => "100101011000", 
    195 => "111111000000", 196 => "010101001000", 197 => "101101101100", 
    198 => "011011010100", 199 => "111110001100", 200 => "000101001000", 
    201 => "101110010000", 202 => "000111111000", 203 => "110010010000", 
    204 => "011111101000", 205 => "010110011000", 206 => "110001110000", 
    207 => "100011101000", 208 => "110101101000", 209 => "001010011000", 
    210 => "100000010000", 211 => "010001110000", 212 => "011000010000", 
    213 => "001101110000", 214 => "101110110000", 215 => "011101000000", 
    216 => "100001100000", 217 => "101110110000", 218 => "100100000000", 
    219 => "010000010000", 220 => "110100110000", 221 => "001000000000", 
    222 => "111010000000", 223 => "111000100000", 224 => "110001000000", 
    225 => "010110100000", 226 => "100100100000", 227 => "100110100000", 
    228 => "111010000000", 229 => "010100100000", 230 => "001011100000", 
    231 => "011000000000", 232 => "011101000000", 233 => "110001000000", 
    234 => "100010000000", 235 => "000001000000", 236 => "100101000000", 
    237 => "111010000000", 238 => "000111000000", 239 => "110110000000", 
    240 => "100101000000", 241 => "101100000000", 242 => "101000000000", 
    243 => "001111000000", 244 => "110110000000", 245 => "100100000000", 
    246 => "100000000000", 247 => "000100000000", 248 => "001010000000", 
    249 => "100000000000", 250 => "000010000000", 251 => "000110000000", 
    252 => "111000000000", 253 => "110010000000", 254 => "110100000000", 
    255 => "000010000000", 256 to 257=> "111100000000", 258 => "001000000000", 
    259 => "011100000000", 260 => "100000000000", 261 => "000100000000", 
    262 => "111100000000", 263 => "010100000000", 264 => "111100000000", 
    265 => "101000000000", 266 => "000000000000", 267 => "110000000000", 
    268 to 269=> "100000000000", 270 => "111000000000", 271 => "011000000000", 
    272 => "100000000000", 273 => "111000000000", 274 => "110000000000", 
    275 => "001000000000", 276 => "011000000000", 277 => "001000000000", 
    278 => "000000000000", 279 => "010000000000", 280 to 282=> "000000000000", 
    283 to 284=> "010000000000", 285 => "110000000000", 286 => "000000000000", 
    287 => "100000000000", 288 to 292=> "000000000000", 293 => "100000000000", 
    294 => "000000000000", 295 to 296=> "100000000000", 297 => "000000000000", 
    298 to 299=> "100000000000", 300 to 935=> "000000000000", 936 to 946=> "000000000001", 
    947 to 952=> "000000000010", 953 to 957=> "000000000011", 958 to 961=> "000000000100", 
    962 to 963=> "000000000101", 964 to 966=> "000000000110", 967 to 968=> "000000000111", 
    969 to 970=> "000000001000", 971 to 972=> "000000001001", 973 => "000000001010", 
    974 to 975=> "000000001011", 976 => "000000001100", 977 => "000000001101", 
    978 => "000000001110", 979 => "000000001111", 980 => "000000010000", 
    981 => "000000010001", 982 => "000000010010", 983 => "000000010011", 
    984 => "000000010101", 985 => "000000010110", 986 => "000000010111", 
    987 => "000000011001", 988 => "000000011010", 989 => "000000011100", 
    990 => "000000011110", 991 => "000000100000", 992 => "000000100010", 
    993 => "000000100100", 994 => "000000100111", 995 => "000000101001", 
    996 => "000000101100", 997 => "000000101111", 998 => "000000110010", 
    999 => "000000110101", 1000 => "000000111001", 1001 => "000000111100", 
    1002 => "000001000000", 1003 => "000001000100", 1004 => "000001001001", 
    1005 => "000001001110", 1006 => "000001010011", 1007 => "000001011000", 
    1008 => "000001011110", 1009 => "000001100100", 1010 => "000001101010", 
    1011 => "000001110001", 1012 => "000001111000", 1013 => "000010000000", 
    1014 => "000010001001", 1015 => "000010010001", 1016 => "000010011011", 
    1017 => "000010100101", 1018 => "000010101111", 1019 => "000010111011", 
    1020 => "000011000111", 1021 => "000011010100", 1022 => "000011100001", 
    1023 => "000011110000" );
signal mem4 : mem_array := (
    0 => "000100000000", 1 => "000100010000", 2 => "000100100010", 
    3 => "000100110100", 4 => "000101001000", 5 => "000101011101", 
    6 => "000101110100", 7 => "000110001100", 8 => "000110100110", 
    9 => "000111000001", 10 => "000111011110", 11 => "000111111101", 
    12 => "001000011101", 13 => "001001000000", 14 => "001001100110", 
    15 => "001010001101", 16 => "001010110111", 17 => "001011100100", 
    18 => "001100010100", 19 => "001101000111", 20 => "001101111101", 
    21 => "001110110111", 22 => "001111110100", 23 => "010000110101", 
    24 => "010001111011", 25 => "010011000101", 26 => "010100010100", 
    27 => "010101100111", 28 => "010111000001", 29 => "011000100000", 
    30 => "011010000101", 31 => "011011110000", 32 => "011101100011", 
    33 => "011111011101", 34 => "100001011111", 35 => "100011101001", 
    36 => "100101111100", 37 => "101000011001", 38 => "101011000000", 
    39 => "101101110001", 40 => "110000101110", 41 => "110011110111", 
    42 => "110111001101", 43 => "111010110001", 44 => "111110100100", 
    45 => "000010100110", 46 => "000110111001", 47 => "001011011110", 
    48 => "010000010101", 49 => "010101100001", 50 => "011011000010", 
    51 => "100000111010", 52 => "100111001010", 53 => "101101110100", 
    54 => "110100111001", 55 => "111100011011", 56 => "000100011101", 
    57 => "001101000000", 58 => "010110000110", 59 => "011111110001", 
    60 => "101010000101", 61 => "110101000011", 62 => "000000101110", 
    63 => "001101001010", 64 => "011010011001", 65 => "101000011110", 
    66 => "110111011110", 67 => "000111011011", 68 => "011000011010", 
    69 => "101010100000", 70 => "111101110000", 71 => "010010010000", 
    72 => "101000000100", 73 => "111111010010", 74 => "011000000000", 
    75 => "110010010100", 76 => "001110010101", 77 => "101100001001", 
    78 => "001011111001", 79 => "101101101011", 80 => "010001101001", 
    81 => "110111111100", 82 => "100000101100", 83 => "001100000101", 
    84 => "111010010000", 85 => "101011011011", 86 => "011111110000", 
    87 => "010111011101", 88 => "010010110001", 89 => "010001111001", 
    90 => "010101000101", 91 => "011100100111", 92 => "101000110000", 
    93 => "111001110100", 94 => "010000000110", 95 => "101011111100", 
    96 => "001101101101", 97 => "110101110010", 98 => "100100100101", 
    99 => "011010100000", 100 => "011000000011", 101 => "011101101011", 
    102 => "101011111100", 103 => "000011010111", 104 => "100100100100", 
    105 => "010000001010", 106 => "000110110100", 107 => "001001010000", 
    108 => "011000001111", 109 => "110100100100", 110 => "011111000110", 
    111 => "011000110001", 112 => "100010100010", 113 => "111101011100", 
    114 => "101010100101", 115 => "101011001010", 116 => "000000011010", 
    117 => "101011101011", 118 => "101110010111", 119 => "001001111111", 
    120 => "000000001010", 121 => "010010100110", 122 => "000011000111", 
    123 => "010011101010", 124 => "000110010010", 125 => "011101001101", 
    126 => "011010101111", 127 => "000001011001", 128 => "010011110101", 
    129 => "010100110110", 130 => "000111011110", 131 => "101110111000", 
    132 => "001110100000", 133 => "101001111100", 134 => "000101000100", 
    135 => "100011111111", 136 => "001011000100", 137 => "111110111110", 
    138 => "000100101001", 139 => "100001010111", 140 => "011010110000", 
    141 => "110110110001", 142 => "111011110010", 143 => "110000100100", 
    144 => "011100010101", 145 => "000110110000", 146 => "110111111111", 
    147 => "111000101111", 148 => "010010010000", 149 => "001110011010", 
    150 => "110111101011", 151 => "011001001101", 152 => "111110111010", 
    153 => "110101011011", 154 => "001010001101", 155 => "001011101000", 
    156 => "001000111010", 157 => "010010010101", 158 => "111001001001", 
    159 => "001111110011", 160 => "101001110111", 161 => "011100001101", 
    162 => "111101000001", 163 => "100011111101", 164 => "101010001010", 
    165 => "101010011100", 166 => "000001010001", 167 => "001101000010", 
    168 => "101110000001", 169 => "000110100111", 170 => "111011011011", 
    171 => "110011011100", 172 => "011000000111", 173 => "010101101000", 
    174 => "011010111111", 175 => "011010001101", 176 => "001000100100", 
    177 => "011110110001", 178 => "011001001010", 179 => "111000000000", 
    180 => "111111101100", 181 => "111001000000", 182 => "110001011100", 
    183 => "111011100010", 184 => "101111000110", 185 => "101001100100", 
    186 => "001110100000", 187 => "000111110010", 188 => "000110010000", 
    189 => "000001111000", 190 => "111010011000", 191 => "110111111100", 
    192 => "001011001100", 193 => "001110010100", 194 => "100101011000", 
    195 => "111111000000", 196 => "010101001000", 197 => "101101101100", 
    198 => "011011010100", 199 => "111110001100", 200 => "000101001000", 
    201 => "101110010000", 202 => "000111111000", 203 => "110010010000", 
    204 => "011111101000", 205 => "010110011000", 206 => "110001110000", 
    207 => "100011101000", 208 => "110101101000", 209 => "001010011000", 
    210 => "100000010000", 211 => "010001110000", 212 => "011000010000", 
    213 => "001101110000", 214 => "101110110000", 215 => "011101000000", 
    216 => "100001100000", 217 => "101110110000", 218 => "100100000000", 
    219 => "010000010000", 220 => "110100110000", 221 => "001000000000", 
    222 => "111010000000", 223 => "111000100000", 224 => "110001000000", 
    225 => "010110100000", 226 => "100100100000", 227 => "100110100000", 
    228 => "111010000000", 229 => "010100100000", 230 => "001011100000", 
    231 => "011000000000", 232 => "011101000000", 233 => "110001000000", 
    234 => "100010000000", 235 => "000001000000", 236 => "100101000000", 
    237 => "111010000000", 238 => "000111000000", 239 => "110110000000", 
    240 => "100101000000", 241 => "101100000000", 242 => "101000000000", 
    243 => "001111000000", 244 => "110110000000", 245 => "100100000000", 
    246 => "100000000000", 247 => "000100000000", 248 => "001010000000", 
    249 => "100000000000", 250 => "000010000000", 251 => "000110000000", 
    252 => "111000000000", 253 => "110010000000", 254 => "110100000000", 
    255 => "000010000000", 256 to 257=> "111100000000", 258 => "001000000000", 
    259 => "011100000000", 260 => "100000000000", 261 => "000100000000", 
    262 => "111100000000", 263 => "010100000000", 264 => "111100000000", 
    265 => "101000000000", 266 => "000000000000", 267 => "110000000000", 
    268 to 269=> "100000000000", 270 => "111000000000", 271 => "011000000000", 
    272 => "100000000000", 273 => "111000000000", 274 => "110000000000", 
    275 => "001000000000", 276 => "011000000000", 277 => "001000000000", 
    278 => "000000000000", 279 => "010000000000", 280 to 282=> "000000000000", 
    283 to 284=> "010000000000", 285 => "110000000000", 286 => "000000000000", 
    287 => "100000000000", 288 to 292=> "000000000000", 293 => "100000000000", 
    294 => "000000000000", 295 to 296=> "100000000000", 297 => "000000000000", 
    298 to 299=> "100000000000", 300 to 935=> "000000000000", 936 to 946=> "000000000001", 
    947 to 952=> "000000000010", 953 to 957=> "000000000011", 958 to 961=> "000000000100", 
    962 to 963=> "000000000101", 964 to 966=> "000000000110", 967 to 968=> "000000000111", 
    969 to 970=> "000000001000", 971 to 972=> "000000001001", 973 => "000000001010", 
    974 to 975=> "000000001011", 976 => "000000001100", 977 => "000000001101", 
    978 => "000000001110", 979 => "000000001111", 980 => "000000010000", 
    981 => "000000010001", 982 => "000000010010", 983 => "000000010011", 
    984 => "000000010101", 985 => "000000010110", 986 => "000000010111", 
    987 => "000000011001", 988 => "000000011010", 989 => "000000011100", 
    990 => "000000011110", 991 => "000000100000", 992 => "000000100010", 
    993 => "000000100100", 994 => "000000100111", 995 => "000000101001", 
    996 => "000000101100", 997 => "000000101111", 998 => "000000110010", 
    999 => "000000110101", 1000 => "000000111001", 1001 => "000000111100", 
    1002 => "000001000000", 1003 => "000001000100", 1004 => "000001001001", 
    1005 => "000001001110", 1006 => "000001010011", 1007 => "000001011000", 
    1008 => "000001011110", 1009 => "000001100100", 1010 => "000001101010", 
    1011 => "000001110001", 1012 => "000001111000", 1013 => "000010000000", 
    1014 => "000010001001", 1015 => "000010010001", 1016 => "000010011011", 
    1017 => "000010100101", 1018 => "000010101111", 1019 => "000010111011", 
    1020 => "000011000111", 1021 => "000011010100", 1022 => "000011100001", 
    1023 => "000011110000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem0 : signal is "block_rom";
attribute syn_rom_style of mem1 : signal is "block_rom";
attribute syn_rom_style of mem2 : signal is "block_rom";
attribute syn_rom_style of mem3 : signal is "block_rom";
attribute syn_rom_style of mem4 : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem0 : signal is "block";
attribute ROM_STYLE of mem1 : signal is "block";
attribute ROM_STYLE of mem2 : signal is "block";
attribute ROM_STYLE of mem3 : signal is "block";
attribute ROM_STYLE of mem4 : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

memory_access_guard_2: process (addr2) 
begin
      addr2_tmp <= addr2;
--synthesis translate_off
      if (CONV_INTEGER(addr2) > mem_size-1) then
           addr2_tmp <= (others => '0');
      else 
           addr2_tmp <= addr2;
      end if;
--synthesis translate_on
end process;

memory_access_guard_3: process (addr3) 
begin
      addr3_tmp <= addr3;
--synthesis translate_off
      if (CONV_INTEGER(addr3) > mem_size-1) then
           addr3_tmp <= (others => '0');
      else 
           addr3_tmp <= addr3;
      end if;
--synthesis translate_on
end process;

memory_access_guard_4: process (addr4) 
begin
      addr4_tmp <= addr4;
--synthesis translate_off
      if (CONV_INTEGER(addr4) > mem_size-1) then
           addr4_tmp <= (others => '0');
      else 
           addr4_tmp <= addr4;
      end if;
--synthesis translate_on
end process;

memory_access_guard_5: process (addr5) 
begin
      addr5_tmp <= addr5;
--synthesis translate_off
      if (CONV_INTEGER(addr5) > mem_size-1) then
           addr5_tmp <= (others => '0');
      else 
           addr5_tmp <= addr5;
      end if;
--synthesis translate_on
end process;

memory_access_guard_6: process (addr6) 
begin
      addr6_tmp <= addr6;
--synthesis translate_off
      if (CONV_INTEGER(addr6) > mem_size-1) then
           addr6_tmp <= (others => '0');
      else 
           addr6_tmp <= addr6;
      end if;
--synthesis translate_on
end process;

memory_access_guard_7: process (addr7) 
begin
      addr7_tmp <= addr7;
--synthesis translate_off
      if (CONV_INTEGER(addr7) > mem_size-1) then
           addr7_tmp <= (others => '0');
      else 
           addr7_tmp <= addr7;
      end if;
--synthesis translate_on
end process;

memory_access_guard_8: process (addr8) 
begin
      addr8_tmp <= addr8;
--synthesis translate_off
      if (CONV_INTEGER(addr8) > mem_size-1) then
           addr8_tmp <= (others => '0');
      else 
           addr8_tmp <= addr8;
      end if;
--synthesis translate_on
end process;

memory_access_guard_9: process (addr9) 
begin
      addr9_tmp <= addr9;
--synthesis translate_off
      if (CONV_INTEGER(addr9) > mem_size-1) then
           addr9_tmp <= (others => '0');
      else 
           addr9_tmp <= addr9;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem0(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem0(CONV_INTEGER(addr1_tmp)); 
        end if;
        if (ce2 = '1') then 
            q2 <= mem1(CONV_INTEGER(addr2_tmp)); 
        end if;
        if (ce3 = '1') then 
            q3 <= mem1(CONV_INTEGER(addr3_tmp)); 
        end if;
        if (ce4 = '1') then 
            q4 <= mem2(CONV_INTEGER(addr4_tmp)); 
        end if;
        if (ce5 = '1') then 
            q5 <= mem2(CONV_INTEGER(addr5_tmp)); 
        end if;
        if (ce6 = '1') then 
            q6 <= mem3(CONV_INTEGER(addr6_tmp)); 
        end if;
        if (ce7 = '1') then 
            q7 <= mem3(CONV_INTEGER(addr7_tmp)); 
        end if;
        if (ce8 = '1') then 
            q8 <= mem4(CONV_INTEGER(addr8_tmp)); 
        end if;
        if (ce9 = '1') then 
            q9 <= mem4(CONV_INTEGER(addr9_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_exp_tabkb is
    generic (
        DataWidth : INTEGER := 12;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address2 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address3 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address4 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address5 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address6 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address7 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address8 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address9 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_exp_tabkb is
    component softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_exp_tabkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR;
            addr2 : IN STD_LOGIC_VECTOR;
            ce2 : IN STD_LOGIC;
            q2 : OUT STD_LOGIC_VECTOR;
            addr3 : IN STD_LOGIC_VECTOR;
            ce3 : IN STD_LOGIC;
            q3 : OUT STD_LOGIC_VECTOR;
            addr4 : IN STD_LOGIC_VECTOR;
            ce4 : IN STD_LOGIC;
            q4 : OUT STD_LOGIC_VECTOR;
            addr5 : IN STD_LOGIC_VECTOR;
            ce5 : IN STD_LOGIC;
            q5 : OUT STD_LOGIC_VECTOR;
            addr6 : IN STD_LOGIC_VECTOR;
            ce6 : IN STD_LOGIC;
            q6 : OUT STD_LOGIC_VECTOR;
            addr7 : IN STD_LOGIC_VECTOR;
            ce7 : IN STD_LOGIC;
            q7 : OUT STD_LOGIC_VECTOR;
            addr8 : IN STD_LOGIC_VECTOR;
            ce8 : IN STD_LOGIC;
            q8 : OUT STD_LOGIC_VECTOR;
            addr9 : IN STD_LOGIC_VECTOR;
            ce9 : IN STD_LOGIC;
            q9 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_exp_tabkb_rom_U :  component softmax_stable_ap_fixed_ap_fixed_softmax_config8_s_exp_tabkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1,
        addr2 => address2,
        ce2 => ce2,
        q2 => q2,
        addr3 => address3,
        ce3 => ce3,
        q3 => q3,
        addr4 => address4,
        ce4 => ce4,
        q4 => q4,
        addr5 => address5,
        ce5 => ce5,
        q5 => q5,
        addr6 => address6,
        ce6 => ce6,
        q6 => q6,
        addr7 => address7,
        ce7 => ce7,
        q7 => q7,
        addr8 => address8,
        ce8 => ce8,
        q8 => q8,
        addr9 => address9,
        ce9 => ce9,
        q9 => q9);

end architecture;


