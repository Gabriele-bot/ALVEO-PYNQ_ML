-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of myproject_axi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_axi,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=2.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.739000,HLS_SYN_LAT=880,HLS_SYN_TPT=none,HLS_SYN_MEM=418,HLS_SYN_DSP=10,HLS_SYN_FF=51332,HLS_SYN_LUT=188436,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_FFB : STD_LOGIC_VECTOR (11 downto 0) := "111111111011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_7 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000111";
    constant ap_const_lv13_187F : STD_LOGIC_VECTOR (12 downto 0) := "1100001111111";
    constant ap_const_lv6272_lc_2 : STD_LOGIC_VECTOR (6271 downto
    constant ap_const_lv32_187F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100001111111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv14_3FE8 : STD_LOGIC_VECTOR (13 downto 0) := "11111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln19_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln27_reg_1329 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1329_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal icmp_ln27_reg_1329_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal is_last_0_reg_250 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_262 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_262_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_0_reg_262_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_262_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i2_0_reg_274 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_reg_1185 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1185_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1185_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1185_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1185_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1185_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_317_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_1189 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_data_tmp_reg_1194 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_tmp_reg_1194_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_tmp_reg_1194_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal is_last_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_last_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln556_fu_342_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln556_reg_1205 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_17_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_reg_1210_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_reg_1215 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_364_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_1220 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_1220_pp0_iter2_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln571_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1225 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_388_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_reg_1238 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_394_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_reg_1243 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1248 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_2_fu_423_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1254 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_fu_430_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1259 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln583_fu_435_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln583_reg_1265 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln603_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_1275 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_1_fu_546_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_1_reg_1280 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln603_2_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_reg_1285 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_3_fu_603_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_3_reg_1290 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_610_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_reg_1295 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_30_fu_618_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_30_reg_1303 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln356_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_1309 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_1309_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln356_fu_672_p2 : STD_LOGIC_VECTOR (6271 downto 0);
    signal shl_ln356_reg_1317 : STD_LOGIC_VECTOR (6271 downto 0);
    signal and_ln356_fu_690_p2 : STD_LOGIC_VECTOR (6271 downto 0);
    signal and_ln356_reg_1323 : STD_LOGIC_VECTOR (6271 downto 0);
    signal icmp_ln27_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state11_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln27_reg_1329_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1329_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_747_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln935_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1338 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1338_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1338_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1338_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_815_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1343 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1343_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1343_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1343_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_829_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_4_reg_1348 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_4_reg_1348_pp1_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_4_reg_1348_pp1_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_837_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_reg_1356 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln30_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1361 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1361_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1361_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1361_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln944_fu_874_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln944_fu_880_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln944_reg_1373 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln947_fu_884_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln947_reg_1378 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln943_fu_888_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1383 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1383_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1383_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lsb_index_fu_892_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_1388 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln947_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_reg_1393 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_reg_1398 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln949_fu_939_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln949_reg_1403 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln958_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_1408 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_fu_950_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_955_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_reg_1418 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_5_reg_1423 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_2447_reg_1428 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_myproject_fu_285_ap_ready : STD_LOGIC;
    signal grp_myproject_fu_285_ap_done : STD_LOGIC;
    signal ap_sync_grp_myproject_fu_285_ap_ready : STD_LOGIC;
    signal ap_sync_grp_myproject_fu_285_ap_done : STD_LOGIC;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal grp_myproject_fu_285_layer8_out_0_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_myproject_fu_285_layer8_out_1_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_myproject_fu_285_layer8_out_2_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_myproject_fu_285_layer8_out_3_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_myproject_fu_285_layer8_out_4_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_myproject_fu_285_layer8_out_5_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_myproject_fu_285_layer8_out_6_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_myproject_fu_285_layer8_out_7_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_myproject_fu_285_layer8_out_8_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_myproject_fu_285_layer8_out_9_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_myproject_fu_285_ap_start : STD_LOGIC;
    signal grp_myproject_fu_285_layer8_out_0_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_285_layer8_out_1_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_285_layer8_out_2_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_285_layer8_out_3_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_285_layer8_out_4_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_285_layer8_out_5_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_285_layer8_out_6_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_285_layer8_out_7_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_285_layer8_out_8_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_285_layer8_out_9_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_285_ap_idle : STD_LOGIC;
    signal grp_myproject_fu_285_ap_continue : STD_LOGIC;
    signal ap_phi_mux_is_last_0_phi_fu_254_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_i_0_phi_fu_266_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_myproject_fu_285_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_sync_reg_grp_myproject_fu_285_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_myproject_fu_285_ap_done : STD_LOGIC := '0';
    signal in_local_V_fu_188 : STD_LOGIC_VECTOR (6271 downto 0);
    signal out_local_0_fu_192 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_local_1_fu_196 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_local_2_fu_200 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_local_3_fu_204 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_local_4_fu_208 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_local_5_fu_212 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_local_6_fu_216 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_local_7_fu_220 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_local_8_fu_224 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_local_9_fu_228 : STD_LOGIC_VECTOR (13 downto 0);
    signal in_local_V_1_fu_730_p2 : STD_LOGIC_VECTOR (6271 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal grp_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln461_fu_368_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_376_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_406_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_18_fu_413_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_417_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_2441_fu_445_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln696_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2442_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_1_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_472_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln582_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_1_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_572_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_576_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln581_fu_566_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln604_fu_585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln586_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_fu_590_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_2_fu_597_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln356_fu_633_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln356_fu_638_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln356_2_fu_648_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln356_1_fu_643_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln356_1_fu_654_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln356_fu_630_p1 : STD_LOGIC_VECTOR (6271 downto 0);
    signal zext_ln356_1_fu_660_p1 : STD_LOGIC_VECTOR (6271 downto 0);
    signal zext_ln356_2_fu_664_p1 : STD_LOGIC_VECTOR (6271 downto 0);
    signal zext_ln356_3_fu_668_p1 : STD_LOGIC_VECTOR (6271 downto 0);
    signal shl_ln356_1_fu_678_p2 : STD_LOGIC_VECTOR (6271 downto 0);
    signal lshr_ln356_fu_684_p2 : STD_LOGIC_VECTOR (6271 downto 0);
    signal tmp_2443_fu_699_p4 : STD_LOGIC_VECTOR (6271 downto 0);
    signal xor_ln356_fu_714_p2 : STD_LOGIC_VECTOR (6271 downto 0);
    signal select_ln356_3_fu_708_p3 : STD_LOGIC_VECTOR (6271 downto 0);
    signal and_ln356_1_fu_719_p2 : STD_LOGIC_VECTOR (6271 downto 0);
    signal and_ln356_2_fu_725_p2 : STD_LOGIC_VECTOR (6271 downto 0);
    signal tmp_V_3_fu_783_p12 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_823_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln30_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_859_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_866_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2445_fu_897_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_fu_913_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln947_fu_918_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln947_fu_922_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_15_fu_928_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2446_fu_964_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_977_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln957_1_fu_1006_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_1009_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln958_1_fu_1018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln958_fu_1014_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln958_fu_1021_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_995_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln961_fu_1034_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_1027_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_1038_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln964_fu_1072_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_fu_1065_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_1077_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_6_fu_1062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_1083_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_21_fu_1090_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln738_fu_1102_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_1106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_308_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal regslice_both_out_data_U_apdone_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_in_data_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_data_U_ack_in : STD_LOGIC;
    signal regslice_both_in_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_last_V_U_ack_in : STD_LOGIC;
    signal out_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r_TVALID_int : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_data_U_vld_out : STD_LOGIC;
    signal regslice_both_out_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_last_V_U_vld_out : STD_LOGIC;

    component myproject IS
    port (
        layer0_V : IN STD_LOGIC_VECTOR (6271 downto 0);
        layer8_out_0_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        layer8_out_1_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        layer8_out_2_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        layer8_out_3_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        layer8_out_4_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        layer8_out_5_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        layer8_out_6_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        layer8_out_7_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        layer8_out_8_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        layer8_out_9_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        layer0_V_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        layer8_out_0_V_ap_vld : OUT STD_LOGIC;
        layer8_out_1_V_ap_vld : OUT STD_LOGIC;
        layer8_out_2_V_ap_vld : OUT STD_LOGIC;
        layer8_out_3_V_ap_vld : OUT STD_LOGIC;
        layer8_out_4_V_ap_vld : OUT STD_LOGIC;
        layer8_out_5_V_ap_vld : OUT STD_LOGIC;
        layer8_out_6_V_ap_vld : OUT STD_LOGIC;
        layer8_out_7_V_ap_vld : OUT STD_LOGIC;
        layer8_out_8_V_ap_vld : OUT STD_LOGIC;
        layer8_out_9_V_ap_vld : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component myproject_axi_fpext_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component myproject_axi_mux_104_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        din4 : IN STD_LOGIC_VECTOR (13 downto 0);
        din5 : IN STD_LOGIC_VECTOR (13 downto 0);
        din6 : IN STD_LOGIC_VECTOR (13 downto 0);
        din7 : IN STD_LOGIC_VECTOR (13 downto 0);
        din8 : IN STD_LOGIC_VECTOR (13 downto 0);
        din9 : IN STD_LOGIC_VECTOR (13 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_myproject_fu_285 : component myproject
    port map (
        layer0_V => in_local_V_fu_188,
        layer8_out_0_V => grp_myproject_fu_285_layer8_out_0_V,
        layer8_out_1_V => grp_myproject_fu_285_layer8_out_1_V,
        layer8_out_2_V => grp_myproject_fu_285_layer8_out_2_V,
        layer8_out_3_V => grp_myproject_fu_285_layer8_out_3_V,
        layer8_out_4_V => grp_myproject_fu_285_layer8_out_4_V,
        layer8_out_5_V => grp_myproject_fu_285_layer8_out_5_V,
        layer8_out_6_V => grp_myproject_fu_285_layer8_out_6_V,
        layer8_out_7_V => grp_myproject_fu_285_layer8_out_7_V,
        layer8_out_8_V => grp_myproject_fu_285_layer8_out_8_V,
        layer8_out_9_V => grp_myproject_fu_285_layer8_out_9_V,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        layer0_V_ap_vld => ap_const_logic_1,
        ap_start => grp_myproject_fu_285_ap_start,
        layer8_out_0_V_ap_vld => grp_myproject_fu_285_layer8_out_0_V_ap_vld,
        layer8_out_1_V_ap_vld => grp_myproject_fu_285_layer8_out_1_V_ap_vld,
        layer8_out_2_V_ap_vld => grp_myproject_fu_285_layer8_out_2_V_ap_vld,
        layer8_out_3_V_ap_vld => grp_myproject_fu_285_layer8_out_3_V_ap_vld,
        layer8_out_4_V_ap_vld => grp_myproject_fu_285_layer8_out_4_V_ap_vld,
        layer8_out_5_V_ap_vld => grp_myproject_fu_285_layer8_out_5_V_ap_vld,
        layer8_out_6_V_ap_vld => grp_myproject_fu_285_layer8_out_6_V_ap_vld,
        layer8_out_7_V_ap_vld => grp_myproject_fu_285_layer8_out_7_V_ap_vld,
        layer8_out_8_V_ap_vld => grp_myproject_fu_285_layer8_out_8_V_ap_vld,
        layer8_out_9_V_ap_vld => grp_myproject_fu_285_layer8_out_9_V_ap_vld,
        ap_done => grp_myproject_fu_285_ap_done,
        ap_ready => grp_myproject_fu_285_ap_ready,
        ap_idle => grp_myproject_fu_285_ap_idle,
        ap_continue => grp_myproject_fu_285_ap_continue);

    myproject_axi_fpext_32ns_64_2_1_U2333 : component myproject_axi_fpext_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in_r_TDATA_int,
        ce => grp_fu_308_ce,
        dout => grp_fu_308_p1);

    myproject_axi_mux_104_14_1_1_U2334 : component myproject_axi_mux_104_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        din3_WIDTH => 14,
        din4_WIDTH => 14,
        din5_WIDTH => 14,
        din6_WIDTH => 14,
        din7_WIDTH => 14,
        din8_WIDTH => 14,
        din9_WIDTH => 14,
        din10_WIDTH => 4,
        dout_WIDTH => 14)
    port map (
        din0 => out_local_0_fu_192,
        din1 => out_local_1_fu_196,
        din2 => out_local_2_fu_200,
        din3 => out_local_3_fu_204,
        din4 => out_local_4_fu_208,
        din5 => out_local_5_fu_212,
        din6 => out_local_6_fu_216,
        din7 => out_local_7_fu_220,
        din8 => out_local_8_fu_224,
        din9 => out_local_9_fu_228,
        din10 => i2_0_reg_274,
        dout => tmp_V_3_fu_783_p12);

    regslice_both_in_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_data_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_data_U_apdone_blk);

    regslice_both_in_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_last_V_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => regslice_both_in_last_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_last_V_U_apdone_blk);

    regslice_both_out_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int,
        vld_in => out_r_TVALID_int,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_data_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_data_U_apdone_blk);

    regslice_both_out_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => and_ln30_reg_1361_pp1_iter3_reg,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                elsif (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_myproject_fu_285_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_myproject_fu_285_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_sync_reg_grp_myproject_fu_285_ap_done <= ap_const_logic_0;
                elsif ((grp_myproject_fu_285_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_myproject_fu_285_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_myproject_fu_285_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_myproject_fu_285_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_sync_reg_grp_myproject_fu_285_ap_ready <= ap_const_logic_0;
                elsif ((grp_myproject_fu_285_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_myproject_fu_285_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_myproject_fu_285_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_myproject_fu_285_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_sync_grp_myproject_fu_285_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
                    grp_myproject_fu_285_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_myproject_fu_285_ap_ready = ap_const_logic_1)) then 
                    grp_myproject_fu_285_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_0_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_741_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i2_0_reg_274 <= i_1_fu_747_p2;
            elsif (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i2_0_reg_274 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_0_reg_262 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1185 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_262 <= i_reg_1189;
            end if; 
        end if;
    end process;

    is_last_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                is_last_0_reg_250 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1185 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                is_last_0_reg_250 <= is_last_reg_1200;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1185_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln581_reg_1238 <= add_ln581_fu_388_p2;
                icmp_ln571_reg_1225 <= icmp_ln571_fu_371_p2;
                icmp_ln581_reg_1231 <= icmp_ln581_fu_382_p2;
                icmp_ln582_reg_1248 <= icmp_ln582_fu_400_p2;
                sub_ln581_reg_1243 <= sub_ln581_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1338_pp1_iter1_reg = ap_const_lv1_0) and (icmp_ln27_reg_1329_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln949_reg_1403 <= add_ln949_fu_939_p2;
                add_ln958_reg_1413 <= add_ln958_fu_950_p2;
                icmp_ln947_1_reg_1398 <= icmp_ln947_1_fu_933_p2;
                icmp_ln947_reg_1393 <= icmp_ln947_fu_907_p2;
                icmp_ln958_reg_1408 <= icmp_ln958_fu_944_p2;
                lsb_index_reg_1388 <= lsb_index_fu_892_p2;
                sub_ln958_reg_1418 <= sub_ln958_fu_955_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_741_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                and_ln30_reg_1361 <= and_ln30_fu_853_p2;
                icmp_ln935_reg_1338 <= icmp_ln935_fu_809_p2;
                p_Result_19_reg_1343 <= tmp_V_3_fu_783_p12(13 downto 13);
                p_Result_s_reg_1356 <= p_Result_s_fu_837_p4;
                tmp_V_4_reg_1348 <= tmp_V_4_fu_829_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                and_ln30_reg_1361_pp1_iter1_reg <= and_ln30_reg_1361;
                icmp_ln27_reg_1329 <= icmp_ln27_fu_741_p2;
                icmp_ln27_reg_1329_pp1_iter1_reg <= icmp_ln27_reg_1329;
                icmp_ln935_reg_1338_pp1_iter1_reg <= icmp_ln935_reg_1338;
                p_Result_19_reg_1343_pp1_iter1_reg <= p_Result_19_reg_1343;
                tmp_V_4_reg_1348_pp1_iter1_reg <= tmp_V_4_reg_1348;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                and_ln30_reg_1361_pp1_iter2_reg <= and_ln30_reg_1361_pp1_iter1_reg;
                and_ln30_reg_1361_pp1_iter3_reg <= and_ln30_reg_1361_pp1_iter2_reg;
                icmp_ln27_reg_1329_pp1_iter2_reg <= icmp_ln27_reg_1329_pp1_iter1_reg;
                icmp_ln27_reg_1329_pp1_iter3_reg <= icmp_ln27_reg_1329_pp1_iter2_reg;
                icmp_ln27_reg_1329_pp1_iter4_reg <= icmp_ln27_reg_1329_pp1_iter3_reg;
                icmp_ln935_reg_1338_pp1_iter2_reg <= icmp_ln935_reg_1338_pp1_iter1_reg;
                icmp_ln935_reg_1338_pp1_iter3_reg <= icmp_ln935_reg_1338_pp1_iter2_reg;
                p_Result_19_reg_1343_pp1_iter2_reg <= p_Result_19_reg_1343_pp1_iter1_reg;
                p_Result_19_reg_1343_pp1_iter3_reg <= p_Result_19_reg_1343_pp1_iter2_reg;
                tmp_V_4_reg_1348_pp1_iter2_reg <= tmp_V_4_reg_1348_pp1_iter1_reg;
                trunc_ln943_reg_1383_pp1_iter2_reg <= trunc_ln943_reg_1383;
                trunc_ln943_reg_1383_pp1_iter3_reg <= trunc_ln943_reg_1383_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1185_pp0_iter4_reg = ap_const_lv1_0))) then
                and_ln356_reg_1323 <= and_ln356_fu_690_p2;
                shl_ln356_reg_1317 <= shl_ln356_fu_672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1185_pp0_iter2_reg = ap_const_lv1_0))) then
                and_ln603_reg_1270 <= and_ln603_fu_534_p2;
                man_V_2_reg_1254 <= man_V_2_fu_423_p3;
                or_ln603_2_reg_1285 <= or_ln603_2_fu_560_p2;
                or_ln603_reg_1275 <= or_ln603_fu_540_p2;
                select_ln603_1_reg_1280 <= select_ln603_1_fu_546_p3;
                sh_amt_reg_1259 <= sh_amt_fu_430_p3;
                trunc_ln583_reg_1265 <= trunc_ln583_fu_435_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1185_pp0_iter3_reg = ap_const_lv1_0))) then
                    empty_30_reg_1303(12 downto 3) <= empty_30_fu_618_p2(12 downto 3);
                icmp_ln356_reg_1309 <= icmp_ln356_fu_624_p2;
                select_ln603_3_reg_1290 <= select_ln603_3_fu_603_p3;
                    shl_ln_reg_1295(12 downto 3) <= shl_ln_fu_610_p3(12 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1185 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_tmp_V_reg_1215 <= ireg_V_fu_338_p1(62 downto 52);
                p_Result_17_reg_1210 <= ireg_V_fu_338_p1(63 downto 63);
                trunc_ln556_reg_1205 <= trunc_ln556_fu_342_p1;
                trunc_ln565_reg_1220 <= trunc_ln565_fu_364_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_0_reg_262_pp0_iter1_reg <= i_0_reg_262;
                icmp_ln19_reg_1185 <= icmp_ln19_fu_311_p2;
                icmp_ln19_reg_1185_pp0_iter1_reg <= icmp_ln19_reg_1185;
                in_data_tmp_reg_1194_pp0_iter1_reg <= in_data_tmp_reg_1194;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i_0_reg_262_pp0_iter2_reg <= i_0_reg_262_pp0_iter1_reg;
                i_0_reg_262_pp0_iter3_reg <= i_0_reg_262_pp0_iter2_reg;
                icmp_ln19_reg_1185_pp0_iter2_reg <= icmp_ln19_reg_1185_pp0_iter1_reg;
                icmp_ln19_reg_1185_pp0_iter3_reg <= icmp_ln19_reg_1185_pp0_iter2_reg;
                icmp_ln19_reg_1185_pp0_iter4_reg <= icmp_ln19_reg_1185_pp0_iter3_reg;
                icmp_ln19_reg_1185_pp0_iter5_reg <= icmp_ln19_reg_1185_pp0_iter4_reg;
                icmp_ln356_reg_1309_pp0_iter5_reg <= icmp_ln356_reg_1309;
                in_data_tmp_reg_1194_pp0_iter2_reg <= in_data_tmp_reg_1194_pp0_iter1_reg;
                p_Result_17_reg_1210_pp0_iter2_reg <= p_Result_17_reg_1210;
                trunc_ln565_reg_1220_pp0_iter2_reg <= trunc_ln565_reg_1220;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_1189 <= i_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_fu_311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_data_tmp_reg_1194 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1185_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                in_local_V_fu_188 <= in_local_V_1_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_fu_311_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                is_last_reg_1200 <= is_last_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1338_pp1_iter2_reg = ap_const_lv1_0) and (icmp_ln27_reg_1329_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                m_5_reg_1423 <= m_2_fu_1038_p2(63 downto 1);
                tmp_2447_reg_1428 <= m_2_fu_1038_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_285_layer8_out_0_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                out_local_0_fu_192 <= grp_myproject_fu_285_layer8_out_0_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_285_layer8_out_1_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                out_local_1_fu_196 <= grp_myproject_fu_285_layer8_out_1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_285_layer8_out_2_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                out_local_2_fu_200 <= grp_myproject_fu_285_layer8_out_2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_285_layer8_out_3_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                out_local_3_fu_204 <= grp_myproject_fu_285_layer8_out_3_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_285_layer8_out_4_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                out_local_4_fu_208 <= grp_myproject_fu_285_layer8_out_4_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_285_layer8_out_5_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                out_local_5_fu_212 <= grp_myproject_fu_285_layer8_out_5_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_285_layer8_out_6_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                out_local_6_fu_216 <= grp_myproject_fu_285_layer8_out_6_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_285_layer8_out_7_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                out_local_7_fu_220 <= grp_myproject_fu_285_layer8_out_7_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_285_layer8_out_8_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                out_local_8_fu_224 <= grp_myproject_fu_285_layer8_out_8_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_285_layer8_out_9_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                out_local_9_fu_228 <= grp_myproject_fu_285_layer8_out_9_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_1329 = ap_const_lv1_0) and (icmp_ln935_reg_1338 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sub_ln944_reg_1366 <= sub_ln944_fu_874_p2;
                trunc_ln943_reg_1383 <= trunc_ln943_fu_888_p1;
                trunc_ln944_reg_1373 <= trunc_ln944_fu_880_p1;
                trunc_ln947_reg_1378 <= trunc_ln947_fu_884_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_1295(2 downto 0) <= "000";
    empty_30_reg_1303(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter0, icmp_ln19_fu_311_p2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, icmp_ln27_fu_741_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_CS_fsm_state17, regslice_both_out_data_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln19_fu_311_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln19_fu_311_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln27_fu_741_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln27_fu_741_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (regslice_both_out_data_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    F2_fu_376_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_368_p1));
    a_fu_960_p2 <= (icmp_ln947_reg_1393 and icmp_ln947_1_reg_1398);
    add_ln581_fu_388_p2 <= std_logic_vector(signed(ap_const_lv12_FFB) + signed(F2_fu_376_p2));
    add_ln949_fu_939_p2 <= std_logic_vector(signed(ap_const_lv14_3FE8) + signed(trunc_ln944_reg_1373));
    add_ln958_fu_950_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_1366));
    add_ln964_fu_1077_p2 <= std_logic_vector(unsigned(sub_ln964_fu_1072_p2) + unsigned(select_ln964_fu_1065_p3));
    and_ln30_fu_853_p2 <= (is_last_0_reg_250 and icmp_ln30_fu_847_p2);
    and_ln356_1_fu_719_p2 <= (xor_ln356_fu_714_p2 and in_local_V_fu_188);
    and_ln356_2_fu_725_p2 <= (select_ln356_3_fu_708_p3 and and_ln356_reg_1323);
    and_ln356_fu_690_p2 <= (shl_ln356_1_fu_678_p2 and lshr_ln356_fu_684_p2);
    and_ln581_fu_500_p2 <= (xor_ln582_fu_494_p2 and icmp_ln581_reg_1231);
    and_ln582_fu_485_p2 <= (xor_ln571_fu_480_p2 and icmp_ln582_reg_1248);
    and_ln585_1_fu_517_p2 <= (icmp_ln585_fu_439_p2 and and_ln581_fu_500_p2);
    and_ln585_fu_511_p2 <= (xor_ln585_fu_505_p2 and and_ln581_fu_500_p2);
    and_ln603_fu_534_p2 <= (xor_ln581_fu_528_p2 and icmp_ln603_fu_455_p2);
    and_ln949_fu_983_p2 <= (xor_ln949_fu_971_p2 and p_Result_4_fu_977_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(3);
    ap_CS_fsm_state17 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln19_fu_311_p2, in_r_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln19_fu_311_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln19_fu_311_p2, in_r_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln19_fu_311_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_block_state15_io, ap_block_state16_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_block_state15_io, ap_block_state16_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)));
    end process;


    ap_block_state10_on_subcall_done_assign_proc : process(ap_sync_grp_myproject_fu_285_ap_ready, ap_sync_grp_myproject_fu_285_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((ap_sync_grp_myproject_fu_285_ap_ready and ap_sync_grp_myproject_fu_285_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state11_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(icmp_ln27_reg_1329_pp1_iter3_reg, out_r_TREADY_int)
    begin
                ap_block_state15_io <= ((icmp_ln27_reg_1329_pp1_iter3_reg = ap_const_lv1_0) and (out_r_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state15_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(icmp_ln27_reg_1329_pp1_iter4_reg, out_r_TREADY_int)
    begin
                ap_block_state16_io <= ((icmp_ln27_reg_1329_pp1_iter4_reg = ap_const_lv1_0) and (out_r_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state16_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln19_fu_311_p2, in_r_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln19_fu_311_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln19_fu_311_p2)
    begin
        if ((icmp_ln19_fu_311_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state11_assign_proc : process(icmp_ln27_fu_741_p2)
    begin
        if ((icmp_ln27_fu_741_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_266_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_0_reg_262, icmp_ln19_reg_1185, i_reg_1189, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln19_reg_1185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_266_p4 <= i_reg_1189;
        else 
            ap_phi_mux_i_0_phi_fu_266_p4 <= i_0_reg_262;
        end if; 
    end process;


    ap_phi_mux_is_last_0_phi_fu_254_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, is_last_0_reg_250, icmp_ln19_reg_1185, is_last_reg_1200, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln19_reg_1185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_is_last_0_phi_fu_254_p4 <= is_last_reg_1200;
        else 
            ap_phi_mux_is_last_0_phi_fu_254_p4 <= is_last_0_reg_250;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_myproject_fu_285_ap_done <= (grp_myproject_fu_285_ap_done or ap_sync_reg_grp_myproject_fu_285_ap_done);
    ap_sync_grp_myproject_fu_285_ap_ready <= (grp_myproject_fu_285_ap_ready or ap_sync_reg_grp_myproject_fu_285_ap_ready);
    ashr_ln586_fu_576_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_1254),to_integer(unsigned('0' & zext_ln586_fu_572_p1(31-1 downto 0)))));
    bitcast_ln696_fu_461_p1 <= in_data_tmp_reg_1194_pp0_iter2_reg;
    bitcast_ln739_fu_1106_p1 <= trunc_ln738_fu_1102_p1;
    empty_30_fu_618_p2 <= (shl_ln_fu_610_p3 or ap_const_lv13_7);

    grp_fu_308_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_308_ce <= ap_const_logic_1;
        else 
            grp_fu_308_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_myproject_fu_285_ap_continue_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_myproject_fu_285_ap_continue <= ap_const_logic_1;
        else 
            grp_myproject_fu_285_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_myproject_fu_285_ap_start <= grp_myproject_fu_285_ap_start_reg;
    i_1_fu_747_p2 <= std_logic_vector(unsigned(i2_0_reg_274) + unsigned(ap_const_lv4_1));
    i_fu_317_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_266_p4) + unsigned(ap_const_lv10_1));
    icmp_ln19_fu_311_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_266_p4 = ap_const_lv10_310) else "0";
    icmp_ln27_fu_741_p2 <= "1" when (i2_0_reg_274 = ap_const_lv4_A) else "0";
    icmp_ln30_fu_847_p2 <= "1" when (i2_0_reg_274 = ap_const_lv4_9) else "0";
    icmp_ln356_fu_624_p2 <= "1" when (unsigned(shl_ln_fu_610_p3) > unsigned(empty_30_fu_618_p2)) else "0";
    icmp_ln571_fu_371_p2 <= "1" when (trunc_ln556_reg_1205 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_382_p2 <= "1" when (signed(F2_fu_376_p2) > signed(ap_const_lv12_5)) else "0";
    icmp_ln582_fu_400_p2 <= "1" when (F2_fu_376_p2 = ap_const_lv12_5) else "0";
    icmp_ln585_fu_439_p2 <= "1" when (unsigned(sh_amt_fu_430_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_455_p2 <= "1" when (tmp_2441_fu_445_p4 = ap_const_lv9_0) else "0";
    icmp_ln935_fu_809_p2 <= "1" when (tmp_V_3_fu_783_p12 = ap_const_lv14_0) else "0";
    icmp_ln947_1_fu_933_p2 <= "0" when (p_Result_15_fu_928_p2 = ap_const_lv14_0) else "1";
    icmp_ln947_fu_907_p2 <= "1" when (signed(tmp_2445_fu_897_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_944_p2 <= "1" when (signed(lsb_index_fu_892_p2) > signed(ap_const_lv32_0)) else "0";
    in_local_V_1_fu_730_p2 <= (and_ln356_2_fu_725_p2 or and_ln356_1_fu_719_p2);

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln19_fu_311_p2, in_r_TVALID_int)
    begin
        if (((icmp_ln19_fu_311_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_data_U_ack_in)
    begin
        if (((in_r_TVALID = ap_const_logic_1) and (regslice_both_in_data_U_ack_in = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln19_fu_311_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_fu_311_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TREADY_int <= ap_const_logic_1;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_338_p1 <= grp_fu_308_p1;
    is_last_fu_332_p2 <= (in_r_TLAST_int or ap_phi_mux_is_last_0_phi_fu_254_p4);
    
    l_fu_866_p3_proc : process(p_Result_20_fu_859_p3)
    begin
        l_fu_866_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_20_fu_859_p3(i) = '1' then
                l_fu_866_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_892_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_reg_1366));
    lshr_ln356_fu_684_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv6272_lc_2),to_integer(unsigned('0' & zext_ln356_3_fu_668_p1(31-1 downto 0)))));
    lshr_ln947_fu_922_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv14_3FFF),to_integer(unsigned('0' & zext_ln947_fu_918_p1(14-1 downto 0)))));
    lshr_ln958_fu_1009_p2 <= std_logic_vector(shift_right(unsigned(zext_ln957_1_fu_1006_p1),to_integer(unsigned('0' & add_ln958_reg_1413(31-1 downto 0)))));
    m_1_fu_1027_p3 <= 
        zext_ln958_fu_1014_p1 when (icmp_ln958_reg_1408(0) = '1') else 
        shl_ln958_fu_1021_p2;
    m_2_fu_1038_p2 <= std_logic_vector(unsigned(zext_ln961_fu_1034_p1) + unsigned(m_1_fu_1027_p3));
    m_6_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_reg_1423),64));
    m_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_1348_pp1_iter2_reg),64));
    man_V_1_fu_417_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_18_fu_413_p1));
    man_V_2_fu_423_p3 <= 
        man_V_1_fu_417_p2 when (p_Result_17_reg_1210_pp0_iter2_reg(0) = '1') else 
        p_Result_18_fu_413_p1;
    or_ln581_fu_523_p2 <= (or_ln582_fu_490_p2 or icmp_ln581_reg_1231);
    or_ln582_fu_490_p2 <= (icmp_ln582_reg_1248 or icmp_ln571_reg_1225);
    or_ln603_1_fu_554_p2 <= (and_ln585_fu_511_p2 or and_ln582_fu_485_p2);
    or_ln603_2_fu_560_p2 <= (or_ln603_fu_540_p2 or or_ln603_1_fu_554_p2);
    or_ln603_fu_540_p2 <= (and_ln603_fu_534_p2 or and_ln585_1_fu_517_p2);
    or_ln949_fu_989_p2 <= (and_ln949_fu_983_p2 or a_fu_960_p2);
    or_ln_fu_995_p3 <= (ap_const_lv31_0 & or_ln949_fu_989_p2);

    out_r_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp1_iter4, ap_block_pp1_stage0, icmp_ln27_reg_1329_pp1_iter3_reg, ap_enable_reg_pp1_iter5, icmp_ln27_reg_1329_pp1_iter4_reg, out_r_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln27_reg_1329_pp1_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln27_reg_1329_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDATA_int <= 
        ap_const_lv32_0 when (icmp_ln935_reg_1338_pp1_iter3_reg(0) = '1') else 
        bitcast_ln739_fu_1106_p1;
    out_r_TVALID <= regslice_both_out_data_U_vld_out;

    out_r_TVALID_int_assign_proc : process(ap_enable_reg_pp1_iter4, icmp_ln27_reg_1329_pp1_iter3_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln27_reg_1329_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            out_r_TVALID_int <= ap_const_logic_1;
        else 
            out_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_15_fu_928_p2 <= (tmp_V_4_reg_1348_pp1_iter1_reg and lshr_ln947_fu_922_p2);
    p_Result_18_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_406_p3),54));
    p_Result_19_fu_815_p3 <= tmp_V_3_fu_783_p12(13 downto 13);
    p_Result_20_fu_859_p3 <= (ap_const_lv18_3FFFF & p_Result_s_reg_1356);
    p_Result_21_fu_1090_p5 <= (m_6_fu_1062_p1(63 downto 32) & tmp_21_fu_1083_p3 & m_6_fu_1062_p1(22 downto 0));
    p_Result_4_fu_977_p3 <= tmp_V_4_reg_1348_pp1_iter2_reg(to_integer(unsigned(add_ln949_reg_1403)) downto to_integer(unsigned(add_ln949_reg_1403))) when (to_integer(unsigned(add_ln949_reg_1403))>= 0 and to_integer(unsigned(add_ln949_reg_1403))<=13) else "-";
    
    p_Result_s_fu_837_p4_proc : process(tmp_V_4_fu_829_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_s_fu_837_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_829_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_s_fu_837_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_s_fu_837_p4_i) := tmp_V_4_fu_829_p3(14-1-p_Result_s_fu_837_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_837_p4 <= resvalue(14-1 downto 0);
    end process;

    select_ln356_1_fu_643_p3 <= 
        empty_30_reg_1303 when (icmp_ln356_reg_1309(0) = '1') else 
        shl_ln_reg_1295;
    select_ln356_2_fu_648_p3 <= 
        sub_ln356_fu_633_p2 when (icmp_ln356_reg_1309(0) = '1') else 
        shl_ln_reg_1295;
    select_ln356_3_fu_708_p3 <= 
        tmp_2443_fu_699_p4 when (icmp_ln356_reg_1309_pp0_iter5_reg(0) = '1') else 
        shl_ln356_reg_1317;
    select_ln356_fu_638_p3 <= 
        shl_ln_reg_1295 when (icmp_ln356_reg_1309(0) = '1') else 
        empty_30_reg_1303;
    select_ln588_fu_472_p3 <= 
        ap_const_lv8_FF when (tmp_2442_fu_464_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln603_1_fu_546_p3 <= 
        select_ln588_fu_472_p3 when (and_ln585_fu_511_p2(0) = '1') else 
        trunc_ln583_fu_435_p1;
    select_ln603_2_fu_597_p3 <= 
        select_ln603_fu_590_p3 when (or_ln603_reg_1275(0) = '1') else 
        select_ln603_1_reg_1280;
    select_ln603_3_fu_603_p3 <= 
        select_ln603_2_fu_597_p3 when (or_ln603_2_reg_1285(0) = '1') else 
        ap_const_lv8_0;
    select_ln603_fu_590_p3 <= 
        shl_ln604_fu_585_p2 when (and_ln603_reg_1270(0) = '1') else 
        trunc_ln586_fu_581_p1;
    select_ln964_fu_1065_p3 <= 
        ap_const_lv8_7F when (tmp_2447_reg_1428(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln581_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1259),32));

    sh_amt_fu_430_p3 <= 
        add_ln581_reg_1238 when (icmp_ln581_reg_1231(0) = '1') else 
        sub_ln581_reg_1243;
    shl_ln356_1_fu_678_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv6272_lc_2),to_integer(unsigned('0' & zext_ln356_2_fu_664_p1(31-1 downto 0)))));
    shl_ln356_fu_672_p2 <= std_logic_vector(shift_left(unsigned(zext_ln356_fu_630_p1),to_integer(unsigned('0' & zext_ln356_1_fu_660_p1(31-1 downto 0)))));
    shl_ln604_fu_585_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1265),to_integer(unsigned('0' & trunc_ln581_fu_566_p1(8-1 downto 0)))));
    shl_ln958_fu_1021_p2 <= std_logic_vector(shift_left(unsigned(m_fu_1003_p1),to_integer(unsigned('0' & zext_ln958_1_fu_1018_p1(31-1 downto 0)))));
    shl_ln_fu_610_p3 <= (i_0_reg_262_pp0_iter3_reg & ap_const_lv3_0);
    sub_ln356_1_fu_654_p2 <= std_logic_vector(signed(ap_const_lv13_187F) - signed(select_ln356_fu_638_p3));
    sub_ln356_fu_633_p2 <= std_logic_vector(signed(ap_const_lv13_187F) - signed(shl_ln_reg_1295));
    sub_ln581_fu_394_p2 <= std_logic_vector(unsigned(ap_const_lv12_5) - unsigned(F2_fu_376_p2));
    sub_ln944_fu_874_p2 <= std_logic_vector(unsigned(ap_const_lv32_E) - unsigned(l_fu_866_p3));
    sub_ln947_fu_913_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln947_reg_1378));
    sub_ln958_fu_955_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_1366));
    sub_ln964_fu_1072_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) - unsigned(trunc_ln943_reg_1383_pp1_iter3_reg));
    tmp_21_fu_1083_p3 <= (p_Result_19_reg_1343_pp1_iter3_reg & add_ln964_fu_1077_p2);
    tmp_2441_fu_445_p4 <= sh_amt_fu_430_p3(11 downto 3);
    tmp_2442_fu_464_p3 <= bitcast_ln696_fu_461_p1(31 downto 31);
    
    tmp_2443_fu_699_p4_proc : process(shl_ln356_reg_1317)
    variable vlo_cpy : STD_LOGIC_VECTOR(6272+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(6272+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(6272 - 1 downto 0);
    variable tmp_2443_fu_699_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(6272 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(6272 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(6272 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(13 - 1 downto 0) := ap_const_lv32_187F(13 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(13 - 1 downto 0) := ap_const_lv32_0(13 - 1 downto 0);
        v0_cpy := shl_ln356_reg_1317;
        if (vlo_cpy(13 - 1 downto 0) > vhi_cpy(13 - 1 downto 0)) then
            vhi_cpy(13-1 downto 0) := std_logic_vector(6272-1-unsigned(ap_const_lv32_0(13-1 downto 0)));
            vlo_cpy(13-1 downto 0) := std_logic_vector(6272-1-unsigned(ap_const_lv32_187F(13-1 downto 0)));
            for tmp_2443_fu_699_p4_i in 0 to 6272-1 loop
                v0_cpy(tmp_2443_fu_699_p4_i) := shl_ln356_reg_1317(6272-1-tmp_2443_fu_699_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(13-1 downto 0)))));

        section := (others=>'0');
        section(13-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(13-1 downto 0)) - unsigned(vlo_cpy(13-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(6272-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2443_fu_699_p4 <= resvalue(6272-1 downto 0);
    end process;

    tmp_2445_fu_897_p4 <= lsb_index_fu_892_p2(31 downto 1);
    tmp_2446_fu_964_p3 <= lsb_index_reg_1388(31 downto 31);
    tmp_V_4_fu_829_p3 <= 
        tmp_V_fu_823_p2 when (p_Result_19_fu_815_p3(0) = '1') else 
        tmp_V_3_fu_783_p12;
    tmp_V_fu_823_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(tmp_V_3_fu_783_p12));
    tmp_s_fu_406_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_1220_pp0_iter2_reg);
    trunc_ln556_fu_342_p1 <= ireg_V_fu_338_p1(63 - 1 downto 0);
    trunc_ln565_fu_364_p1 <= ireg_V_fu_338_p1(52 - 1 downto 0);
    trunc_ln581_fu_566_p1 <= sh_amt_reg_1259(8 - 1 downto 0);
    trunc_ln583_fu_435_p1 <= man_V_2_fu_423_p3(8 - 1 downto 0);
    trunc_ln586_fu_581_p1 <= ashr_ln586_fu_576_p2(8 - 1 downto 0);
    trunc_ln738_fu_1102_p1 <= p_Result_21_fu_1090_p5(32 - 1 downto 0);
    trunc_ln943_fu_888_p1 <= l_fu_866_p3(8 - 1 downto 0);
    trunc_ln944_fu_880_p1 <= sub_ln944_fu_874_p2(14 - 1 downto 0);
    trunc_ln947_fu_884_p1 <= sub_ln944_fu_874_p2(4 - 1 downto 0);
    xor_ln356_fu_714_p2 <= (ap_const_lv6272_lc_2 xor and_ln356_reg_1323);
    xor_ln571_fu_480_p2 <= (icmp_ln571_reg_1225 xor ap_const_lv1_1);
    xor_ln581_fu_528_p2 <= (or_ln581_fu_523_p2 xor ap_const_lv1_1);
    xor_ln582_fu_494_p2 <= (or_ln582_fu_490_p2 xor ap_const_lv1_1);
    xor_ln585_fu_505_p2 <= (icmp_ln585_fu_439_p2 xor ap_const_lv1_1);
    xor_ln949_fu_971_p2 <= (tmp_2446_fu_964_p3 xor ap_const_lv1_1);
    zext_ln356_1_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln356_2_fu_648_p3),6272));
    zext_ln356_2_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln356_1_fu_643_p3),6272));
    zext_ln356_3_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln356_1_fu_654_p2),6272));
    zext_ln356_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln603_3_reg_1290),6272));
    zext_ln461_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_1215),12));
    zext_ln586_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_569_p1),54));
    zext_ln947_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_913_p2),14));
    zext_ln957_1_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_1348_pp1_iter2_reg),32));
    zext_ln958_1_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln958_reg_1418),64));
    zext_ln958_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln958_fu_1009_p2),64));
    zext_ln961_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_995_p3),64));
end behav;
