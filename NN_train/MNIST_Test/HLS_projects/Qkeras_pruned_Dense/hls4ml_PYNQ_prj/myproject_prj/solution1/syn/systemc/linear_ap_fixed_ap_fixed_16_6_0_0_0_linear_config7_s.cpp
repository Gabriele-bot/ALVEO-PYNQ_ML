// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::ap_ST_fsm_state1 = "1";
const sc_lv<32> linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<6> linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::ap_const_lv6_0 = "000000";
const sc_lv<16> linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::ap_const_lv16_0 = "0000000000000000";
const bool linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::ap_const_boolean_1 = true;

linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln728_fu_112_p1 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln728_1_fu_124_p1 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln728_2_fu_136_p1 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln728_3_fu_148_p1 );
    sensitive << ( ap_return_3_preg );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln728_4_fu_160_p1 );
    sensitive << ( ap_return_4_preg );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln728_5_fu_172_p1 );
    sensitive << ( ap_return_5_preg );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln728_6_fu_184_p1 );
    sensitive << ( ap_return_6_preg );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln728_7_fu_196_p1 );
    sensitive << ( ap_return_7_preg );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln728_8_fu_208_p1 );
    sensitive << ( ap_return_8_preg );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln728_9_fu_220_p1 );
    sensitive << ( ap_return_9_preg );

    SC_METHOD(thread_sext_ln728_1_fu_124_p1);
    sensitive << ( shl_ln728_1_fu_116_p3 );

    SC_METHOD(thread_sext_ln728_2_fu_136_p1);
    sensitive << ( shl_ln728_2_fu_128_p3 );

    SC_METHOD(thread_sext_ln728_3_fu_148_p1);
    sensitive << ( shl_ln728_3_fu_140_p3 );

    SC_METHOD(thread_sext_ln728_4_fu_160_p1);
    sensitive << ( shl_ln728_4_fu_152_p3 );

    SC_METHOD(thread_sext_ln728_5_fu_172_p1);
    sensitive << ( shl_ln728_5_fu_164_p3 );

    SC_METHOD(thread_sext_ln728_6_fu_184_p1);
    sensitive << ( shl_ln728_6_fu_176_p3 );

    SC_METHOD(thread_sext_ln728_7_fu_196_p1);
    sensitive << ( shl_ln728_7_fu_188_p3 );

    SC_METHOD(thread_sext_ln728_8_fu_208_p1);
    sensitive << ( shl_ln728_8_fu_200_p3 );

    SC_METHOD(thread_sext_ln728_9_fu_220_p1);
    sensitive << ( shl_ln728_9_fu_212_p3 );

    SC_METHOD(thread_sext_ln728_fu_112_p1);
    sensitive << ( shl_ln_fu_104_p3 );

    SC_METHOD(thread_shl_ln728_1_fu_116_p3);
    sensitive << ( data_1_V_read );

    SC_METHOD(thread_shl_ln728_2_fu_128_p3);
    sensitive << ( data_2_V_read );

    SC_METHOD(thread_shl_ln728_3_fu_140_p3);
    sensitive << ( data_3_V_read );

    SC_METHOD(thread_shl_ln728_4_fu_152_p3);
    sensitive << ( data_4_V_read );

    SC_METHOD(thread_shl_ln728_5_fu_164_p3);
    sensitive << ( data_5_V_read );

    SC_METHOD(thread_shl_ln728_6_fu_176_p3);
    sensitive << ( data_6_V_read );

    SC_METHOD(thread_shl_ln728_7_fu_188_p3);
    sensitive << ( data_7_V_read );

    SC_METHOD(thread_shl_ln728_8_fu_200_p3);
    sensitive << ( data_8_V_read );

    SC_METHOD(thread_shl_ln728_9_fu_212_p3);
    sensitive << ( data_9_V_read );

    SC_METHOD(thread_shl_ln_fu_104_p3);
    sensitive << ( data_0_V_read );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_return_0_preg = "0000000000000000";
    ap_return_1_preg = "0000000000000000";
    ap_return_2_preg = "0000000000000000";
    ap_return_3_preg = "0000000000000000";
    ap_return_4_preg = "0000000000000000";
    ap_return_5_preg = "0000000000000000";
    ap_return_6_preg = "0000000000000000";
    ap_return_7_preg = "0000000000000000";
    ap_return_8_preg = "0000000000000000";
    ap_return_9_preg = "0000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_0_V_read, "(port)data_0_V_read");
    sc_trace(mVcdFile, data_1_V_read, "(port)data_1_V_read");
    sc_trace(mVcdFile, data_2_V_read, "(port)data_2_V_read");
    sc_trace(mVcdFile, data_3_V_read, "(port)data_3_V_read");
    sc_trace(mVcdFile, data_4_V_read, "(port)data_4_V_read");
    sc_trace(mVcdFile, data_5_V_read, "(port)data_5_V_read");
    sc_trace(mVcdFile, data_6_V_read, "(port)data_6_V_read");
    sc_trace(mVcdFile, data_7_V_read, "(port)data_7_V_read");
    sc_trace(mVcdFile, data_8_V_read, "(port)data_8_V_read");
    sc_trace(mVcdFile, data_9_V_read, "(port)data_9_V_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, shl_ln_fu_104_p3, "shl_ln_fu_104_p3");
    sc_trace(mVcdFile, shl_ln728_1_fu_116_p3, "shl_ln728_1_fu_116_p3");
    sc_trace(mVcdFile, shl_ln728_2_fu_128_p3, "shl_ln728_2_fu_128_p3");
    sc_trace(mVcdFile, shl_ln728_3_fu_140_p3, "shl_ln728_3_fu_140_p3");
    sc_trace(mVcdFile, shl_ln728_4_fu_152_p3, "shl_ln728_4_fu_152_p3");
    sc_trace(mVcdFile, shl_ln728_5_fu_164_p3, "shl_ln728_5_fu_164_p3");
    sc_trace(mVcdFile, shl_ln728_6_fu_176_p3, "shl_ln728_6_fu_176_p3");
    sc_trace(mVcdFile, shl_ln728_7_fu_188_p3, "shl_ln728_7_fu_188_p3");
    sc_trace(mVcdFile, shl_ln728_8_fu_200_p3, "shl_ln728_8_fu_200_p3");
    sc_trace(mVcdFile, shl_ln728_9_fu_212_p3, "shl_ln728_9_fu_212_p3");
    sc_trace(mVcdFile, sext_ln728_fu_112_p1, "sext_ln728_fu_112_p1");
    sc_trace(mVcdFile, sext_ln728_1_fu_124_p1, "sext_ln728_1_fu_124_p1");
    sc_trace(mVcdFile, sext_ln728_2_fu_136_p1, "sext_ln728_2_fu_136_p1");
    sc_trace(mVcdFile, sext_ln728_3_fu_148_p1, "sext_ln728_3_fu_148_p1");
    sc_trace(mVcdFile, sext_ln728_4_fu_160_p1, "sext_ln728_4_fu_160_p1");
    sc_trace(mVcdFile, sext_ln728_5_fu_172_p1, "sext_ln728_5_fu_172_p1");
    sc_trace(mVcdFile, sext_ln728_6_fu_184_p1, "sext_ln728_6_fu_184_p1");
    sc_trace(mVcdFile, sext_ln728_7_fu_196_p1, "sext_ln728_7_fu_196_p1");
    sc_trace(mVcdFile, sext_ln728_8_fu_208_p1, "sext_ln728_8_fu_208_p1");
    sc_trace(mVcdFile, sext_ln728_9_fu_220_p1, "sext_ln728_9_fu_220_p1");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_return_3_preg, "ap_return_3_preg");
    sc_trace(mVcdFile, ap_return_4_preg, "ap_return_4_preg");
    sc_trace(mVcdFile, ap_return_5_preg, "ap_return_5_preg");
    sc_trace(mVcdFile, ap_return_6_preg, "ap_return_6_preg");
    sc_trace(mVcdFile, ap_return_7_preg, "ap_return_7_preg");
    sc_trace(mVcdFile, ap_return_8_preg, "ap_return_8_preg");
    sc_trace(mVcdFile, ap_return_9_preg, "ap_return_9_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::~linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_return_0_preg = sext_ln728_fu_112_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_return_1_preg = sext_ln728_1_fu_124_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_return_2_preg = sext_ln728_2_fu_136_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_3_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_return_3_preg = sext_ln728_3_fu_148_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_4_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_return_4_preg = sext_ln728_4_fu_160_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_5_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_return_5_preg = sext_ln728_5_fu_172_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_6_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_return_6_preg = sext_ln728_6_fu_184_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_7_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_return_7_preg = sext_ln728_7_fu_196_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_8_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_return_8_preg = sext_ln728_8_fu_208_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_9_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_return_9_preg = sext_ln728_9_fu_220_p1.read();
        }
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_return_0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_return_0 = sext_ln728_fu_112_p1.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_return_1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_return_1 = sext_ln728_1_fu_124_p1.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_return_2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_return_2 = sext_ln728_2_fu_136_p1.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_return_3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_return_3 = sext_ln728_3_fu_148_p1.read();
    } else {
        ap_return_3 = ap_return_3_preg.read();
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_return_4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_return_4 = sext_ln728_4_fu_160_p1.read();
    } else {
        ap_return_4 = ap_return_4_preg.read();
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_return_5() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_return_5 = sext_ln728_5_fu_172_p1.read();
    } else {
        ap_return_5 = ap_return_5_preg.read();
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_return_6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_return_6 = sext_ln728_6_fu_184_p1.read();
    } else {
        ap_return_6 = ap_return_6_preg.read();
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_return_7() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_return_7 = sext_ln728_7_fu_196_p1.read();
    } else {
        ap_return_7 = ap_return_7_preg.read();
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_return_8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_return_8 = sext_ln728_8_fu_208_p1.read();
    } else {
        ap_return_8 = ap_return_8_preg.read();
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_return_9() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_return_9 = sext_ln728_9_fu_220_p1.read();
    } else {
        ap_return_9 = ap_return_9_preg.read();
    }
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_sext_ln728_1_fu_124_p1() {
    sext_ln728_1_fu_124_p1 = esl_sext<16,14>(shl_ln728_1_fu_116_p3.read());
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_sext_ln728_2_fu_136_p1() {
    sext_ln728_2_fu_136_p1 = esl_sext<16,14>(shl_ln728_2_fu_128_p3.read());
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_sext_ln728_3_fu_148_p1() {
    sext_ln728_3_fu_148_p1 = esl_sext<16,14>(shl_ln728_3_fu_140_p3.read());
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_sext_ln728_4_fu_160_p1() {
    sext_ln728_4_fu_160_p1 = esl_sext<16,14>(shl_ln728_4_fu_152_p3.read());
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_sext_ln728_5_fu_172_p1() {
    sext_ln728_5_fu_172_p1 = esl_sext<16,14>(shl_ln728_5_fu_164_p3.read());
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_sext_ln728_6_fu_184_p1() {
    sext_ln728_6_fu_184_p1 = esl_sext<16,14>(shl_ln728_6_fu_176_p3.read());
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_sext_ln728_7_fu_196_p1() {
    sext_ln728_7_fu_196_p1 = esl_sext<16,14>(shl_ln728_7_fu_188_p3.read());
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_sext_ln728_8_fu_208_p1() {
    sext_ln728_8_fu_208_p1 = esl_sext<16,14>(shl_ln728_8_fu_200_p3.read());
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_sext_ln728_9_fu_220_p1() {
    sext_ln728_9_fu_220_p1 = esl_sext<16,14>(shl_ln728_9_fu_212_p3.read());
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_sext_ln728_fu_112_p1() {
    sext_ln728_fu_112_p1 = esl_sext<16,14>(shl_ln_fu_104_p3.read());
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_shl_ln728_1_fu_116_p3() {
    shl_ln728_1_fu_116_p3 = esl_concat<8,6>(data_1_V_read.read(), ap_const_lv6_0);
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_shl_ln728_2_fu_128_p3() {
    shl_ln728_2_fu_128_p3 = esl_concat<8,6>(data_2_V_read.read(), ap_const_lv6_0);
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_shl_ln728_3_fu_140_p3() {
    shl_ln728_3_fu_140_p3 = esl_concat<8,6>(data_3_V_read.read(), ap_const_lv6_0);
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_shl_ln728_4_fu_152_p3() {
    shl_ln728_4_fu_152_p3 = esl_concat<8,6>(data_4_V_read.read(), ap_const_lv6_0);
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_shl_ln728_5_fu_164_p3() {
    shl_ln728_5_fu_164_p3 = esl_concat<8,6>(data_5_V_read.read(), ap_const_lv6_0);
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_shl_ln728_6_fu_176_p3() {
    shl_ln728_6_fu_176_p3 = esl_concat<8,6>(data_6_V_read.read(), ap_const_lv6_0);
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_shl_ln728_7_fu_188_p3() {
    shl_ln728_7_fu_188_p3 = esl_concat<8,6>(data_7_V_read.read(), ap_const_lv6_0);
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_shl_ln728_8_fu_200_p3() {
    shl_ln728_8_fu_200_p3 = esl_concat<8,6>(data_8_V_read.read(), ap_const_lv6_0);
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_shl_ln728_9_fu_212_p3() {
    shl_ln728_9_fu_212_p3 = esl_concat<8,6>(data_9_V_read.read(), ap_const_lv6_0);
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_shl_ln_fu_104_p3() {
    shl_ln_fu_104_p3 = esl_concat<8,6>(data_0_V_read.read(), ap_const_lv6_0);
}

void linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

