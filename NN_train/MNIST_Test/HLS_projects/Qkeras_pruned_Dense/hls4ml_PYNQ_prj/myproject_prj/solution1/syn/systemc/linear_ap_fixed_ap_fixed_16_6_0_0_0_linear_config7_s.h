// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s_HH_
#define _linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s : public sc_module {
    // Port declarations 27
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > data_0_V_read;
    sc_in< sc_lv<8> > data_1_V_read;
    sc_in< sc_lv<8> > data_2_V_read;
    sc_in< sc_lv<8> > data_3_V_read;
    sc_in< sc_lv<8> > data_4_V_read;
    sc_in< sc_lv<8> > data_5_V_read;
    sc_in< sc_lv<8> > data_6_V_read;
    sc_in< sc_lv<8> > data_7_V_read;
    sc_in< sc_lv<8> > data_8_V_read;
    sc_in< sc_lv<8> > data_9_V_read;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<16> > ap_return_1;
    sc_out< sc_lv<16> > ap_return_2;
    sc_out< sc_lv<16> > ap_return_3;
    sc_out< sc_lv<16> > ap_return_4;
    sc_out< sc_lv<16> > ap_return_5;
    sc_out< sc_lv<16> > ap_return_6;
    sc_out< sc_lv<16> > ap_return_7;
    sc_out< sc_lv<16> > ap_return_8;
    sc_out< sc_lv<16> > ap_return_9;


    // Module declarations
    linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s(sc_module_name name);
    SC_HAS_PROCESS(linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s);

    ~linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config7_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<14> > shl_ln_fu_104_p3;
    sc_signal< sc_lv<14> > shl_ln728_1_fu_116_p3;
    sc_signal< sc_lv<14> > shl_ln728_2_fu_128_p3;
    sc_signal< sc_lv<14> > shl_ln728_3_fu_140_p3;
    sc_signal< sc_lv<14> > shl_ln728_4_fu_152_p3;
    sc_signal< sc_lv<14> > shl_ln728_5_fu_164_p3;
    sc_signal< sc_lv<14> > shl_ln728_6_fu_176_p3;
    sc_signal< sc_lv<14> > shl_ln728_7_fu_188_p3;
    sc_signal< sc_lv<14> > shl_ln728_8_fu_200_p3;
    sc_signal< sc_lv<14> > shl_ln728_9_fu_212_p3;
    sc_signal< sc_lv<16> > sext_ln728_fu_112_p1;
    sc_signal< sc_lv<16> > sext_ln728_1_fu_124_p1;
    sc_signal< sc_lv<16> > sext_ln728_2_fu_136_p1;
    sc_signal< sc_lv<16> > sext_ln728_3_fu_148_p1;
    sc_signal< sc_lv<16> > sext_ln728_4_fu_160_p1;
    sc_signal< sc_lv<16> > sext_ln728_5_fu_172_p1;
    sc_signal< sc_lv<16> > sext_ln728_6_fu_184_p1;
    sc_signal< sc_lv<16> > sext_ln728_7_fu_196_p1;
    sc_signal< sc_lv<16> > sext_ln728_8_fu_208_p1;
    sc_signal< sc_lv<16> > sext_ln728_9_fu_220_p1;
    sc_signal< sc_lv<16> > ap_return_0_preg;
    sc_signal< sc_lv<16> > ap_return_1_preg;
    sc_signal< sc_lv<16> > ap_return_2_preg;
    sc_signal< sc_lv<16> > ap_return_3_preg;
    sc_signal< sc_lv<16> > ap_return_4_preg;
    sc_signal< sc_lv<16> > ap_return_5_preg;
    sc_signal< sc_lv<16> > ap_return_6_preg;
    sc_signal< sc_lv<16> > ap_return_7_preg;
    sc_signal< sc_lv<16> > ap_return_8_preg;
    sc_signal< sc_lv<16> > ap_return_9_preg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_sext_ln728_1_fu_124_p1();
    void thread_sext_ln728_2_fu_136_p1();
    void thread_sext_ln728_3_fu_148_p1();
    void thread_sext_ln728_4_fu_160_p1();
    void thread_sext_ln728_5_fu_172_p1();
    void thread_sext_ln728_6_fu_184_p1();
    void thread_sext_ln728_7_fu_196_p1();
    void thread_sext_ln728_8_fu_208_p1();
    void thread_sext_ln728_9_fu_220_p1();
    void thread_sext_ln728_fu_112_p1();
    void thread_shl_ln728_1_fu_116_p3();
    void thread_shl_ln728_2_fu_128_p3();
    void thread_shl_ln728_3_fu_140_p3();
    void thread_shl_ln728_4_fu_152_p3();
    void thread_shl_ln728_5_fu_164_p3();
    void thread_shl_ln728_6_fu_176_p3();
    void thread_shl_ln728_7_fu_188_p3();
    void thread_shl_ln728_8_fu_200_p3();
    void thread_shl_ln728_9_fu_212_p3();
    void thread_shl_ln_fu_104_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
