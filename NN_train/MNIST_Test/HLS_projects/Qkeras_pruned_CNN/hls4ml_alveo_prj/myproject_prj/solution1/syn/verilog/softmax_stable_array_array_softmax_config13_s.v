// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_softmax_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_blk_n,
        res_V_data_1_V_blk_n,
        res_V_data_2_V_blk_n,
        res_V_data_3_V_blk_n,
        res_V_data_4_V_blk_n,
        res_V_data_5_V_blk_n,
        res_V_data_6_V_blk_n,
        res_V_data_7_V_blk_n,
        res_V_data_8_V_blk_n,
        res_V_data_9_V_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [11:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [11:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [11:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [11:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [11:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [11:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [11:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [11:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [11:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_blk_n;
output   res_V_data_1_V_blk_n;
output   res_V_data_2_V_blk_n;
output   res_V_data_3_V_blk_n;
output   res_V_data_4_V_blk_n;
output   res_V_data_5_V_blk_n;
output   res_V_data_6_V_blk_n;
output   res_V_data_7_V_blk_n;
output   res_V_data_8_V_blk_n;
output   res_V_data_9_V_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_blk_n;
reg res_V_data_1_V_blk_n;
reg res_V_data_2_V_blk_n;
reg res_V_data_3_V_blk_n;
reg res_V_data_4_V_blk_n;
reg res_V_data_5_V_blk_n;
reg res_V_data_6_V_blk_n;
reg res_V_data_7_V_blk_n;
reg res_V_data_8_V_blk_n;
reg res_V_data_9_V_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op14;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    io_acc_block_signal_op322;
reg    ap_block_state13_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [11:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [11:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [11:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [11:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [11:0] exp_table1_q4;
wire   [9:0] exp_table1_address5;
reg    exp_table1_ce5;
wire   [11:0] exp_table1_q5;
wire   [9:0] exp_table1_address6;
reg    exp_table1_ce6;
wire   [11:0] exp_table1_q6;
wire   [9:0] exp_table1_address7;
reg    exp_table1_ce7;
wire   [11:0] exp_table1_q7;
wire   [9:0] exp_table1_address8;
reg    exp_table1_ce8;
wire   [11:0] exp_table1_q8;
wire   [9:0] exp_table1_address9;
reg    exp_table1_ce9;
wire   [11:0] exp_table1_q9;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [11:0] invert_table2_q0;
reg  signed [11:0] data_array_0_V_reg_1956;
reg  signed [11:0] data_array_0_V_reg_1956_pp0_iter1_reg;
reg  signed [11:0] data_array_0_V_reg_1956_pp0_iter2_reg;
reg  signed [11:0] data_array_1_V_reg_1962;
reg  signed [11:0] data_array_1_V_reg_1962_pp0_iter1_reg;
reg  signed [11:0] data_array_1_V_reg_1962_pp0_iter2_reg;
reg  signed [11:0] data_array_2_V_reg_1968;
reg  signed [11:0] data_array_2_V_reg_1968_pp0_iter1_reg;
reg  signed [11:0] data_array_2_V_reg_1968_pp0_iter2_reg;
reg  signed [11:0] data_array_3_V_reg_1974;
reg  signed [11:0] data_array_3_V_reg_1974_pp0_iter1_reg;
reg  signed [11:0] data_array_3_V_reg_1974_pp0_iter2_reg;
reg  signed [11:0] data_array_4_V_reg_1980;
reg  signed [11:0] data_array_4_V_reg_1980_pp0_iter1_reg;
reg  signed [11:0] data_array_4_V_reg_1980_pp0_iter2_reg;
reg  signed [11:0] data_array_5_V_reg_1986;
reg  signed [11:0] data_array_5_V_reg_1986_pp0_iter1_reg;
reg  signed [11:0] data_array_5_V_reg_1986_pp0_iter2_reg;
reg  signed [11:0] data_array_6_V_reg_1992;
reg  signed [11:0] data_array_6_V_reg_1992_pp0_iter1_reg;
reg  signed [11:0] data_array_6_V_reg_1992_pp0_iter2_reg;
reg  signed [11:0] data_array_7_V_reg_1998;
reg  signed [11:0] data_array_7_V_reg_1998_pp0_iter1_reg;
reg  signed [11:0] data_array_7_V_reg_1998_pp0_iter2_reg;
reg  signed [11:0] data_array_8_V_reg_2004;
reg  signed [11:0] data_array_8_V_reg_2004_pp0_iter1_reg;
reg  signed [11:0] data_array_8_V_reg_2004_pp0_iter2_reg;
reg  signed [11:0] data_array_9_V_reg_2011;
reg  signed [11:0] data_array_9_V_reg_2011_pp0_iter1_reg;
reg  signed [11:0] data_array_9_V_reg_2011_pp0_iter2_reg;
wire   [0:0] icmp_ln1496_fu_709_p2;
reg   [0:0] icmp_ln1496_reg_2018;
wire   [0:0] icmp_ln1496_1_fu_715_p2;
reg   [0:0] icmp_ln1496_1_reg_2023;
wire   [0:0] icmp_ln1496_3_fu_721_p2;
reg   [0:0] icmp_ln1496_3_reg_2028;
wire   [0:0] icmp_ln1496_4_fu_727_p2;
reg   [0:0] icmp_ln1496_4_reg_2033;
wire   [11:0] select_ln86_2_fu_749_p3;
reg   [11:0] select_ln86_2_reg_2038;
wire   [11:0] select_ln86_5_fu_773_p3;
reg   [11:0] select_ln86_5_reg_2044;
wire   [11:0] select_ln86_6_fu_785_p3;
reg   [11:0] select_ln86_6_reg_2050;
wire   [11:0] select_ln86_7_fu_795_p3;
reg   [11:0] select_ln86_7_reg_2055;
wire   [0:0] icmp_ln1496_8_fu_801_p2;
reg   [0:0] icmp_ln1496_8_reg_2060;
wire   [9:0] y_V_fu_1392_p3;
reg   [9:0] y_V_reg_2065;
wire   [9:0] y_V_1_fu_1426_p3;
reg   [9:0] y_V_1_reg_2070;
wire   [9:0] y_V_2_fu_1460_p3;
reg   [9:0] y_V_2_reg_2075;
wire   [9:0] y_V_3_fu_1494_p3;
reg   [9:0] y_V_3_reg_2080;
wire   [9:0] y_V_4_fu_1528_p3;
reg   [9:0] y_V_4_reg_2085;
reg   [9:0] y_V_4_reg_2085_pp0_iter4_reg;
wire   [9:0] y_V_5_fu_1562_p3;
reg   [9:0] y_V_5_reg_2090;
reg   [9:0] y_V_5_reg_2090_pp0_iter4_reg;
wire   [9:0] y_V_6_fu_1596_p3;
reg   [9:0] y_V_6_reg_2095;
reg   [9:0] y_V_6_reg_2095_pp0_iter4_reg;
wire   [9:0] y_V_7_fu_1630_p3;
reg   [9:0] y_V_7_reg_2100;
wire   [9:0] y_V_8_fu_1664_p3;
reg   [9:0] y_V_8_reg_2105;
reg   [9:0] y_V_8_reg_2105_pp0_iter4_reg;
wire   [9:0] y_V_9_fu_1698_p3;
reg   [9:0] y_V_9_reg_2110;
reg   [9:0] y_V_9_reg_2110_pp0_iter4_reg;
reg  signed [11:0] exp_res_0_V_reg_2140;
reg  signed [11:0] exp_res_0_V_reg_2140_pp0_iter6_reg;
reg  signed [11:0] exp_res_0_V_reg_2140_pp0_iter7_reg;
reg  signed [11:0] exp_res_0_V_reg_2140_pp0_iter8_reg;
reg  signed [11:0] exp_res_0_V_reg_2140_pp0_iter9_reg;
reg  signed [11:0] exp_res_1_V_reg_2146;
reg  signed [11:0] exp_res_1_V_reg_2146_pp0_iter6_reg;
reg  signed [11:0] exp_res_1_V_reg_2146_pp0_iter7_reg;
reg  signed [11:0] exp_res_1_V_reg_2146_pp0_iter8_reg;
reg  signed [11:0] exp_res_1_V_reg_2146_pp0_iter9_reg;
reg  signed [11:0] exp_res_2_V_reg_2152;
reg  signed [11:0] exp_res_2_V_reg_2152_pp0_iter6_reg;
reg  signed [11:0] exp_res_2_V_reg_2152_pp0_iter7_reg;
reg  signed [11:0] exp_res_2_V_reg_2152_pp0_iter8_reg;
reg  signed [11:0] exp_res_2_V_reg_2152_pp0_iter9_reg;
reg  signed [11:0] exp_res_3_V_reg_2158;
reg  signed [11:0] exp_res_3_V_reg_2158_pp0_iter6_reg;
reg  signed [11:0] exp_res_3_V_reg_2158_pp0_iter7_reg;
reg  signed [11:0] exp_res_3_V_reg_2158_pp0_iter8_reg;
reg  signed [11:0] exp_res_3_V_reg_2158_pp0_iter9_reg;
reg  signed [11:0] exp_res_7_V_reg_2179;
reg  signed [11:0] exp_res_7_V_reg_2179_pp0_iter6_reg;
reg  signed [11:0] exp_res_7_V_reg_2179_pp0_iter7_reg;
reg  signed [11:0] exp_res_7_V_reg_2179_pp0_iter8_reg;
reg  signed [11:0] exp_res_7_V_reg_2179_pp0_iter9_reg;
reg  signed [11:0] exp_res_4_V_reg_2195;
reg  signed [11:0] exp_res_4_V_reg_2195_pp0_iter7_reg;
reg  signed [11:0] exp_res_4_V_reg_2195_pp0_iter8_reg;
reg  signed [11:0] exp_res_4_V_reg_2195_pp0_iter9_reg;
reg  signed [11:0] exp_res_5_V_reg_2201;
reg  signed [11:0] exp_res_5_V_reg_2201_pp0_iter7_reg;
reg  signed [11:0] exp_res_5_V_reg_2201_pp0_iter8_reg;
reg  signed [11:0] exp_res_5_V_reg_2201_pp0_iter9_reg;
reg  signed [11:0] exp_res_6_V_reg_2207;
reg  signed [11:0] exp_res_6_V_reg_2207_pp0_iter7_reg;
reg  signed [11:0] exp_res_6_V_reg_2207_pp0_iter8_reg;
reg  signed [11:0] exp_res_6_V_reg_2207_pp0_iter9_reg;
reg  signed [11:0] exp_res_8_V_reg_2213;
reg  signed [11:0] exp_res_8_V_reg_2213_pp0_iter7_reg;
reg  signed [11:0] exp_res_8_V_reg_2213_pp0_iter8_reg;
reg  signed [11:0] exp_res_8_V_reg_2213_pp0_iter9_reg;
reg  signed [11:0] exp_res_9_V_reg_2219;
reg  signed [11:0] exp_res_9_V_reg_2219_pp0_iter7_reg;
reg  signed [11:0] exp_res_9_V_reg_2219_pp0_iter8_reg;
reg  signed [11:0] exp_res_9_V_reg_2219_pp0_iter9_reg;
wire   [11:0] add_ln703_3_fu_1759_p2;
reg   [11:0] add_ln703_3_reg_2225;
reg   [9:0] y_V_10_reg_2230;
reg   [11:0] inv_exp_sum_V_reg_2240;
wire  signed [23:0] sext_ln1118_fu_1803_p1;
reg   [15:0] tmp_data_0_V_reg_2309;
reg   [15:0] tmp_data_1_V_reg_2314;
reg   [15:0] tmp_data_2_V_reg_2319;
reg   [15:0] tmp_data_3_V_reg_2324;
reg   [15:0] tmp_data_4_V_reg_2329;
reg   [15:0] tmp_data_5_V_reg_2334;
reg   [15:0] tmp_data_6_V_reg_2339;
reg   [15:0] tmp_data_7_V_reg_2344;
reg   [15:0] tmp_data_8_V_reg_2349;
reg   [15:0] tmp_data_9_V_reg_2354;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln230_fu_1706_p1;
wire   [63:0] zext_ln230_1_fu_1710_p1;
wire   [63:0] zext_ln230_2_fu_1714_p1;
wire   [63:0] zext_ln230_3_fu_1718_p1;
wire   [63:0] zext_ln230_7_fu_1722_p1;
wire   [63:0] zext_ln230_4_fu_1726_p1;
wire   [63:0] zext_ln230_5_fu_1730_p1;
wire   [63:0] zext_ln230_6_fu_1734_p1;
wire   [63:0] zext_ln230_8_fu_1738_p1;
wire   [63:0] zext_ln230_9_fu_1742_p1;
wire   [63:0] zext_ln238_fu_1799_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [11:0] grp_fu_298_p0;
wire  signed [11:0] grp_fu_299_p0;
wire  signed [11:0] grp_fu_300_p0;
wire  signed [11:0] grp_fu_301_p0;
wire  signed [11:0] grp_fu_302_p0;
wire  signed [11:0] grp_fu_303_p0;
wire  signed [11:0] grp_fu_304_p0;
wire  signed [11:0] grp_fu_305_p0;
wire  signed [11:0] grp_fu_306_p0;
wire  signed [11:0] grp_fu_307_p0;
wire  signed [11:0] icmp_ln1496_fu_709_p0;
wire  signed [11:0] icmp_ln1496_fu_709_p1;
wire  signed [11:0] icmp_ln1496_1_fu_715_p0;
wire  signed [11:0] icmp_ln1496_1_fu_715_p1;
wire  signed [11:0] icmp_ln1496_3_fu_721_p0;
wire  signed [11:0] icmp_ln1496_3_fu_721_p1;
wire  signed [11:0] icmp_ln1496_4_fu_727_p0;
wire  signed [11:0] icmp_ln1496_4_fu_727_p1;
wire   [11:0] select_ln86_fu_733_p3;
wire   [11:0] select_ln86_1_fu_738_p3;
wire   [0:0] icmp_ln1496_2_fu_743_p2;
wire   [11:0] select_ln86_3_fu_757_p3;
wire   [11:0] select_ln86_4_fu_762_p3;
wire   [0:0] icmp_ln1496_5_fu_767_p2;
wire   [0:0] icmp_ln1496_6_fu_781_p2;
wire   [0:0] icmp_ln1496_7_fu_791_p2;
wire   [11:0] x_max_V_fu_807_p3;
wire  signed [12:0] sext_ln703_fu_812_p1;
wire  signed [12:0] sext_ln703_1_fu_815_p1;
wire   [12:0] sub_ln1193_fu_819_p2;
wire   [0:0] tmp_21_fu_833_p3;
wire   [0:0] tmp_fu_825_p3;
wire   [0:0] xor_ln786_fu_841_p2;
wire   [0:0] xor_ln340_fu_859_p2;
wire  signed [12:0] sext_ln703_2_fu_871_p1;
wire   [12:0] sub_ln1193_1_fu_874_p2;
wire   [0:0] tmp_23_fu_888_p3;
wire   [0:0] tmp_22_fu_880_p3;
wire   [0:0] xor_ln786_1_fu_896_p2;
wire   [0:0] xor_ln340_1_fu_914_p2;
wire  signed [12:0] sext_ln703_3_fu_926_p1;
wire   [12:0] sub_ln1193_2_fu_929_p2;
wire   [0:0] tmp_25_fu_943_p3;
wire   [0:0] tmp_24_fu_935_p3;
wire   [0:0] xor_ln786_2_fu_951_p2;
wire   [0:0] xor_ln340_2_fu_969_p2;
wire  signed [12:0] sext_ln703_4_fu_981_p1;
wire   [12:0] sub_ln1193_3_fu_984_p2;
wire   [0:0] tmp_27_fu_998_p3;
wire   [0:0] tmp_26_fu_990_p3;
wire   [0:0] xor_ln786_3_fu_1006_p2;
wire   [0:0] xor_ln340_3_fu_1024_p2;
wire  signed [12:0] sext_ln703_5_fu_1036_p1;
wire   [12:0] sub_ln1193_4_fu_1039_p2;
wire   [0:0] tmp_29_fu_1053_p3;
wire   [0:0] tmp_28_fu_1045_p3;
wire   [0:0] xor_ln786_4_fu_1061_p2;
wire   [0:0] xor_ln340_4_fu_1079_p2;
wire  signed [12:0] sext_ln703_6_fu_1091_p1;
wire   [12:0] sub_ln1193_5_fu_1094_p2;
wire   [0:0] tmp_31_fu_1108_p3;
wire   [0:0] tmp_30_fu_1100_p3;
wire   [0:0] xor_ln786_5_fu_1116_p2;
wire   [0:0] xor_ln340_5_fu_1134_p2;
wire  signed [12:0] sext_ln703_7_fu_1146_p1;
wire   [12:0] sub_ln1193_6_fu_1149_p2;
wire   [0:0] tmp_33_fu_1163_p3;
wire   [0:0] tmp_32_fu_1155_p3;
wire   [0:0] xor_ln786_6_fu_1171_p2;
wire   [0:0] xor_ln340_6_fu_1189_p2;
wire  signed [12:0] sext_ln703_8_fu_1201_p1;
wire   [12:0] sub_ln1193_7_fu_1204_p2;
wire   [0:0] tmp_35_fu_1218_p3;
wire   [0:0] tmp_34_fu_1210_p3;
wire   [0:0] xor_ln786_7_fu_1226_p2;
wire   [0:0] xor_ln340_7_fu_1244_p2;
wire  signed [12:0] sext_ln703_9_fu_1256_p1;
wire   [12:0] sub_ln1193_8_fu_1259_p2;
wire   [0:0] tmp_37_fu_1273_p3;
wire   [0:0] tmp_36_fu_1265_p3;
wire   [0:0] xor_ln786_8_fu_1281_p2;
wire   [0:0] xor_ln340_8_fu_1299_p2;
wire  signed [12:0] sext_ln703_10_fu_1311_p1;
wire   [12:0] sub_ln1193_9_fu_1314_p2;
wire   [0:0] tmp_39_fu_1328_p3;
wire   [0:0] tmp_38_fu_1320_p3;
wire   [0:0] xor_ln786_9_fu_1336_p2;
wire   [0:0] xor_ln340_9_fu_1354_p2;
wire   [0:0] xor_ln340_10_fu_853_p2;
wire   [9:0] tmp_11_fu_1366_p4;
wire   [0:0] and_ln786_fu_847_p2;
wire   [0:0] or_ln340_fu_865_p2;
wire   [9:0] select_ln340_fu_1376_p3;
wire   [9:0] select_ln388_fu_1384_p3;
wire   [0:0] xor_ln340_11_fu_908_p2;
wire   [9:0] tmp_12_fu_1400_p4;
wire   [0:0] and_ln786_1_fu_902_p2;
wire   [0:0] or_ln340_1_fu_920_p2;
wire   [9:0] select_ln340_2_fu_1410_p3;
wire   [9:0] select_ln388_1_fu_1418_p3;
wire   [0:0] xor_ln340_12_fu_963_p2;
wire   [9:0] tmp_13_fu_1434_p4;
wire   [0:0] and_ln786_2_fu_957_p2;
wire   [0:0] or_ln340_2_fu_975_p2;
wire   [9:0] select_ln340_4_fu_1444_p3;
wire   [9:0] select_ln388_2_fu_1452_p3;
wire   [0:0] xor_ln340_13_fu_1018_p2;
wire   [9:0] tmp_14_fu_1468_p4;
wire   [0:0] and_ln786_3_fu_1012_p2;
wire   [0:0] or_ln340_3_fu_1030_p2;
wire   [9:0] select_ln340_6_fu_1478_p3;
wire   [9:0] select_ln388_3_fu_1486_p3;
wire   [0:0] xor_ln340_14_fu_1073_p2;
wire   [9:0] tmp_15_fu_1502_p4;
wire   [0:0] and_ln786_4_fu_1067_p2;
wire   [0:0] or_ln340_4_fu_1085_p2;
wire   [9:0] select_ln340_8_fu_1512_p3;
wire   [9:0] select_ln388_4_fu_1520_p3;
wire   [0:0] xor_ln340_15_fu_1128_p2;
wire   [9:0] tmp_16_fu_1536_p4;
wire   [0:0] and_ln786_5_fu_1122_p2;
wire   [0:0] or_ln340_5_fu_1140_p2;
wire   [9:0] select_ln340_10_fu_1546_p3;
wire   [9:0] select_ln388_5_fu_1554_p3;
wire   [0:0] xor_ln340_16_fu_1183_p2;
wire   [9:0] tmp_17_fu_1570_p4;
wire   [0:0] and_ln786_6_fu_1177_p2;
wire   [0:0] or_ln340_6_fu_1195_p2;
wire   [9:0] select_ln340_12_fu_1580_p3;
wire   [9:0] select_ln388_6_fu_1588_p3;
wire   [0:0] xor_ln340_17_fu_1238_p2;
wire   [9:0] tmp_18_fu_1604_p4;
wire   [0:0] and_ln786_7_fu_1232_p2;
wire   [0:0] or_ln340_7_fu_1250_p2;
wire   [9:0] select_ln340_14_fu_1614_p3;
wire   [9:0] select_ln388_7_fu_1622_p3;
wire   [0:0] xor_ln340_18_fu_1293_p2;
wire   [9:0] tmp_19_fu_1638_p4;
wire   [0:0] and_ln786_8_fu_1287_p2;
wire   [0:0] or_ln340_8_fu_1305_p2;
wire   [9:0] select_ln340_16_fu_1648_p3;
wire   [9:0] select_ln388_8_fu_1656_p3;
wire   [0:0] xor_ln340_19_fu_1348_p2;
wire   [9:0] tmp_20_fu_1672_p4;
wire   [0:0] and_ln786_9_fu_1342_p2;
wire   [0:0] or_ln340_9_fu_1360_p2;
wire   [9:0] select_ln340_18_fu_1682_p3;
wire   [9:0] select_ln388_9_fu_1690_p3;
wire   [11:0] add_ln703_1_fu_1750_p2;
wire   [11:0] add_ln703_fu_1746_p2;
wire   [11:0] add_ln703_2_fu_1754_p2;
wire   [11:0] add_ln703_5_fu_1769_p2;
wire   [11:0] add_ln703_4_fu_1765_p2;
wire   [11:0] add_ln703_6_fu_1773_p2;
wire   [11:0] add_ln703_7_fu_1778_p2;
wire   [11:0] exp_sum_V_fu_1784_p2;
wire   [23:0] grp_fu_298_p2;
wire   [23:0] grp_fu_305_p2;
wire   [23:0] grp_fu_299_p2;
wire   [23:0] grp_fu_302_p2;
wire   [23:0] grp_fu_300_p2;
wire   [23:0] grp_fu_304_p2;
wire   [23:0] grp_fu_301_p2;
wire   [23:0] grp_fu_303_p2;
wire   [23:0] grp_fu_306_p2;
wire   [23:0] grp_fu_307_p2;
reg    grp_fu_298_ce;
reg    grp_fu_299_ce;
reg    grp_fu_300_ce;
reg    grp_fu_301_ce;
reg    grp_fu_302_ce;
reg    grp_fu_303_ce;
reg    grp_fu_304_ce;
reg    grp_fu_305_ce;
reg    grp_fu_306_ce;
reg    grp_fu_307_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to11;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
end

softmax_stable_array_array_softmax_config13_s_exp_table1 #(
    .DataWidth( 12 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4),
    .address5(exp_table1_address5),
    .ce5(exp_table1_ce5),
    .q5(exp_table1_q5),
    .address6(exp_table1_address6),
    .ce6(exp_table1_ce6),
    .q6(exp_table1_q6),
    .address7(exp_table1_address7),
    .ce7(exp_table1_ce7),
    .q7(exp_table1_q7),
    .address8(exp_table1_address8),
    .ce8(exp_table1_ce8),
    .q8(exp_table1_q8),
    .address9(exp_table1_address9),
    .ce9(exp_table1_ce9),
    .q9(exp_table1_q9)
);

softmax_stable_array_array_softmax_config13_s_invert_table2 #(
    .DataWidth( 12 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U896(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_298_p0),
    .din1(exp_res_0_V_reg_2140_pp0_iter9_reg),
    .ce(grp_fu_298_ce),
    .dout(grp_fu_298_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U897(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_299_p0),
    .din1(exp_res_2_V_reg_2152_pp0_iter9_reg),
    .ce(grp_fu_299_ce),
    .dout(grp_fu_299_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U898(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_300_p0),
    .din1(exp_res_4_V_reg_2195_pp0_iter9_reg),
    .ce(grp_fu_300_ce),
    .dout(grp_fu_300_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U899(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_301_p0),
    .din1(exp_res_6_V_reg_2207_pp0_iter9_reg),
    .ce(grp_fu_301_ce),
    .dout(grp_fu_301_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U900(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_302_p0),
    .din1(exp_res_3_V_reg_2158_pp0_iter9_reg),
    .ce(grp_fu_302_ce),
    .dout(grp_fu_302_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U901(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_303_p0),
    .din1(exp_res_7_V_reg_2179_pp0_iter9_reg),
    .ce(grp_fu_303_ce),
    .dout(grp_fu_303_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U902(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_304_p0),
    .din1(exp_res_5_V_reg_2201_pp0_iter9_reg),
    .ce(grp_fu_304_ce),
    .dout(grp_fu_304_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U903(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_305_p0),
    .din1(exp_res_1_V_reg_2146_pp0_iter9_reg),
    .ce(grp_fu_305_ce),
    .dout(grp_fu_305_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U904(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_306_p0),
    .din1(exp_res_8_V_reg_2213_pp0_iter9_reg),
    .ce(grp_fu_306_ce),
    .dout(grp_fu_306_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U905(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_307_p0),
    .din1(exp_res_9_V_reg_2219_pp0_iter9_reg),
    .ce(grp_fu_307_ce),
    .dout(grp_fu_307_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln703_3_reg_2225 <= add_ln703_3_fu_1759_p2;
        data_array_0_V_reg_1956_pp0_iter2_reg <= data_array_0_V_reg_1956_pp0_iter1_reg;
        data_array_1_V_reg_1962_pp0_iter2_reg <= data_array_1_V_reg_1962_pp0_iter1_reg;
        data_array_2_V_reg_1968_pp0_iter2_reg <= data_array_2_V_reg_1968_pp0_iter1_reg;
        data_array_3_V_reg_1974_pp0_iter2_reg <= data_array_3_V_reg_1974_pp0_iter1_reg;
        data_array_4_V_reg_1980_pp0_iter2_reg <= data_array_4_V_reg_1980_pp0_iter1_reg;
        data_array_5_V_reg_1986_pp0_iter2_reg <= data_array_5_V_reg_1986_pp0_iter1_reg;
        data_array_6_V_reg_1992_pp0_iter2_reg <= data_array_6_V_reg_1992_pp0_iter1_reg;
        data_array_7_V_reg_1998_pp0_iter2_reg <= data_array_7_V_reg_1998_pp0_iter1_reg;
        data_array_8_V_reg_2004_pp0_iter2_reg <= data_array_8_V_reg_2004_pp0_iter1_reg;
        data_array_9_V_reg_2011_pp0_iter2_reg <= data_array_9_V_reg_2011_pp0_iter1_reg;
        exp_res_0_V_reg_2140_pp0_iter6_reg <= exp_res_0_V_reg_2140;
        exp_res_0_V_reg_2140_pp0_iter7_reg <= exp_res_0_V_reg_2140_pp0_iter6_reg;
        exp_res_0_V_reg_2140_pp0_iter8_reg <= exp_res_0_V_reg_2140_pp0_iter7_reg;
        exp_res_0_V_reg_2140_pp0_iter9_reg <= exp_res_0_V_reg_2140_pp0_iter8_reg;
        exp_res_1_V_reg_2146_pp0_iter6_reg <= exp_res_1_V_reg_2146;
        exp_res_1_V_reg_2146_pp0_iter7_reg <= exp_res_1_V_reg_2146_pp0_iter6_reg;
        exp_res_1_V_reg_2146_pp0_iter8_reg <= exp_res_1_V_reg_2146_pp0_iter7_reg;
        exp_res_1_V_reg_2146_pp0_iter9_reg <= exp_res_1_V_reg_2146_pp0_iter8_reg;
        exp_res_2_V_reg_2152_pp0_iter6_reg <= exp_res_2_V_reg_2152;
        exp_res_2_V_reg_2152_pp0_iter7_reg <= exp_res_2_V_reg_2152_pp0_iter6_reg;
        exp_res_2_V_reg_2152_pp0_iter8_reg <= exp_res_2_V_reg_2152_pp0_iter7_reg;
        exp_res_2_V_reg_2152_pp0_iter9_reg <= exp_res_2_V_reg_2152_pp0_iter8_reg;
        exp_res_3_V_reg_2158_pp0_iter6_reg <= exp_res_3_V_reg_2158;
        exp_res_3_V_reg_2158_pp0_iter7_reg <= exp_res_3_V_reg_2158_pp0_iter6_reg;
        exp_res_3_V_reg_2158_pp0_iter8_reg <= exp_res_3_V_reg_2158_pp0_iter7_reg;
        exp_res_3_V_reg_2158_pp0_iter9_reg <= exp_res_3_V_reg_2158_pp0_iter8_reg;
        exp_res_4_V_reg_2195_pp0_iter7_reg <= exp_res_4_V_reg_2195;
        exp_res_4_V_reg_2195_pp0_iter8_reg <= exp_res_4_V_reg_2195_pp0_iter7_reg;
        exp_res_4_V_reg_2195_pp0_iter9_reg <= exp_res_4_V_reg_2195_pp0_iter8_reg;
        exp_res_5_V_reg_2201_pp0_iter7_reg <= exp_res_5_V_reg_2201;
        exp_res_5_V_reg_2201_pp0_iter8_reg <= exp_res_5_V_reg_2201_pp0_iter7_reg;
        exp_res_5_V_reg_2201_pp0_iter9_reg <= exp_res_5_V_reg_2201_pp0_iter8_reg;
        exp_res_6_V_reg_2207_pp0_iter7_reg <= exp_res_6_V_reg_2207;
        exp_res_6_V_reg_2207_pp0_iter8_reg <= exp_res_6_V_reg_2207_pp0_iter7_reg;
        exp_res_6_V_reg_2207_pp0_iter9_reg <= exp_res_6_V_reg_2207_pp0_iter8_reg;
        exp_res_7_V_reg_2179_pp0_iter6_reg <= exp_res_7_V_reg_2179;
        exp_res_7_V_reg_2179_pp0_iter7_reg <= exp_res_7_V_reg_2179_pp0_iter6_reg;
        exp_res_7_V_reg_2179_pp0_iter8_reg <= exp_res_7_V_reg_2179_pp0_iter7_reg;
        exp_res_7_V_reg_2179_pp0_iter9_reg <= exp_res_7_V_reg_2179_pp0_iter8_reg;
        exp_res_8_V_reg_2213_pp0_iter7_reg <= exp_res_8_V_reg_2213;
        exp_res_8_V_reg_2213_pp0_iter8_reg <= exp_res_8_V_reg_2213_pp0_iter7_reg;
        exp_res_8_V_reg_2213_pp0_iter9_reg <= exp_res_8_V_reg_2213_pp0_iter8_reg;
        exp_res_9_V_reg_2219_pp0_iter7_reg <= exp_res_9_V_reg_2219;
        exp_res_9_V_reg_2219_pp0_iter8_reg <= exp_res_9_V_reg_2219_pp0_iter7_reg;
        exp_res_9_V_reg_2219_pp0_iter9_reg <= exp_res_9_V_reg_2219_pp0_iter8_reg;
        icmp_ln1496_8_reg_2060 <= icmp_ln1496_8_fu_801_p2;
        inv_exp_sum_V_reg_2240 <= invert_table2_q0;
        select_ln86_6_reg_2050 <= select_ln86_6_fu_785_p3;
        select_ln86_7_reg_2055 <= select_ln86_7_fu_795_p3;
        tmp_data_0_V_reg_2309 <= {{grp_fu_298_p2[23:8]}};
        tmp_data_1_V_reg_2314 <= {{grp_fu_305_p2[23:8]}};
        tmp_data_2_V_reg_2319 <= {{grp_fu_299_p2[23:8]}};
        tmp_data_3_V_reg_2324 <= {{grp_fu_302_p2[23:8]}};
        tmp_data_4_V_reg_2329 <= {{grp_fu_300_p2[23:8]}};
        tmp_data_5_V_reg_2334 <= {{grp_fu_304_p2[23:8]}};
        tmp_data_6_V_reg_2339 <= {{grp_fu_301_p2[23:8]}};
        tmp_data_7_V_reg_2344 <= {{grp_fu_303_p2[23:8]}};
        tmp_data_8_V_reg_2349 <= {{grp_fu_306_p2[23:8]}};
        tmp_data_9_V_reg_2354 <= {{grp_fu_307_p2[23:8]}};
        y_V_10_reg_2230 <= {{exp_sum_V_fu_1784_p2[11:2]}};
        y_V_1_reg_2070 <= y_V_1_fu_1426_p3;
        y_V_2_reg_2075 <= y_V_2_fu_1460_p3;
        y_V_3_reg_2080 <= y_V_3_fu_1494_p3;
        y_V_4_reg_2085 <= y_V_4_fu_1528_p3;
        y_V_4_reg_2085_pp0_iter4_reg <= y_V_4_reg_2085;
        y_V_5_reg_2090 <= y_V_5_fu_1562_p3;
        y_V_5_reg_2090_pp0_iter4_reg <= y_V_5_reg_2090;
        y_V_6_reg_2095 <= y_V_6_fu_1596_p3;
        y_V_6_reg_2095_pp0_iter4_reg <= y_V_6_reg_2095;
        y_V_7_reg_2100 <= y_V_7_fu_1630_p3;
        y_V_8_reg_2105 <= y_V_8_fu_1664_p3;
        y_V_8_reg_2105_pp0_iter4_reg <= y_V_8_reg_2105;
        y_V_9_reg_2110 <= y_V_9_fu_1698_p3;
        y_V_9_reg_2110_pp0_iter4_reg <= y_V_9_reg_2110;
        y_V_reg_2065 <= y_V_fu_1392_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_array_0_V_reg_1956 <= data_V_data_0_V_dout;
        data_array_0_V_reg_1956_pp0_iter1_reg <= data_array_0_V_reg_1956;
        data_array_1_V_reg_1962 <= data_V_data_1_V_dout;
        data_array_1_V_reg_1962_pp0_iter1_reg <= data_array_1_V_reg_1962;
        data_array_2_V_reg_1968 <= data_V_data_2_V_dout;
        data_array_2_V_reg_1968_pp0_iter1_reg <= data_array_2_V_reg_1968;
        data_array_3_V_reg_1974 <= data_V_data_3_V_dout;
        data_array_3_V_reg_1974_pp0_iter1_reg <= data_array_3_V_reg_1974;
        data_array_4_V_reg_1980 <= data_V_data_4_V_dout;
        data_array_4_V_reg_1980_pp0_iter1_reg <= data_array_4_V_reg_1980;
        data_array_5_V_reg_1986 <= data_V_data_5_V_dout;
        data_array_5_V_reg_1986_pp0_iter1_reg <= data_array_5_V_reg_1986;
        data_array_6_V_reg_1992 <= data_V_data_6_V_dout;
        data_array_6_V_reg_1992_pp0_iter1_reg <= data_array_6_V_reg_1992;
        data_array_7_V_reg_1998 <= data_V_data_7_V_dout;
        data_array_7_V_reg_1998_pp0_iter1_reg <= data_array_7_V_reg_1998;
        data_array_8_V_reg_2004 <= data_V_data_8_V_dout;
        data_array_8_V_reg_2004_pp0_iter1_reg <= data_array_8_V_reg_2004;
        data_array_9_V_reg_2011 <= data_V_data_9_V_dout;
        data_array_9_V_reg_2011_pp0_iter1_reg <= data_array_9_V_reg_2011;
        icmp_ln1496_1_reg_2023 <= icmp_ln1496_1_fu_715_p2;
        icmp_ln1496_3_reg_2028 <= icmp_ln1496_3_fu_721_p2;
        icmp_ln1496_4_reg_2033 <= icmp_ln1496_4_fu_727_p2;
        icmp_ln1496_reg_2018 <= icmp_ln1496_fu_709_p2;
        select_ln86_2_reg_2038 <= select_ln86_2_fu_749_p3;
        select_ln86_5_reg_2044 <= select_ln86_5_fu_773_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_0_V_reg_2140 <= exp_table1_q0;
        exp_res_1_V_reg_2146 <= exp_table1_q1;
        exp_res_2_V_reg_2152 <= exp_table1_q2;
        exp_res_3_V_reg_2158 <= exp_table1_q3;
        exp_res_7_V_reg_2179 <= exp_table1_q4;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_4_V_reg_2195 <= exp_table1_q5;
        exp_res_5_V_reg_2201 <= exp_table1_q6;
        exp_res_6_V_reg_2207 <= exp_table1_q7;
        exp_res_8_V_reg_2213 <= exp_table1_q8;
        exp_res_9_V_reg_2219 <= exp_table1_q9;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to11 = 1'b1;
    end else begin
        ap_idle_pp0_0to11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to11 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce5 = 1'b1;
    end else begin
        exp_table1_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce6 = 1'b1;
    end else begin
        exp_table1_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce7 = 1'b1;
    end else begin
        exp_table1_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce8 = 1'b1;
    end else begin
        exp_table1_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce9 = 1'b1;
    end else begin
        exp_table1_ce9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_298_ce = 1'b1;
    end else begin
        grp_fu_298_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_299_ce = 1'b1;
    end else begin
        grp_fu_299_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_300_ce = 1'b1;
    end else begin
        grp_fu_300_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_301_ce = 1'b1;
    end else begin
        grp_fu_301_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_302_ce = 1'b1;
    end else begin
        grp_fu_302_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_303_ce = 1'b1;
    end else begin
        grp_fu_303_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_304_ce = 1'b1;
    end else begin
        grp_fu_304_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_305_ce = 1'b1;
    end else begin
        grp_fu_305_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_306_ce = 1'b1;
    end else begin
        grp_fu_306_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_307_ce = 1'b1;
    end else begin
        grp_fu_307_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_1750_p2 = ($signed(exp_res_7_V_reg_2179) + $signed(exp_res_2_V_reg_2152));

assign add_ln703_2_fu_1754_p2 = ($signed(exp_res_3_V_reg_2158) + $signed(add_ln703_1_fu_1750_p2));

assign add_ln703_3_fu_1759_p2 = (add_ln703_fu_1746_p2 + add_ln703_2_fu_1754_p2);

assign add_ln703_4_fu_1765_p2 = ($signed(exp_res_5_V_reg_2201) + $signed(exp_res_6_V_reg_2207));

assign add_ln703_5_fu_1769_p2 = ($signed(exp_res_8_V_reg_2213) + $signed(exp_res_9_V_reg_2219));

assign add_ln703_6_fu_1773_p2 = ($signed(exp_res_4_V_reg_2195) + $signed(add_ln703_5_fu_1769_p2));

assign add_ln703_7_fu_1778_p2 = (add_ln703_4_fu_1765_p2 + add_ln703_6_fu_1773_p2);

assign add_ln703_fu_1746_p2 = ($signed(exp_res_1_V_reg_2146) + $signed(exp_res_0_V_reg_2140));

assign and_ln786_1_fu_902_p2 = (xor_ln786_1_fu_896_p2 & tmp_22_fu_880_p3);

assign and_ln786_2_fu_957_p2 = (xor_ln786_2_fu_951_p2 & tmp_24_fu_935_p3);

assign and_ln786_3_fu_1012_p2 = (xor_ln786_3_fu_1006_p2 & tmp_26_fu_990_p3);

assign and_ln786_4_fu_1067_p2 = (xor_ln786_4_fu_1061_p2 & tmp_28_fu_1045_p3);

assign and_ln786_5_fu_1122_p2 = (xor_ln786_5_fu_1116_p2 & tmp_30_fu_1100_p3);

assign and_ln786_6_fu_1177_p2 = (xor_ln786_6_fu_1171_p2 & tmp_32_fu_1155_p3);

assign and_ln786_7_fu_1232_p2 = (xor_ln786_7_fu_1226_p2 & tmp_34_fu_1210_p3);

assign and_ln786_8_fu_1287_p2 = (xor_ln786_8_fu_1281_p2 & tmp_36_fu_1265_p3);

assign and_ln786_9_fu_1342_p2 = (xor_ln786_9_fu_1336_p2 & tmp_38_fu_1320_p3);

assign and_ln786_fu_847_p2 = (xor_ln786_fu_841_p2 & tmp_fu_825_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op14 == 1'b0))) | ((io_acc_block_signal_op322 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op14 == 1'b0))) | ((io_acc_block_signal_op322 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op14 == 1'b0))) | ((io_acc_block_signal_op322 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter12 = (io_acc_block_signal_op322 == 1'b0);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (io_acc_block_signal_op14 == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_sum_V_fu_1784_p2 = (add_ln703_3_reg_2225 + add_ln703_7_fu_1778_p2);

assign exp_table1_address0 = zext_ln230_fu_1706_p1;

assign exp_table1_address1 = zext_ln230_1_fu_1710_p1;

assign exp_table1_address2 = zext_ln230_2_fu_1714_p1;

assign exp_table1_address3 = zext_ln230_3_fu_1718_p1;

assign exp_table1_address4 = zext_ln230_7_fu_1722_p1;

assign exp_table1_address5 = zext_ln230_4_fu_1726_p1;

assign exp_table1_address6 = zext_ln230_5_fu_1730_p1;

assign exp_table1_address7 = zext_ln230_6_fu_1734_p1;

assign exp_table1_address8 = zext_ln230_8_fu_1738_p1;

assign exp_table1_address9 = zext_ln230_9_fu_1742_p1;

assign grp_fu_298_p0 = sext_ln1118_fu_1803_p1;

assign grp_fu_299_p0 = sext_ln1118_fu_1803_p1;

assign grp_fu_300_p0 = sext_ln1118_fu_1803_p1;

assign grp_fu_301_p0 = sext_ln1118_fu_1803_p1;

assign grp_fu_302_p0 = sext_ln1118_fu_1803_p1;

assign grp_fu_303_p0 = sext_ln1118_fu_1803_p1;

assign grp_fu_304_p0 = sext_ln1118_fu_1803_p1;

assign grp_fu_305_p0 = sext_ln1118_fu_1803_p1;

assign grp_fu_306_p0 = sext_ln1118_fu_1803_p1;

assign grp_fu_307_p0 = sext_ln1118_fu_1803_p1;

assign icmp_ln1496_1_fu_715_p0 = data_V_data_2_V_dout;

assign icmp_ln1496_1_fu_715_p1 = data_V_data_3_V_dout;

assign icmp_ln1496_1_fu_715_p2 = (($signed(icmp_ln1496_1_fu_715_p0) < $signed(icmp_ln1496_1_fu_715_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_743_p2 = (($signed(select_ln86_fu_733_p3) < $signed(select_ln86_1_fu_738_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_721_p0 = data_V_data_4_V_dout;

assign icmp_ln1496_3_fu_721_p1 = data_V_data_5_V_dout;

assign icmp_ln1496_3_fu_721_p2 = (($signed(icmp_ln1496_3_fu_721_p0) < $signed(icmp_ln1496_3_fu_721_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_727_p0 = data_V_data_6_V_dout;

assign icmp_ln1496_4_fu_727_p1 = data_V_data_7_V_dout;

assign icmp_ln1496_4_fu_727_p2 = (($signed(icmp_ln1496_4_fu_727_p0) < $signed(icmp_ln1496_4_fu_727_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_767_p2 = (($signed(select_ln86_3_fu_757_p3) < $signed(select_ln86_4_fu_762_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_781_p2 = (($signed(select_ln86_2_reg_2038) < $signed(select_ln86_5_reg_2044)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_791_p2 = (($signed(data_array_8_V_reg_2004_pp0_iter1_reg) < $signed(data_array_9_V_reg_2011_pp0_iter1_reg)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_801_p2 = (($signed(select_ln86_6_fu_785_p3) < $signed(select_ln86_7_fu_795_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_709_p0 = data_V_data_0_V_dout;

assign icmp_ln1496_fu_709_p1 = data_V_data_1_V_dout;

assign icmp_ln1496_fu_709_p2 = (($signed(icmp_ln1496_fu_709_p0) < $signed(icmp_ln1496_fu_709_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln238_fu_1799_p1;

assign io_acc_block_signal_op14 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign io_acc_block_signal_op322 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign or_ln340_1_fu_920_p2 = (xor_ln340_1_fu_914_p2 | tmp_23_fu_888_p3);

assign or_ln340_2_fu_975_p2 = (xor_ln340_2_fu_969_p2 | tmp_25_fu_943_p3);

assign or_ln340_3_fu_1030_p2 = (xor_ln340_3_fu_1024_p2 | tmp_27_fu_998_p3);

assign or_ln340_4_fu_1085_p2 = (xor_ln340_4_fu_1079_p2 | tmp_29_fu_1053_p3);

assign or_ln340_5_fu_1140_p2 = (xor_ln340_5_fu_1134_p2 | tmp_31_fu_1108_p3);

assign or_ln340_6_fu_1195_p2 = (xor_ln340_6_fu_1189_p2 | tmp_33_fu_1163_p3);

assign or_ln340_7_fu_1250_p2 = (xor_ln340_7_fu_1244_p2 | tmp_35_fu_1218_p3);

assign or_ln340_8_fu_1305_p2 = (xor_ln340_8_fu_1299_p2 | tmp_37_fu_1273_p3);

assign or_ln340_9_fu_1360_p2 = (xor_ln340_9_fu_1354_p2 | tmp_39_fu_1328_p3);

assign or_ln340_fu_865_p2 = (xor_ln340_fu_859_p2 | tmp_21_fu_833_p3);

assign res_V_data_0_V_din = tmp_data_0_V_reg_2309;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2314;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2319;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2324;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2329;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2334;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2339;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2344;

assign res_V_data_8_V_din = tmp_data_8_V_reg_2349;

assign res_V_data_9_V_din = tmp_data_9_V_reg_2354;

assign select_ln340_10_fu_1546_p3 = ((xor_ln340_15_fu_1128_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_fu_1536_p4);

assign select_ln340_12_fu_1580_p3 = ((xor_ln340_16_fu_1183_p2[0:0] === 1'b1) ? 10'd511 : tmp_17_fu_1570_p4);

assign select_ln340_14_fu_1614_p3 = ((xor_ln340_17_fu_1238_p2[0:0] === 1'b1) ? 10'd511 : tmp_18_fu_1604_p4);

assign select_ln340_16_fu_1648_p3 = ((xor_ln340_18_fu_1293_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_fu_1638_p4);

assign select_ln340_18_fu_1682_p3 = ((xor_ln340_19_fu_1348_p2[0:0] === 1'b1) ? 10'd511 : tmp_20_fu_1672_p4);

assign select_ln340_2_fu_1410_p3 = ((xor_ln340_11_fu_908_p2[0:0] === 1'b1) ? 10'd511 : tmp_12_fu_1400_p4);

assign select_ln340_4_fu_1444_p3 = ((xor_ln340_12_fu_963_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_fu_1434_p4);

assign select_ln340_6_fu_1478_p3 = ((xor_ln340_13_fu_1018_p2[0:0] === 1'b1) ? 10'd511 : tmp_14_fu_1468_p4);

assign select_ln340_8_fu_1512_p3 = ((xor_ln340_14_fu_1073_p2[0:0] === 1'b1) ? 10'd511 : tmp_15_fu_1502_p4);

assign select_ln340_fu_1376_p3 = ((xor_ln340_10_fu_853_p2[0:0] === 1'b1) ? 10'd511 : tmp_11_fu_1366_p4);

assign select_ln388_1_fu_1418_p3 = ((and_ln786_1_fu_902_p2[0:0] === 1'b1) ? 10'd512 : tmp_12_fu_1400_p4);

assign select_ln388_2_fu_1452_p3 = ((and_ln786_2_fu_957_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_fu_1434_p4);

assign select_ln388_3_fu_1486_p3 = ((and_ln786_3_fu_1012_p2[0:0] === 1'b1) ? 10'd512 : tmp_14_fu_1468_p4);

assign select_ln388_4_fu_1520_p3 = ((and_ln786_4_fu_1067_p2[0:0] === 1'b1) ? 10'd512 : tmp_15_fu_1502_p4);

assign select_ln388_5_fu_1554_p3 = ((and_ln786_5_fu_1122_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_fu_1536_p4);

assign select_ln388_6_fu_1588_p3 = ((and_ln786_6_fu_1177_p2[0:0] === 1'b1) ? 10'd512 : tmp_17_fu_1570_p4);

assign select_ln388_7_fu_1622_p3 = ((and_ln786_7_fu_1232_p2[0:0] === 1'b1) ? 10'd512 : tmp_18_fu_1604_p4);

assign select_ln388_8_fu_1656_p3 = ((and_ln786_8_fu_1287_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_fu_1638_p4);

assign select_ln388_9_fu_1690_p3 = ((and_ln786_9_fu_1342_p2[0:0] === 1'b1) ? 10'd512 : tmp_20_fu_1672_p4);

assign select_ln388_fu_1384_p3 = ((and_ln786_fu_847_p2[0:0] === 1'b1) ? 10'd512 : tmp_11_fu_1366_p4);

assign select_ln86_1_fu_738_p3 = ((icmp_ln1496_1_reg_2023[0:0] === 1'b1) ? data_array_3_V_reg_1974 : data_array_2_V_reg_1968);

assign select_ln86_2_fu_749_p3 = ((icmp_ln1496_2_fu_743_p2[0:0] === 1'b1) ? select_ln86_1_fu_738_p3 : select_ln86_fu_733_p3);

assign select_ln86_3_fu_757_p3 = ((icmp_ln1496_3_reg_2028[0:0] === 1'b1) ? data_array_5_V_reg_1986 : data_array_4_V_reg_1980);

assign select_ln86_4_fu_762_p3 = ((icmp_ln1496_4_reg_2033[0:0] === 1'b1) ? data_array_7_V_reg_1998 : data_array_6_V_reg_1992);

assign select_ln86_5_fu_773_p3 = ((icmp_ln1496_5_fu_767_p2[0:0] === 1'b1) ? select_ln86_4_fu_762_p3 : select_ln86_3_fu_757_p3);

assign select_ln86_6_fu_785_p3 = ((icmp_ln1496_6_fu_781_p2[0:0] === 1'b1) ? select_ln86_5_reg_2044 : select_ln86_2_reg_2038);

assign select_ln86_7_fu_795_p3 = ((icmp_ln1496_7_fu_791_p2[0:0] === 1'b1) ? data_array_9_V_reg_2011_pp0_iter1_reg : data_array_8_V_reg_2004_pp0_iter1_reg);

assign select_ln86_fu_733_p3 = ((icmp_ln1496_reg_2018[0:0] === 1'b1) ? data_array_1_V_reg_1962 : data_array_0_V_reg_1956);

assign sext_ln1118_fu_1803_p1 = $signed(inv_exp_sum_V_reg_2240);

assign sext_ln703_10_fu_1311_p1 = data_array_9_V_reg_2011_pp0_iter2_reg;

assign sext_ln703_1_fu_815_p1 = $signed(x_max_V_fu_807_p3);

assign sext_ln703_2_fu_871_p1 = data_array_1_V_reg_1962_pp0_iter2_reg;

assign sext_ln703_3_fu_926_p1 = data_array_2_V_reg_1968_pp0_iter2_reg;

assign sext_ln703_4_fu_981_p1 = data_array_3_V_reg_1974_pp0_iter2_reg;

assign sext_ln703_5_fu_1036_p1 = data_array_4_V_reg_1980_pp0_iter2_reg;

assign sext_ln703_6_fu_1091_p1 = data_array_5_V_reg_1986_pp0_iter2_reg;

assign sext_ln703_7_fu_1146_p1 = data_array_6_V_reg_1992_pp0_iter2_reg;

assign sext_ln703_8_fu_1201_p1 = data_array_7_V_reg_1998_pp0_iter2_reg;

assign sext_ln703_9_fu_1256_p1 = data_array_8_V_reg_2004_pp0_iter2_reg;

assign sext_ln703_fu_812_p1 = data_array_0_V_reg_1956_pp0_iter2_reg;

assign sub_ln1193_1_fu_874_p2 = ($signed(sext_ln703_2_fu_871_p1) - $signed(sext_ln703_1_fu_815_p1));

assign sub_ln1193_2_fu_929_p2 = ($signed(sext_ln703_3_fu_926_p1) - $signed(sext_ln703_1_fu_815_p1));

assign sub_ln1193_3_fu_984_p2 = ($signed(sext_ln703_4_fu_981_p1) - $signed(sext_ln703_1_fu_815_p1));

assign sub_ln1193_4_fu_1039_p2 = ($signed(sext_ln703_5_fu_1036_p1) - $signed(sext_ln703_1_fu_815_p1));

assign sub_ln1193_5_fu_1094_p2 = ($signed(sext_ln703_6_fu_1091_p1) - $signed(sext_ln703_1_fu_815_p1));

assign sub_ln1193_6_fu_1149_p2 = ($signed(sext_ln703_7_fu_1146_p1) - $signed(sext_ln703_1_fu_815_p1));

assign sub_ln1193_7_fu_1204_p2 = ($signed(sext_ln703_8_fu_1201_p1) - $signed(sext_ln703_1_fu_815_p1));

assign sub_ln1193_8_fu_1259_p2 = ($signed(sext_ln703_9_fu_1256_p1) - $signed(sext_ln703_1_fu_815_p1));

assign sub_ln1193_9_fu_1314_p2 = ($signed(sext_ln703_10_fu_1311_p1) - $signed(sext_ln703_1_fu_815_p1));

assign sub_ln1193_fu_819_p2 = ($signed(sext_ln703_fu_812_p1) - $signed(sext_ln703_1_fu_815_p1));

assign tmp_11_fu_1366_p4 = {{sub_ln1193_fu_819_p2[11:2]}};

assign tmp_12_fu_1400_p4 = {{sub_ln1193_1_fu_874_p2[11:2]}};

assign tmp_13_fu_1434_p4 = {{sub_ln1193_2_fu_929_p2[11:2]}};

assign tmp_14_fu_1468_p4 = {{sub_ln1193_3_fu_984_p2[11:2]}};

assign tmp_15_fu_1502_p4 = {{sub_ln1193_4_fu_1039_p2[11:2]}};

assign tmp_16_fu_1536_p4 = {{sub_ln1193_5_fu_1094_p2[11:2]}};

assign tmp_17_fu_1570_p4 = {{sub_ln1193_6_fu_1149_p2[11:2]}};

assign tmp_18_fu_1604_p4 = {{sub_ln1193_7_fu_1204_p2[11:2]}};

assign tmp_19_fu_1638_p4 = {{sub_ln1193_8_fu_1259_p2[11:2]}};

assign tmp_20_fu_1672_p4 = {{sub_ln1193_9_fu_1314_p2[11:2]}};

assign tmp_21_fu_833_p3 = sub_ln1193_fu_819_p2[32'd11];

assign tmp_22_fu_880_p3 = sub_ln1193_1_fu_874_p2[32'd12];

assign tmp_23_fu_888_p3 = sub_ln1193_1_fu_874_p2[32'd11];

assign tmp_24_fu_935_p3 = sub_ln1193_2_fu_929_p2[32'd12];

assign tmp_25_fu_943_p3 = sub_ln1193_2_fu_929_p2[32'd11];

assign tmp_26_fu_990_p3 = sub_ln1193_3_fu_984_p2[32'd12];

assign tmp_27_fu_998_p3 = sub_ln1193_3_fu_984_p2[32'd11];

assign tmp_28_fu_1045_p3 = sub_ln1193_4_fu_1039_p2[32'd12];

assign tmp_29_fu_1053_p3 = sub_ln1193_4_fu_1039_p2[32'd11];

assign tmp_30_fu_1100_p3 = sub_ln1193_5_fu_1094_p2[32'd12];

assign tmp_31_fu_1108_p3 = sub_ln1193_5_fu_1094_p2[32'd11];

assign tmp_32_fu_1155_p3 = sub_ln1193_6_fu_1149_p2[32'd12];

assign tmp_33_fu_1163_p3 = sub_ln1193_6_fu_1149_p2[32'd11];

assign tmp_34_fu_1210_p3 = sub_ln1193_7_fu_1204_p2[32'd12];

assign tmp_35_fu_1218_p3 = sub_ln1193_7_fu_1204_p2[32'd11];

assign tmp_36_fu_1265_p3 = sub_ln1193_8_fu_1259_p2[32'd12];

assign tmp_37_fu_1273_p3 = sub_ln1193_8_fu_1259_p2[32'd11];

assign tmp_38_fu_1320_p3 = sub_ln1193_9_fu_1314_p2[32'd12];

assign tmp_39_fu_1328_p3 = sub_ln1193_9_fu_1314_p2[32'd11];

assign tmp_fu_825_p3 = sub_ln1193_fu_819_p2[32'd12];

assign x_max_V_fu_807_p3 = ((icmp_ln1496_8_reg_2060[0:0] === 1'b1) ? select_ln86_7_reg_2055 : select_ln86_6_reg_2050);

assign xor_ln340_10_fu_853_p2 = (tmp_fu_825_p3 ^ tmp_21_fu_833_p3);

assign xor_ln340_11_fu_908_p2 = (tmp_23_fu_888_p3 ^ tmp_22_fu_880_p3);

assign xor_ln340_12_fu_963_p2 = (tmp_25_fu_943_p3 ^ tmp_24_fu_935_p3);

assign xor_ln340_13_fu_1018_p2 = (tmp_27_fu_998_p3 ^ tmp_26_fu_990_p3);

assign xor_ln340_14_fu_1073_p2 = (tmp_29_fu_1053_p3 ^ tmp_28_fu_1045_p3);

assign xor_ln340_15_fu_1128_p2 = (tmp_31_fu_1108_p3 ^ tmp_30_fu_1100_p3);

assign xor_ln340_16_fu_1183_p2 = (tmp_33_fu_1163_p3 ^ tmp_32_fu_1155_p3);

assign xor_ln340_17_fu_1238_p2 = (tmp_35_fu_1218_p3 ^ tmp_34_fu_1210_p3);

assign xor_ln340_18_fu_1293_p2 = (tmp_37_fu_1273_p3 ^ tmp_36_fu_1265_p3);

assign xor_ln340_19_fu_1348_p2 = (tmp_39_fu_1328_p3 ^ tmp_38_fu_1320_p3);

assign xor_ln340_1_fu_914_p2 = (tmp_22_fu_880_p3 ^ 1'd1);

assign xor_ln340_2_fu_969_p2 = (tmp_24_fu_935_p3 ^ 1'd1);

assign xor_ln340_3_fu_1024_p2 = (tmp_26_fu_990_p3 ^ 1'd1);

assign xor_ln340_4_fu_1079_p2 = (tmp_28_fu_1045_p3 ^ 1'd1);

assign xor_ln340_5_fu_1134_p2 = (tmp_30_fu_1100_p3 ^ 1'd1);

assign xor_ln340_6_fu_1189_p2 = (tmp_32_fu_1155_p3 ^ 1'd1);

assign xor_ln340_7_fu_1244_p2 = (tmp_34_fu_1210_p3 ^ 1'd1);

assign xor_ln340_8_fu_1299_p2 = (tmp_36_fu_1265_p3 ^ 1'd1);

assign xor_ln340_9_fu_1354_p2 = (tmp_38_fu_1320_p3 ^ 1'd1);

assign xor_ln340_fu_859_p2 = (tmp_fu_825_p3 ^ 1'd1);

assign xor_ln786_1_fu_896_p2 = (tmp_23_fu_888_p3 ^ 1'd1);

assign xor_ln786_2_fu_951_p2 = (tmp_25_fu_943_p3 ^ 1'd1);

assign xor_ln786_3_fu_1006_p2 = (tmp_27_fu_998_p3 ^ 1'd1);

assign xor_ln786_4_fu_1061_p2 = (tmp_29_fu_1053_p3 ^ 1'd1);

assign xor_ln786_5_fu_1116_p2 = (tmp_31_fu_1108_p3 ^ 1'd1);

assign xor_ln786_6_fu_1171_p2 = (tmp_33_fu_1163_p3 ^ 1'd1);

assign xor_ln786_7_fu_1226_p2 = (tmp_35_fu_1218_p3 ^ 1'd1);

assign xor_ln786_8_fu_1281_p2 = (tmp_37_fu_1273_p3 ^ 1'd1);

assign xor_ln786_9_fu_1336_p2 = (tmp_39_fu_1328_p3 ^ 1'd1);

assign xor_ln786_fu_841_p2 = (tmp_21_fu_833_p3 ^ 1'd1);

assign y_V_1_fu_1426_p3 = ((or_ln340_1_fu_920_p2[0:0] === 1'b1) ? select_ln340_2_fu_1410_p3 : select_ln388_1_fu_1418_p3);

assign y_V_2_fu_1460_p3 = ((or_ln340_2_fu_975_p2[0:0] === 1'b1) ? select_ln340_4_fu_1444_p3 : select_ln388_2_fu_1452_p3);

assign y_V_3_fu_1494_p3 = ((or_ln340_3_fu_1030_p2[0:0] === 1'b1) ? select_ln340_6_fu_1478_p3 : select_ln388_3_fu_1486_p3);

assign y_V_4_fu_1528_p3 = ((or_ln340_4_fu_1085_p2[0:0] === 1'b1) ? select_ln340_8_fu_1512_p3 : select_ln388_4_fu_1520_p3);

assign y_V_5_fu_1562_p3 = ((or_ln340_5_fu_1140_p2[0:0] === 1'b1) ? select_ln340_10_fu_1546_p3 : select_ln388_5_fu_1554_p3);

assign y_V_6_fu_1596_p3 = ((or_ln340_6_fu_1195_p2[0:0] === 1'b1) ? select_ln340_12_fu_1580_p3 : select_ln388_6_fu_1588_p3);

assign y_V_7_fu_1630_p3 = ((or_ln340_7_fu_1250_p2[0:0] === 1'b1) ? select_ln340_14_fu_1614_p3 : select_ln388_7_fu_1622_p3);

assign y_V_8_fu_1664_p3 = ((or_ln340_8_fu_1305_p2[0:0] === 1'b1) ? select_ln340_16_fu_1648_p3 : select_ln388_8_fu_1656_p3);

assign y_V_9_fu_1698_p3 = ((or_ln340_9_fu_1360_p2[0:0] === 1'b1) ? select_ln340_18_fu_1682_p3 : select_ln388_9_fu_1690_p3);

assign y_V_fu_1392_p3 = ((or_ln340_fu_865_p2[0:0] === 1'b1) ? select_ln340_fu_1376_p3 : select_ln388_fu_1384_p3);

assign zext_ln230_1_fu_1710_p1 = y_V_1_reg_2070;

assign zext_ln230_2_fu_1714_p1 = y_V_2_reg_2075;

assign zext_ln230_3_fu_1718_p1 = y_V_3_reg_2080;

assign zext_ln230_4_fu_1726_p1 = y_V_4_reg_2085_pp0_iter4_reg;

assign zext_ln230_5_fu_1730_p1 = y_V_5_reg_2090_pp0_iter4_reg;

assign zext_ln230_6_fu_1734_p1 = y_V_6_reg_2095_pp0_iter4_reg;

assign zext_ln230_7_fu_1722_p1 = y_V_7_reg_2100;

assign zext_ln230_8_fu_1738_p1 = y_V_8_reg_2105_pp0_iter4_reg;

assign zext_ln230_9_fu_1742_p1 = y_V_9_reg_2110_pp0_iter4_reg;

assign zext_ln230_fu_1706_p1 = y_V_reg_2065;

assign zext_ln238_fu_1799_p1 = y_V_10_reg_2230;

endmodule //softmax_stable_array_array_softmax_config13_s
