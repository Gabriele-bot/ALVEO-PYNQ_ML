-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_array_array_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    data_V_data_4_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    data_V_data_4_V_empty_n : IN STD_LOGIC;
    data_V_data_4_V_read : OUT STD_LOGIC;
    data_V_data_5_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    data_V_data_5_V_empty_n : IN STD_LOGIC;
    data_V_data_5_V_read : OUT STD_LOGIC;
    data_V_data_6_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    data_V_data_6_V_empty_n : IN STD_LOGIC;
    data_V_data_6_V_read : OUT STD_LOGIC;
    data_V_data_7_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    data_V_data_7_V_empty_n : IN STD_LOGIC;
    data_V_data_7_V_read : OUT STD_LOGIC;
    data_V_data_8_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    data_V_data_8_V_empty_n : IN STD_LOGIC;
    data_V_data_8_V_read : OUT STD_LOGIC;
    data_V_data_9_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    data_V_data_9_V_empty_n : IN STD_LOGIC;
    data_V_data_9_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC;
    res_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_4_V_full_n : IN STD_LOGIC;
    res_V_data_4_V_write : OUT STD_LOGIC;
    res_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_5_V_full_n : IN STD_LOGIC;
    res_V_data_5_V_write : OUT STD_LOGIC;
    res_V_data_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_6_V_full_n : IN STD_LOGIC;
    res_V_data_6_V_write : OUT STD_LOGIC;
    res_V_data_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_7_V_full_n : IN STD_LOGIC;
    res_V_data_7_V_write : OUT STD_LOGIC;
    res_V_data_8_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_8_V_full_n : IN STD_LOGIC;
    res_V_data_8_V_write : OUT STD_LOGIC;
    res_V_data_9_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_9_V_full_n : IN STD_LOGIC;
    res_V_data_9_V_write : OUT STD_LOGIC;
    data_V_data_0_V_blk_n : OUT STD_LOGIC;
    data_V_data_1_V_blk_n : OUT STD_LOGIC;
    data_V_data_2_V_blk_n : OUT STD_LOGIC;
    data_V_data_3_V_blk_n : OUT STD_LOGIC;
    data_V_data_4_V_blk_n : OUT STD_LOGIC;
    data_V_data_5_V_blk_n : OUT STD_LOGIC;
    data_V_data_6_V_blk_n : OUT STD_LOGIC;
    data_V_data_7_V_blk_n : OUT STD_LOGIC;
    data_V_data_8_V_blk_n : OUT STD_LOGIC;
    data_V_data_9_V_blk_n : OUT STD_LOGIC;
    res_V_data_0_V_blk_n : OUT STD_LOGIC;
    res_V_data_1_V_blk_n : OUT STD_LOGIC;
    res_V_data_2_V_blk_n : OUT STD_LOGIC;
    res_V_data_3_V_blk_n : OUT STD_LOGIC;
    res_V_data_4_V_blk_n : OUT STD_LOGIC;
    res_V_data_5_V_blk_n : OUT STD_LOGIC;
    res_V_data_6_V_blk_n : OUT STD_LOGIC;
    res_V_data_7_V_blk_n : OUT STD_LOGIC;
    res_V_data_8_V_blk_n : OUT STD_LOGIC;
    res_V_data_9_V_blk_n : OUT STD_LOGIC );
end;


architecture behav of softmax_stable_array_array_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal io_acc_block_signal_op8 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal io_acc_block_signal_op307 : STD_LOGIC;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce5 : STD_LOGIC;
    signal exp_table1_q5 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce6 : STD_LOGIC;
    signal exp_table1_q6 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce7 : STD_LOGIC;
    signal exp_table1_q7 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address8 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce8 : STD_LOGIC;
    signal exp_table1_q8 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address9 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce9 : STD_LOGIC;
    signal exp_table1_q9 : STD_LOGIC_VECTOR (11 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_array_0_V_reg_1985 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_array_1_V_reg_1990 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_array_2_V_reg_1995 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_array_3_V_reg_2000 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_array_4_V_reg_2005 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_array_5_V_reg_2010 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_array_6_V_reg_2015 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_array_7_V_reg_2020 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_array_8_V_reg_2025 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_array_9_V_reg_2032 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_2_fu_745_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_2_reg_2039 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_5_fu_787_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_5_reg_2045 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_V_fu_1409_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_reg_2051 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_1443_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_reg_2056 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_1477_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_reg_2061 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_1511_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_reg_2066 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_1545_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_2071 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_fu_1579_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_reg_2076 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_6_fu_1613_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_6_reg_2081 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_7_fu_1647_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_7_reg_2086 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_8_fu_1681_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_8_reg_2091 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_9_fu_1715_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_9_reg_2096 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_2151 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_0_V_reg_2151_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_0_V_reg_2151_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_1_V_reg_2157 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_1_V_reg_2157_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_1_V_reg_2157_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_2_V_reg_2163 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_2_V_reg_2163_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_2_V_reg_2163_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_3_V_reg_2169 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_3_V_reg_2169_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_3_V_reg_2169_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_4_V_reg_2175 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_4_V_reg_2175_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_4_V_reg_2175_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_5_V_reg_2181 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_5_V_reg_2181_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_5_V_reg_2181_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_6_V_reg_2187 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_6_V_reg_2187_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_6_V_reg_2187_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_7_V_reg_2193 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_7_V_reg_2193_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_7_V_reg_2193_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_8_V_reg_2199 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_8_V_reg_2199_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_8_V_reg_2199_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_9_V_reg_2205 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_9_V_reg_2205_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_9_V_reg_2205_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal inv_exp_sum_V_reg_2216 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln236_fu_1723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_1_fu_1727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_2_fu_1731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_3_fu_1735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_4_fu_1739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_5_fu_1743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_6_fu_1747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_7_fu_1751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_8_fu_1755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_9_fu_1759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln244_fu_1817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln1118_fu_300_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_fu_1822_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_fu_300_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_2_fu_301_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_2_fu_301_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_4_fu_302_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_4_fu_302_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_6_fu_303_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_6_fu_303_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_3_fu_304_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_3_fu_304_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_7_fu_305_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_7_fu_305_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_5_fu_306_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_5_fu_306_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_1_fu_307_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_1_fu_307_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_8_fu_308_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_8_fu_308_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_9_fu_309_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_9_fu_309_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_fu_711_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_fu_711_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_fu_717_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_fu_717_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_1_fu_725_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_1_fu_725_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_1_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_1_fu_731_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_1_fu_731_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_fu_717_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_1_fu_731_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_2_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_3_fu_753_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_3_fu_753_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_3_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_3_fu_759_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_3_fu_759_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_4_fu_767_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_4_fu_767_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_4_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_4_fu_773_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_4_fu_773_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_3_fu_759_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_4_fu_773_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_5_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_6_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_7_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_6_fu_799_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln86_7_fu_809_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1496_8_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_821_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln703_fu_829_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln703_1_fu_832_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1193_fu_836_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_fu_850_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_842_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_2_fu_888_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1193_1_fu_891_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_fu_905_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_897_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_3_fu_943_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1193_2_fu_946_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_fu_960_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_952_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_4_fu_998_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1193_3_fu_1001_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_27_fu_1015_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1007_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_5_fu_1053_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1193_4_fu_1056_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_fu_1070_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1062_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_1078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_6_fu_1108_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1193_5_fu_1111_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_31_fu_1125_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_1117_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_5_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_1151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_7_fu_1163_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1193_6_fu_1166_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_33_fu_1180_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1172_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_6_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_6_fu_1206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_8_fu_1218_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1193_7_fu_1221_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_35_fu_1235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_1227_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_7_fu_1243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_7_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_9_fu_1273_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1193_8_fu_1276_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_37_fu_1290_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1282_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_8_fu_1298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_8_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_10_fu_1328_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1193_9_fu_1331_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_39_fu_1345_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1337_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_9_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_9_fu_1371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_10_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1383_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_1393_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_1401_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_11_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_1417_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_1_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_1427_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_1435_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_12_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_1451_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_2_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_1461_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_1469_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_13_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_1485_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_3_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_1495_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_1503_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_14_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_1519_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_4_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_1529_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_4_fu_1537_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_15_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_1553_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_5_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_10_fu_1563_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_5_fu_1571_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_16_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_1587_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_6_fu_1194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_1597_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_6_fu_1605_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_17_fu_1255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1621_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_7_fu_1249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_7_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_14_fu_1631_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_7_fu_1639_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_18_fu_1310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_1655_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_8_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_8_fu_1322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_16_fu_1665_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_8_fu_1673_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_19_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_1689_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_9_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_9_fu_1377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_18_fu_1699_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_9_fu_1707_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln703_1_fu_1767_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_fu_1763_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_2_fu_1771_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_5_fu_1786_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_4_fu_1782_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_6_fu_1790_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_3_fu_1776_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_7_fu_1795_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_sum_V_fu_1801_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_V_10_fu_1807_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_300_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_1_fu_307_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_2_fu_301_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_3_fu_304_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_4_fu_302_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_5_fu_306_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_6_fu_303_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_7_fu_305_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_8_fu_308_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_9_fu_309_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to5 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component softmax_stable_array_array_softmax_config13_s_exp_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address8 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address9 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component softmax_stable_array_array_softmax_config13_s_invert_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_array_array_softmax_config13_s_exp_table1
    generic map (
        DataWidth => 12,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4,
        address5 => exp_table1_address5,
        ce5 => exp_table1_ce5,
        q5 => exp_table1_q5,
        address6 => exp_table1_address6,
        ce6 => exp_table1_ce6,
        q6 => exp_table1_q6,
        address7 => exp_table1_address7,
        ce7 => exp_table1_ce7,
        q7 => exp_table1_q7,
        address8 => exp_table1_address8,
        ce8 => exp_table1_ce8,
        q8 => exp_table1_q8,
        address9 => exp_table1_address9,
        ce9 => exp_table1_ce9,
        q9 => exp_table1_q9);

    invert_table2_U : component softmax_stable_array_array_softmax_config13_s_invert_table2
    generic map (
        DataWidth => 12,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_array_0_V_reg_1985 <= data_V_data_0_V_dout;
                data_array_1_V_reg_1990 <= data_V_data_1_V_dout;
                data_array_2_V_reg_1995 <= data_V_data_2_V_dout;
                data_array_3_V_reg_2000 <= data_V_data_3_V_dout;
                data_array_4_V_reg_2005 <= data_V_data_4_V_dout;
                data_array_5_V_reg_2010 <= data_V_data_5_V_dout;
                data_array_6_V_reg_2015 <= data_V_data_6_V_dout;
                data_array_7_V_reg_2020 <= data_V_data_7_V_dout;
                data_array_8_V_reg_2025 <= data_V_data_8_V_dout;
                data_array_9_V_reg_2032 <= data_V_data_9_V_dout;
                select_ln86_2_reg_2039 <= select_ln86_2_fu_745_p3;
                select_ln86_5_reg_2045 <= select_ln86_5_fu_787_p3;
                y_V_1_reg_2056 <= y_V_1_fu_1443_p3;
                y_V_2_reg_2061 <= y_V_2_fu_1477_p3;
                y_V_3_reg_2066 <= y_V_3_fu_1511_p3;
                y_V_4_reg_2071 <= y_V_4_fu_1545_p3;
                y_V_5_reg_2076 <= y_V_5_fu_1579_p3;
                y_V_6_reg_2081 <= y_V_6_fu_1613_p3;
                y_V_7_reg_2086 <= y_V_7_fu_1647_p3;
                y_V_8_reg_2091 <= y_V_8_fu_1681_p3;
                y_V_9_reg_2096 <= y_V_9_fu_1715_p3;
                y_V_reg_2051 <= y_V_fu_1409_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_res_0_V_reg_2151 <= exp_table1_q0;
                exp_res_1_V_reg_2157 <= exp_table1_q1;
                exp_res_2_V_reg_2163 <= exp_table1_q2;
                exp_res_3_V_reg_2169 <= exp_table1_q3;
                exp_res_4_V_reg_2175 <= exp_table1_q4;
                exp_res_5_V_reg_2181 <= exp_table1_q5;
                exp_res_6_V_reg_2187 <= exp_table1_q6;
                exp_res_7_V_reg_2193 <= exp_table1_q7;
                exp_res_8_V_reg_2199 <= exp_table1_q8;
                exp_res_9_V_reg_2205 <= exp_table1_q9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_res_0_V_reg_2151_pp0_iter4_reg <= exp_res_0_V_reg_2151;
                exp_res_0_V_reg_2151_pp0_iter5_reg <= exp_res_0_V_reg_2151_pp0_iter4_reg;
                exp_res_1_V_reg_2157_pp0_iter4_reg <= exp_res_1_V_reg_2157;
                exp_res_1_V_reg_2157_pp0_iter5_reg <= exp_res_1_V_reg_2157_pp0_iter4_reg;
                exp_res_2_V_reg_2163_pp0_iter4_reg <= exp_res_2_V_reg_2163;
                exp_res_2_V_reg_2163_pp0_iter5_reg <= exp_res_2_V_reg_2163_pp0_iter4_reg;
                exp_res_3_V_reg_2169_pp0_iter4_reg <= exp_res_3_V_reg_2169;
                exp_res_3_V_reg_2169_pp0_iter5_reg <= exp_res_3_V_reg_2169_pp0_iter4_reg;
                exp_res_4_V_reg_2175_pp0_iter4_reg <= exp_res_4_V_reg_2175;
                exp_res_4_V_reg_2175_pp0_iter5_reg <= exp_res_4_V_reg_2175_pp0_iter4_reg;
                exp_res_5_V_reg_2181_pp0_iter4_reg <= exp_res_5_V_reg_2181;
                exp_res_5_V_reg_2181_pp0_iter5_reg <= exp_res_5_V_reg_2181_pp0_iter4_reg;
                exp_res_6_V_reg_2187_pp0_iter4_reg <= exp_res_6_V_reg_2187;
                exp_res_6_V_reg_2187_pp0_iter5_reg <= exp_res_6_V_reg_2187_pp0_iter4_reg;
                exp_res_7_V_reg_2193_pp0_iter4_reg <= exp_res_7_V_reg_2193;
                exp_res_7_V_reg_2193_pp0_iter5_reg <= exp_res_7_V_reg_2193_pp0_iter4_reg;
                exp_res_8_V_reg_2199_pp0_iter4_reg <= exp_res_8_V_reg_2199;
                exp_res_8_V_reg_2199_pp0_iter5_reg <= exp_res_8_V_reg_2199_pp0_iter4_reg;
                exp_res_9_V_reg_2205_pp0_iter4_reg <= exp_res_9_V_reg_2205;
                exp_res_9_V_reg_2205_pp0_iter5_reg <= exp_res_9_V_reg_2205_pp0_iter4_reg;
                inv_exp_sum_V_reg_2216 <= invert_table2_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_1_fu_1767_p2 <= std_logic_vector(signed(exp_res_7_V_reg_2193) + signed(exp_res_2_V_reg_2163));
    add_ln703_2_fu_1771_p2 <= std_logic_vector(signed(exp_res_3_V_reg_2169) + signed(add_ln703_1_fu_1767_p2));
    add_ln703_3_fu_1776_p2 <= std_logic_vector(unsigned(add_ln703_fu_1763_p2) + unsigned(add_ln703_2_fu_1771_p2));
    add_ln703_4_fu_1782_p2 <= std_logic_vector(signed(exp_res_5_V_reg_2181) + signed(exp_res_6_V_reg_2187));
    add_ln703_5_fu_1786_p2 <= std_logic_vector(signed(exp_res_8_V_reg_2199) + signed(exp_res_9_V_reg_2205));
    add_ln703_6_fu_1790_p2 <= std_logic_vector(signed(exp_res_4_V_reg_2175) + signed(add_ln703_5_fu_1786_p2));
    add_ln703_7_fu_1795_p2 <= std_logic_vector(unsigned(add_ln703_4_fu_1782_p2) + unsigned(add_ln703_6_fu_1790_p2));
    add_ln703_fu_1763_p2 <= std_logic_vector(signed(exp_res_1_V_reg_2157) + signed(exp_res_0_V_reg_2151));
    and_ln786_1_fu_919_p2 <= (xor_ln786_1_fu_913_p2 and tmp_22_fu_897_p3);
    and_ln786_2_fu_974_p2 <= (xor_ln786_2_fu_968_p2 and tmp_24_fu_952_p3);
    and_ln786_3_fu_1029_p2 <= (xor_ln786_3_fu_1023_p2 and tmp_26_fu_1007_p3);
    and_ln786_4_fu_1084_p2 <= (xor_ln786_4_fu_1078_p2 and tmp_28_fu_1062_p3);
    and_ln786_5_fu_1139_p2 <= (xor_ln786_5_fu_1133_p2 and tmp_30_fu_1117_p3);
    and_ln786_6_fu_1194_p2 <= (xor_ln786_6_fu_1188_p2 and tmp_32_fu_1172_p3);
    and_ln786_7_fu_1249_p2 <= (xor_ln786_7_fu_1243_p2 and tmp_34_fu_1227_p3);
    and_ln786_8_fu_1304_p2 <= (xor_ln786_8_fu_1298_p2 and tmp_36_fu_1282_p3);
    and_ln786_9_fu_1359_p2 <= (xor_ln786_9_fu_1353_p2 and tmp_38_fu_1337_p3);
    and_ln786_fu_864_p2 <= (xor_ln786_fu_858_p2 and tmp_fu_842_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter6, io_acc_block_signal_op8, io_acc_block_signal_op307)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_start = ap_const_logic_1) and ((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) or ((io_acc_block_signal_op307 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter6, io_acc_block_signal_op8, io_acc_block_signal_op307)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_1) and ((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) or ((io_acc_block_signal_op307 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter6, io_acc_block_signal_op8, io_acc_block_signal_op307)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_start = ap_const_logic_1) and ((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) or ((io_acc_block_signal_op307 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, io_acc_block_signal_op8)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter6_assign_proc : process(io_acc_block_signal_op307)
    begin
                ap_block_state7_pp0_stage0_iter6 <= (io_acc_block_signal_op307 = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to5)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to5 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_0_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_1_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_2_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_3_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_4_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_4_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_4_V_blk_n <= data_V_data_4_V_empty_n;
        else 
            data_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_4_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_4_V_read <= ap_const_logic_1;
        else 
            data_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_5_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_5_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_5_V_blk_n <= data_V_data_5_V_empty_n;
        else 
            data_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_5_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_5_V_read <= ap_const_logic_1;
        else 
            data_V_data_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_6_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_6_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_6_V_blk_n <= data_V_data_6_V_empty_n;
        else 
            data_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_6_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_6_V_read <= ap_const_logic_1;
        else 
            data_V_data_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_7_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_7_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_7_V_blk_n <= data_V_data_7_V_empty_n;
        else 
            data_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_7_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_7_V_read <= ap_const_logic_1;
        else 
            data_V_data_7_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_8_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_8_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_8_V_blk_n <= data_V_data_8_V_empty_n;
        else 
            data_V_data_8_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_8_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_8_V_read <= ap_const_logic_1;
        else 
            data_V_data_8_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_9_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_9_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_9_V_blk_n <= data_V_data_9_V_empty_n;
        else 
            data_V_data_9_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_9_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_9_V_read <= ap_const_logic_1;
        else 
            data_V_data_9_V_read <= ap_const_logic_0;
        end if; 
    end process;

    exp_sum_V_fu_1801_p2 <= std_logic_vector(unsigned(add_ln703_3_fu_1776_p2) + unsigned(add_ln703_7_fu_1795_p2));
    exp_table1_address0 <= zext_ln236_fu_1723_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln236_1_fu_1727_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln236_2_fu_1731_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln236_3_fu_1735_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln236_4_fu_1739_p1(10 - 1 downto 0);
    exp_table1_address5 <= zext_ln236_5_fu_1743_p1(10 - 1 downto 0);
    exp_table1_address6 <= zext_ln236_6_fu_1747_p1(10 - 1 downto 0);
    exp_table1_address7 <= zext_ln236_7_fu_1751_p1(10 - 1 downto 0);
    exp_table1_address8 <= zext_ln236_8_fu_1755_p1(10 - 1 downto 0);
    exp_table1_address9 <= zext_ln236_9_fu_1759_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce5_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_table1_ce5 <= ap_const_logic_1;
        else 
            exp_table1_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce6_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_table1_ce6 <= ap_const_logic_1;
        else 
            exp_table1_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce7_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_table1_ce7 <= ap_const_logic_1;
        else 
            exp_table1_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce8_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_table1_ce8 <= ap_const_logic_1;
        else 
            exp_table1_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce9_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_table1_ce9 <= ap_const_logic_1;
        else 
            exp_table1_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_1_fu_725_p0 <= data_V_data_2_V_dout;
    icmp_ln1496_1_fu_725_p1 <= data_V_data_3_V_dout;
    icmp_ln1496_1_fu_725_p2 <= "1" when (signed(icmp_ln1496_1_fu_725_p0) < signed(icmp_ln1496_1_fu_725_p1)) else "0";
    icmp_ln1496_2_fu_739_p2 <= "1" when (signed(select_ln86_fu_717_p3) < signed(select_ln86_1_fu_731_p3)) else "0";
    icmp_ln1496_3_fu_753_p0 <= data_V_data_4_V_dout;
    icmp_ln1496_3_fu_753_p1 <= data_V_data_5_V_dout;
    icmp_ln1496_3_fu_753_p2 <= "1" when (signed(icmp_ln1496_3_fu_753_p0) < signed(icmp_ln1496_3_fu_753_p1)) else "0";
    icmp_ln1496_4_fu_767_p0 <= data_V_data_6_V_dout;
    icmp_ln1496_4_fu_767_p1 <= data_V_data_7_V_dout;
    icmp_ln1496_4_fu_767_p2 <= "1" when (signed(icmp_ln1496_4_fu_767_p0) < signed(icmp_ln1496_4_fu_767_p1)) else "0";
    icmp_ln1496_5_fu_781_p2 <= "1" when (signed(select_ln86_3_fu_759_p3) < signed(select_ln86_4_fu_773_p3)) else "0";
    icmp_ln1496_6_fu_795_p2 <= "1" when (signed(select_ln86_2_reg_2039) < signed(select_ln86_5_reg_2045)) else "0";
    icmp_ln1496_7_fu_805_p2 <= "1" when (signed(data_array_8_V_reg_2025) < signed(data_array_9_V_reg_2032)) else "0";
    icmp_ln1496_8_fu_815_p2 <= "1" when (signed(select_ln86_6_fu_799_p3) < signed(select_ln86_7_fu_809_p3)) else "0";
    icmp_ln1496_fu_711_p0 <= data_V_data_0_V_dout;
    icmp_ln1496_fu_711_p1 <= data_V_data_1_V_dout;
    icmp_ln1496_fu_711_p2 <= "1" when (signed(icmp_ln1496_fu_711_p0) < signed(icmp_ln1496_fu_711_p1)) else "0";
    invert_table2_address0 <= zext_ln244_fu_1817_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op307 <= (res_V_data_9_V_full_n and res_V_data_8_V_full_n and res_V_data_7_V_full_n and res_V_data_6_V_full_n and res_V_data_5_V_full_n and res_V_data_4_V_full_n and res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op8 <= (data_V_data_9_V_empty_n and data_V_data_8_V_empty_n and data_V_data_7_V_empty_n and data_V_data_6_V_empty_n and data_V_data_5_V_empty_n and data_V_data_4_V_empty_n and data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);
    mul_ln1118_1_fu_307_p0 <= sext_ln1118_fu_1822_p1(12 - 1 downto 0);
    mul_ln1118_1_fu_307_p1 <= exp_res_1_V_reg_2157_pp0_iter5_reg;
    mul_ln1118_1_fu_307_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_1_fu_307_p0) * signed(mul_ln1118_1_fu_307_p1))), 24));
    mul_ln1118_2_fu_301_p0 <= sext_ln1118_fu_1822_p1(12 - 1 downto 0);
    mul_ln1118_2_fu_301_p1 <= exp_res_2_V_reg_2163_pp0_iter5_reg;
    mul_ln1118_2_fu_301_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_2_fu_301_p0) * signed(mul_ln1118_2_fu_301_p1))), 24));
    mul_ln1118_3_fu_304_p0 <= sext_ln1118_fu_1822_p1(12 - 1 downto 0);
    mul_ln1118_3_fu_304_p1 <= exp_res_3_V_reg_2169_pp0_iter5_reg;
    mul_ln1118_3_fu_304_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_3_fu_304_p0) * signed(mul_ln1118_3_fu_304_p1))), 24));
    mul_ln1118_4_fu_302_p0 <= sext_ln1118_fu_1822_p1(12 - 1 downto 0);
    mul_ln1118_4_fu_302_p1 <= exp_res_4_V_reg_2175_pp0_iter5_reg;
    mul_ln1118_4_fu_302_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_4_fu_302_p0) * signed(mul_ln1118_4_fu_302_p1))), 24));
    mul_ln1118_5_fu_306_p0 <= sext_ln1118_fu_1822_p1(12 - 1 downto 0);
    mul_ln1118_5_fu_306_p1 <= exp_res_5_V_reg_2181_pp0_iter5_reg;
    mul_ln1118_5_fu_306_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_5_fu_306_p0) * signed(mul_ln1118_5_fu_306_p1))), 24));
    mul_ln1118_6_fu_303_p0 <= sext_ln1118_fu_1822_p1(12 - 1 downto 0);
    mul_ln1118_6_fu_303_p1 <= exp_res_6_V_reg_2187_pp0_iter5_reg;
    mul_ln1118_6_fu_303_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_6_fu_303_p0) * signed(mul_ln1118_6_fu_303_p1))), 24));
    mul_ln1118_7_fu_305_p0 <= sext_ln1118_fu_1822_p1(12 - 1 downto 0);
    mul_ln1118_7_fu_305_p1 <= exp_res_7_V_reg_2193_pp0_iter5_reg;
    mul_ln1118_7_fu_305_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_7_fu_305_p0) * signed(mul_ln1118_7_fu_305_p1))), 24));
    mul_ln1118_8_fu_308_p0 <= sext_ln1118_fu_1822_p1(12 - 1 downto 0);
    mul_ln1118_8_fu_308_p1 <= exp_res_8_V_reg_2199_pp0_iter5_reg;
    mul_ln1118_8_fu_308_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_8_fu_308_p0) * signed(mul_ln1118_8_fu_308_p1))), 24));
    mul_ln1118_9_fu_309_p0 <= sext_ln1118_fu_1822_p1(12 - 1 downto 0);
    mul_ln1118_9_fu_309_p1 <= exp_res_9_V_reg_2205_pp0_iter5_reg;
    mul_ln1118_9_fu_309_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_9_fu_309_p0) * signed(mul_ln1118_9_fu_309_p1))), 24));
    mul_ln1118_fu_300_p0 <= sext_ln1118_fu_1822_p1(12 - 1 downto 0);
    mul_ln1118_fu_300_p1 <= exp_res_0_V_reg_2151_pp0_iter5_reg;
    mul_ln1118_fu_300_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_300_p0) * signed(mul_ln1118_fu_300_p1))), 24));
    or_ln340_1_fu_937_p2 <= (xor_ln340_1_fu_931_p2 or tmp_23_fu_905_p3);
    or_ln340_2_fu_992_p2 <= (xor_ln340_2_fu_986_p2 or tmp_25_fu_960_p3);
    or_ln340_3_fu_1047_p2 <= (xor_ln340_3_fu_1041_p2 or tmp_27_fu_1015_p3);
    or_ln340_4_fu_1102_p2 <= (xor_ln340_4_fu_1096_p2 or tmp_29_fu_1070_p3);
    or_ln340_5_fu_1157_p2 <= (xor_ln340_5_fu_1151_p2 or tmp_31_fu_1125_p3);
    or_ln340_6_fu_1212_p2 <= (xor_ln340_6_fu_1206_p2 or tmp_33_fu_1180_p3);
    or_ln340_7_fu_1267_p2 <= (xor_ln340_7_fu_1261_p2 or tmp_35_fu_1235_p3);
    or_ln340_8_fu_1322_p2 <= (xor_ln340_8_fu_1316_p2 or tmp_37_fu_1290_p3);
    or_ln340_9_fu_1377_p2 <= (xor_ln340_9_fu_1371_p2 or tmp_39_fu_1345_p3);
    or_ln340_fu_882_p2 <= (xor_ln340_fu_876_p2 or tmp_21_fu_850_p3);

    res_V_data_0_V_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, res_V_data_0_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= mul_ln1118_fu_300_p2(23 downto 8);

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, res_V_data_1_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= mul_ln1118_1_fu_307_p2(23 downto 8);

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, res_V_data_2_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= mul_ln1118_2_fu_301_p2(23 downto 8);

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, res_V_data_3_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= mul_ln1118_3_fu_304_p2(23 downto 8);

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_4_V_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, res_V_data_4_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_4_V_blk_n <= res_V_data_4_V_full_n;
        else 
            res_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_4_V_din <= mul_ln1118_4_fu_302_p2(23 downto 8);

    res_V_data_4_V_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_5_V_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, res_V_data_5_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_5_V_blk_n <= res_V_data_5_V_full_n;
        else 
            res_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_5_V_din <= mul_ln1118_5_fu_306_p2(23 downto 8);

    res_V_data_5_V_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_5_V_write <= ap_const_logic_1;
        else 
            res_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_6_V_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, res_V_data_6_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_6_V_blk_n <= res_V_data_6_V_full_n;
        else 
            res_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_6_V_din <= mul_ln1118_6_fu_303_p2(23 downto 8);

    res_V_data_6_V_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_6_V_write <= ap_const_logic_1;
        else 
            res_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_7_V_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, res_V_data_7_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_7_V_blk_n <= res_V_data_7_V_full_n;
        else 
            res_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_7_V_din <= mul_ln1118_7_fu_305_p2(23 downto 8);

    res_V_data_7_V_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_7_V_write <= ap_const_logic_1;
        else 
            res_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_8_V_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, res_V_data_8_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_8_V_blk_n <= res_V_data_8_V_full_n;
        else 
            res_V_data_8_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_8_V_din <= mul_ln1118_8_fu_308_p2(23 downto 8);

    res_V_data_8_V_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_8_V_write <= ap_const_logic_1;
        else 
            res_V_data_8_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_9_V_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, res_V_data_9_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_V_data_9_V_blk_n <= res_V_data_9_V_full_n;
        else 
            res_V_data_9_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_9_V_din <= mul_ln1118_9_fu_309_p2(23 downto 8);

    res_V_data_9_V_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_9_V_write <= ap_const_logic_1;
        else 
            res_V_data_9_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln340_10_fu_1563_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_15_fu_1145_p2(0) = '1') else 
        tmp_16_fu_1553_p4;
    select_ln340_12_fu_1597_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_16_fu_1200_p2(0) = '1') else 
        tmp_17_fu_1587_p4;
    select_ln340_14_fu_1631_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_17_fu_1255_p2(0) = '1') else 
        tmp_18_fu_1621_p4;
    select_ln340_16_fu_1665_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_18_fu_1310_p2(0) = '1') else 
        tmp_19_fu_1655_p4;
    select_ln340_18_fu_1699_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_19_fu_1365_p2(0) = '1') else 
        tmp_20_fu_1689_p4;
    select_ln340_2_fu_1427_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_11_fu_925_p2(0) = '1') else 
        tmp_12_fu_1417_p4;
    select_ln340_4_fu_1461_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_12_fu_980_p2(0) = '1') else 
        tmp_13_fu_1451_p4;
    select_ln340_6_fu_1495_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_13_fu_1035_p2(0) = '1') else 
        tmp_14_fu_1485_p4;
    select_ln340_8_fu_1529_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_14_fu_1090_p2(0) = '1') else 
        tmp_15_fu_1519_p4;
    select_ln340_fu_1393_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_10_fu_870_p2(0) = '1') else 
        tmp_11_fu_1383_p4;
    select_ln388_1_fu_1435_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_919_p2(0) = '1') else 
        tmp_12_fu_1417_p4;
    select_ln388_2_fu_1469_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_974_p2(0) = '1') else 
        tmp_13_fu_1451_p4;
    select_ln388_3_fu_1503_p3 <= 
        ap_const_lv10_200 when (and_ln786_3_fu_1029_p2(0) = '1') else 
        tmp_14_fu_1485_p4;
    select_ln388_4_fu_1537_p3 <= 
        ap_const_lv10_200 when (and_ln786_4_fu_1084_p2(0) = '1') else 
        tmp_15_fu_1519_p4;
    select_ln388_5_fu_1571_p3 <= 
        ap_const_lv10_200 when (and_ln786_5_fu_1139_p2(0) = '1') else 
        tmp_16_fu_1553_p4;
    select_ln388_6_fu_1605_p3 <= 
        ap_const_lv10_200 when (and_ln786_6_fu_1194_p2(0) = '1') else 
        tmp_17_fu_1587_p4;
    select_ln388_7_fu_1639_p3 <= 
        ap_const_lv10_200 when (and_ln786_7_fu_1249_p2(0) = '1') else 
        tmp_18_fu_1621_p4;
    select_ln388_8_fu_1673_p3 <= 
        ap_const_lv10_200 when (and_ln786_8_fu_1304_p2(0) = '1') else 
        tmp_19_fu_1655_p4;
    select_ln388_9_fu_1707_p3 <= 
        ap_const_lv10_200 when (and_ln786_9_fu_1359_p2(0) = '1') else 
        tmp_20_fu_1689_p4;
    select_ln388_fu_1401_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_864_p2(0) = '1') else 
        tmp_11_fu_1383_p4;
    select_ln86_1_fu_731_p1 <= data_V_data_3_V_dout;
    select_ln86_1_fu_731_p2 <= data_V_data_2_V_dout;
    select_ln86_1_fu_731_p3 <= 
        select_ln86_1_fu_731_p1 when (icmp_ln1496_1_fu_725_p2(0) = '1') else 
        select_ln86_1_fu_731_p2;
    select_ln86_2_fu_745_p3 <= 
        select_ln86_1_fu_731_p3 when (icmp_ln1496_2_fu_739_p2(0) = '1') else 
        select_ln86_fu_717_p3;
    select_ln86_3_fu_759_p1 <= data_V_data_5_V_dout;
    select_ln86_3_fu_759_p2 <= data_V_data_4_V_dout;
    select_ln86_3_fu_759_p3 <= 
        select_ln86_3_fu_759_p1 when (icmp_ln1496_3_fu_753_p2(0) = '1') else 
        select_ln86_3_fu_759_p2;
    select_ln86_4_fu_773_p1 <= data_V_data_7_V_dout;
    select_ln86_4_fu_773_p2 <= data_V_data_6_V_dout;
    select_ln86_4_fu_773_p3 <= 
        select_ln86_4_fu_773_p1 when (icmp_ln1496_4_fu_767_p2(0) = '1') else 
        select_ln86_4_fu_773_p2;
    select_ln86_5_fu_787_p3 <= 
        select_ln86_4_fu_773_p3 when (icmp_ln1496_5_fu_781_p2(0) = '1') else 
        select_ln86_3_fu_759_p3;
    select_ln86_6_fu_799_p3 <= 
        select_ln86_5_reg_2045 when (icmp_ln1496_6_fu_795_p2(0) = '1') else 
        select_ln86_2_reg_2039;
    select_ln86_7_fu_809_p3 <= 
        data_array_9_V_reg_2032 when (icmp_ln1496_7_fu_805_p2(0) = '1') else 
        data_array_8_V_reg_2025;
    select_ln86_fu_717_p1 <= data_V_data_1_V_dout;
    select_ln86_fu_717_p2 <= data_V_data_0_V_dout;
    select_ln86_fu_717_p3 <= 
        select_ln86_fu_717_p1 when (icmp_ln1496_fu_711_p2(0) = '1') else 
        select_ln86_fu_717_p2;
        sext_ln1118_fu_1822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_2216),24));

        sext_ln703_10_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_9_V_reg_2032),13));

        sext_ln703_1_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_821_p3),13));

        sext_ln703_2_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_1_V_reg_1990),13));

        sext_ln703_3_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_2_V_reg_1995),13));

        sext_ln703_4_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_3_V_reg_2000),13));

        sext_ln703_5_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_4_V_reg_2005),13));

        sext_ln703_6_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_5_V_reg_2010),13));

        sext_ln703_7_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_6_V_reg_2015),13));

        sext_ln703_8_fu_1218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_7_V_reg_2020),13));

        sext_ln703_9_fu_1273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_8_V_reg_2025),13));

        sext_ln703_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_0_V_reg_1985),13));

    sub_ln1193_1_fu_891_p2 <= std_logic_vector(signed(sext_ln703_2_fu_888_p1) - signed(sext_ln703_1_fu_832_p1));
    sub_ln1193_2_fu_946_p2 <= std_logic_vector(signed(sext_ln703_3_fu_943_p1) - signed(sext_ln703_1_fu_832_p1));
    sub_ln1193_3_fu_1001_p2 <= std_logic_vector(signed(sext_ln703_4_fu_998_p1) - signed(sext_ln703_1_fu_832_p1));
    sub_ln1193_4_fu_1056_p2 <= std_logic_vector(signed(sext_ln703_5_fu_1053_p1) - signed(sext_ln703_1_fu_832_p1));
    sub_ln1193_5_fu_1111_p2 <= std_logic_vector(signed(sext_ln703_6_fu_1108_p1) - signed(sext_ln703_1_fu_832_p1));
    sub_ln1193_6_fu_1166_p2 <= std_logic_vector(signed(sext_ln703_7_fu_1163_p1) - signed(sext_ln703_1_fu_832_p1));
    sub_ln1193_7_fu_1221_p2 <= std_logic_vector(signed(sext_ln703_8_fu_1218_p1) - signed(sext_ln703_1_fu_832_p1));
    sub_ln1193_8_fu_1276_p2 <= std_logic_vector(signed(sext_ln703_9_fu_1273_p1) - signed(sext_ln703_1_fu_832_p1));
    sub_ln1193_9_fu_1331_p2 <= std_logic_vector(signed(sext_ln703_10_fu_1328_p1) - signed(sext_ln703_1_fu_832_p1));
    sub_ln1193_fu_836_p2 <= std_logic_vector(signed(sext_ln703_fu_829_p1) - signed(sext_ln703_1_fu_832_p1));
    tmp_11_fu_1383_p4 <= sub_ln1193_fu_836_p2(11 downto 2);
    tmp_12_fu_1417_p4 <= sub_ln1193_1_fu_891_p2(11 downto 2);
    tmp_13_fu_1451_p4 <= sub_ln1193_2_fu_946_p2(11 downto 2);
    tmp_14_fu_1485_p4 <= sub_ln1193_3_fu_1001_p2(11 downto 2);
    tmp_15_fu_1519_p4 <= sub_ln1193_4_fu_1056_p2(11 downto 2);
    tmp_16_fu_1553_p4 <= sub_ln1193_5_fu_1111_p2(11 downto 2);
    tmp_17_fu_1587_p4 <= sub_ln1193_6_fu_1166_p2(11 downto 2);
    tmp_18_fu_1621_p4 <= sub_ln1193_7_fu_1221_p2(11 downto 2);
    tmp_19_fu_1655_p4 <= sub_ln1193_8_fu_1276_p2(11 downto 2);
    tmp_20_fu_1689_p4 <= sub_ln1193_9_fu_1331_p2(11 downto 2);
    tmp_21_fu_850_p3 <= sub_ln1193_fu_836_p2(11 downto 11);
    tmp_22_fu_897_p3 <= sub_ln1193_1_fu_891_p2(12 downto 12);
    tmp_23_fu_905_p3 <= sub_ln1193_1_fu_891_p2(11 downto 11);
    tmp_24_fu_952_p3 <= sub_ln1193_2_fu_946_p2(12 downto 12);
    tmp_25_fu_960_p3 <= sub_ln1193_2_fu_946_p2(11 downto 11);
    tmp_26_fu_1007_p3 <= sub_ln1193_3_fu_1001_p2(12 downto 12);
    tmp_27_fu_1015_p3 <= sub_ln1193_3_fu_1001_p2(11 downto 11);
    tmp_28_fu_1062_p3 <= sub_ln1193_4_fu_1056_p2(12 downto 12);
    tmp_29_fu_1070_p3 <= sub_ln1193_4_fu_1056_p2(11 downto 11);
    tmp_30_fu_1117_p3 <= sub_ln1193_5_fu_1111_p2(12 downto 12);
    tmp_31_fu_1125_p3 <= sub_ln1193_5_fu_1111_p2(11 downto 11);
    tmp_32_fu_1172_p3 <= sub_ln1193_6_fu_1166_p2(12 downto 12);
    tmp_33_fu_1180_p3 <= sub_ln1193_6_fu_1166_p2(11 downto 11);
    tmp_34_fu_1227_p3 <= sub_ln1193_7_fu_1221_p2(12 downto 12);
    tmp_35_fu_1235_p3 <= sub_ln1193_7_fu_1221_p2(11 downto 11);
    tmp_36_fu_1282_p3 <= sub_ln1193_8_fu_1276_p2(12 downto 12);
    tmp_37_fu_1290_p3 <= sub_ln1193_8_fu_1276_p2(11 downto 11);
    tmp_38_fu_1337_p3 <= sub_ln1193_9_fu_1331_p2(12 downto 12);
    tmp_39_fu_1345_p3 <= sub_ln1193_9_fu_1331_p2(11 downto 11);
    tmp_fu_842_p3 <= sub_ln1193_fu_836_p2(12 downto 12);
    x_max_V_fu_821_p3 <= 
        select_ln86_7_fu_809_p3 when (icmp_ln1496_8_fu_815_p2(0) = '1') else 
        select_ln86_6_fu_799_p3;
    xor_ln340_10_fu_870_p2 <= (tmp_fu_842_p3 xor tmp_21_fu_850_p3);
    xor_ln340_11_fu_925_p2 <= (tmp_23_fu_905_p3 xor tmp_22_fu_897_p3);
    xor_ln340_12_fu_980_p2 <= (tmp_25_fu_960_p3 xor tmp_24_fu_952_p3);
    xor_ln340_13_fu_1035_p2 <= (tmp_27_fu_1015_p3 xor tmp_26_fu_1007_p3);
    xor_ln340_14_fu_1090_p2 <= (tmp_29_fu_1070_p3 xor tmp_28_fu_1062_p3);
    xor_ln340_15_fu_1145_p2 <= (tmp_31_fu_1125_p3 xor tmp_30_fu_1117_p3);
    xor_ln340_16_fu_1200_p2 <= (tmp_33_fu_1180_p3 xor tmp_32_fu_1172_p3);
    xor_ln340_17_fu_1255_p2 <= (tmp_35_fu_1235_p3 xor tmp_34_fu_1227_p3);
    xor_ln340_18_fu_1310_p2 <= (tmp_37_fu_1290_p3 xor tmp_36_fu_1282_p3);
    xor_ln340_19_fu_1365_p2 <= (tmp_39_fu_1345_p3 xor tmp_38_fu_1337_p3);
    xor_ln340_1_fu_931_p2 <= (tmp_22_fu_897_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_986_p2 <= (tmp_24_fu_952_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_1041_p2 <= (tmp_26_fu_1007_p3 xor ap_const_lv1_1);
    xor_ln340_4_fu_1096_p2 <= (tmp_28_fu_1062_p3 xor ap_const_lv1_1);
    xor_ln340_5_fu_1151_p2 <= (tmp_30_fu_1117_p3 xor ap_const_lv1_1);
    xor_ln340_6_fu_1206_p2 <= (tmp_32_fu_1172_p3 xor ap_const_lv1_1);
    xor_ln340_7_fu_1261_p2 <= (tmp_34_fu_1227_p3 xor ap_const_lv1_1);
    xor_ln340_8_fu_1316_p2 <= (tmp_36_fu_1282_p3 xor ap_const_lv1_1);
    xor_ln340_9_fu_1371_p2 <= (tmp_38_fu_1337_p3 xor ap_const_lv1_1);
    xor_ln340_fu_876_p2 <= (tmp_fu_842_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_913_p2 <= (tmp_23_fu_905_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_968_p2 <= (tmp_25_fu_960_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_1023_p2 <= (tmp_27_fu_1015_p3 xor ap_const_lv1_1);
    xor_ln786_4_fu_1078_p2 <= (tmp_29_fu_1070_p3 xor ap_const_lv1_1);
    xor_ln786_5_fu_1133_p2 <= (tmp_31_fu_1125_p3 xor ap_const_lv1_1);
    xor_ln786_6_fu_1188_p2 <= (tmp_33_fu_1180_p3 xor ap_const_lv1_1);
    xor_ln786_7_fu_1243_p2 <= (tmp_35_fu_1235_p3 xor ap_const_lv1_1);
    xor_ln786_8_fu_1298_p2 <= (tmp_37_fu_1290_p3 xor ap_const_lv1_1);
    xor_ln786_9_fu_1353_p2 <= (tmp_39_fu_1345_p3 xor ap_const_lv1_1);
    xor_ln786_fu_858_p2 <= (tmp_21_fu_850_p3 xor ap_const_lv1_1);
    y_V_10_fu_1807_p4 <= exp_sum_V_fu_1801_p2(11 downto 2);
    y_V_1_fu_1443_p3 <= 
        select_ln340_2_fu_1427_p3 when (or_ln340_1_fu_937_p2(0) = '1') else 
        select_ln388_1_fu_1435_p3;
    y_V_2_fu_1477_p3 <= 
        select_ln340_4_fu_1461_p3 when (or_ln340_2_fu_992_p2(0) = '1') else 
        select_ln388_2_fu_1469_p3;
    y_V_3_fu_1511_p3 <= 
        select_ln340_6_fu_1495_p3 when (or_ln340_3_fu_1047_p2(0) = '1') else 
        select_ln388_3_fu_1503_p3;
    y_V_4_fu_1545_p3 <= 
        select_ln340_8_fu_1529_p3 when (or_ln340_4_fu_1102_p2(0) = '1') else 
        select_ln388_4_fu_1537_p3;
    y_V_5_fu_1579_p3 <= 
        select_ln340_10_fu_1563_p3 when (or_ln340_5_fu_1157_p2(0) = '1') else 
        select_ln388_5_fu_1571_p3;
    y_V_6_fu_1613_p3 <= 
        select_ln340_12_fu_1597_p3 when (or_ln340_6_fu_1212_p2(0) = '1') else 
        select_ln388_6_fu_1605_p3;
    y_V_7_fu_1647_p3 <= 
        select_ln340_14_fu_1631_p3 when (or_ln340_7_fu_1267_p2(0) = '1') else 
        select_ln388_7_fu_1639_p3;
    y_V_8_fu_1681_p3 <= 
        select_ln340_16_fu_1665_p3 when (or_ln340_8_fu_1322_p2(0) = '1') else 
        select_ln388_8_fu_1673_p3;
    y_V_9_fu_1715_p3 <= 
        select_ln340_18_fu_1699_p3 when (or_ln340_9_fu_1377_p2(0) = '1') else 
        select_ln388_9_fu_1707_p3;
    y_V_fu_1409_p3 <= 
        select_ln340_fu_1393_p3 when (or_ln340_fu_882_p2(0) = '1') else 
        select_ln388_fu_1401_p3;
    zext_ln236_1_fu_1727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_2056),64));
    zext_ln236_2_fu_1731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_2061),64));
    zext_ln236_3_fu_1735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_reg_2066),64));
    zext_ln236_4_fu_1739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_reg_2071),64));
    zext_ln236_5_fu_1743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_reg_2076),64));
    zext_ln236_6_fu_1747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_6_reg_2081),64));
    zext_ln236_7_fu_1751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_7_reg_2086),64));
    zext_ln236_8_fu_1755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_8_reg_2091),64));
    zext_ln236_9_fu_1759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_9_reg_2096),64));
    zext_ln236_fu_1723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_2051),64));
    zext_ln244_fu_1817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_10_fu_1807_p4),64));
end behav;
