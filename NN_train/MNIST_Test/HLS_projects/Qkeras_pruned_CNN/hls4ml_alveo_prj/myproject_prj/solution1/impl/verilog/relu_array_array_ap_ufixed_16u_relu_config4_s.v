// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_array_ap_ufixed_16u_relu_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [11:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [11:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [11:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [11:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [11:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [11:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [11:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [11:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [11:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [11:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [11:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [11:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [11:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [11:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [11:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [11:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [2:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [2:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [2:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [2:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [2:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [2:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [2:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [2:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [2:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [2:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [2:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [2:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [2:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [2:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [2:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [2:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln60_reg_1959;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln60_reg_1959_pp0_iter1_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [9:0] i_0_reg_224;
wire   [0:0] icmp_ln60_fu_235_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op44;
reg    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op304;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] i_fu_241_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [11:0] tmp_data_V_0_reg_1968;
reg   [11:0] tmp_data_V_1_reg_1973;
reg   [11:0] tmp_data_V_2_reg_1978;
reg   [11:0] tmp_data_V_324_reg_1983;
reg   [11:0] tmp_data_V_4_reg_1988;
reg   [11:0] tmp_data_V_5_reg_1993;
reg   [11:0] tmp_data_V_6_reg_1998;
reg   [11:0] tmp_data_V_7_reg_2003;
reg   [11:0] tmp_data_V_8_reg_2008;
reg   [11:0] tmp_data_V_9_reg_2013;
reg   [11:0] tmp_data_V_10_reg_2018;
reg   [11:0] tmp_data_V_11_reg_2023;
reg   [11:0] tmp_data_V_12_reg_2028;
reg   [11:0] tmp_data_V_13_reg_2033;
reg   [11:0] tmp_data_V_14_reg_2038;
reg   [11:0] tmp_data_V_15_reg_2043;
wire   [0:0] icmp_ln1494_fu_311_p2;
reg   [0:0] icmp_ln1494_reg_2048;
reg   [2:0] trunc_ln_reg_2053;
reg   [0:0] tmp_89_reg_2058;
wire   [0:0] icmp_ln879_fu_345_p2;
reg   [0:0] icmp_ln879_reg_2063;
wire   [0:0] icmp_ln768_fu_351_p2;
reg   [0:0] icmp_ln768_reg_2068;
wire   [0:0] icmp_ln1494_1_fu_357_p2;
reg   [0:0] icmp_ln1494_1_reg_2073;
reg   [2:0] trunc_ln708_s_reg_2078;
reg   [0:0] tmp_92_reg_2083;
wire   [0:0] icmp_ln879_16_fu_391_p2;
reg   [0:0] icmp_ln879_16_reg_2088;
wire   [0:0] icmp_ln768_16_fu_397_p2;
reg   [0:0] icmp_ln768_16_reg_2093;
wire   [0:0] icmp_ln1494_2_fu_403_p2;
reg   [0:0] icmp_ln1494_2_reg_2098;
reg   [2:0] trunc_ln708_15_reg_2103;
reg   [0:0] tmp_95_reg_2108;
wire   [0:0] icmp_ln879_17_fu_437_p2;
reg   [0:0] icmp_ln879_17_reg_2113;
wire   [0:0] icmp_ln768_17_fu_443_p2;
reg   [0:0] icmp_ln768_17_reg_2118;
wire   [0:0] icmp_ln1494_3_fu_449_p2;
reg   [0:0] icmp_ln1494_3_reg_2123;
reg   [2:0] trunc_ln708_16_reg_2128;
reg   [0:0] tmp_98_reg_2133;
wire   [0:0] icmp_ln879_18_fu_483_p2;
reg   [0:0] icmp_ln879_18_reg_2138;
wire   [0:0] icmp_ln768_18_fu_489_p2;
reg   [0:0] icmp_ln768_18_reg_2143;
wire   [0:0] icmp_ln1494_4_fu_495_p2;
reg   [0:0] icmp_ln1494_4_reg_2148;
reg   [2:0] trunc_ln708_17_reg_2153;
reg   [0:0] tmp_101_reg_2158;
wire   [0:0] icmp_ln879_19_fu_529_p2;
reg   [0:0] icmp_ln879_19_reg_2163;
wire   [0:0] icmp_ln768_19_fu_535_p2;
reg   [0:0] icmp_ln768_19_reg_2168;
wire   [0:0] icmp_ln1494_5_fu_541_p2;
reg   [0:0] icmp_ln1494_5_reg_2173;
reg   [2:0] trunc_ln708_18_reg_2178;
reg   [0:0] tmp_104_reg_2183;
wire   [0:0] icmp_ln879_20_fu_575_p2;
reg   [0:0] icmp_ln879_20_reg_2188;
wire   [0:0] icmp_ln768_20_fu_581_p2;
reg   [0:0] icmp_ln768_20_reg_2193;
wire   [0:0] icmp_ln1494_6_fu_587_p2;
reg   [0:0] icmp_ln1494_6_reg_2198;
reg   [2:0] trunc_ln708_19_reg_2203;
reg   [0:0] tmp_107_reg_2208;
wire   [0:0] icmp_ln879_21_fu_621_p2;
reg   [0:0] icmp_ln879_21_reg_2213;
wire   [0:0] icmp_ln768_21_fu_627_p2;
reg   [0:0] icmp_ln768_21_reg_2218;
wire   [0:0] icmp_ln1494_7_fu_633_p2;
reg   [0:0] icmp_ln1494_7_reg_2223;
reg   [2:0] trunc_ln708_20_reg_2228;
reg   [0:0] tmp_110_reg_2233;
wire   [0:0] icmp_ln879_22_fu_667_p2;
reg   [0:0] icmp_ln879_22_reg_2238;
wire   [0:0] icmp_ln768_22_fu_673_p2;
reg   [0:0] icmp_ln768_22_reg_2243;
wire   [0:0] icmp_ln1494_8_fu_679_p2;
reg   [0:0] icmp_ln1494_8_reg_2248;
reg   [2:0] trunc_ln708_21_reg_2253;
reg   [0:0] tmp_113_reg_2258;
wire   [0:0] icmp_ln879_23_fu_713_p2;
reg   [0:0] icmp_ln879_23_reg_2263;
wire   [0:0] icmp_ln768_23_fu_719_p2;
reg   [0:0] icmp_ln768_23_reg_2268;
wire   [0:0] icmp_ln1494_9_fu_725_p2;
reg   [0:0] icmp_ln1494_9_reg_2273;
reg   [2:0] trunc_ln708_22_reg_2278;
reg   [0:0] tmp_116_reg_2283;
wire   [0:0] icmp_ln879_24_fu_759_p2;
reg   [0:0] icmp_ln879_24_reg_2288;
wire   [0:0] icmp_ln768_24_fu_765_p2;
reg   [0:0] icmp_ln768_24_reg_2293;
wire   [0:0] icmp_ln1494_10_fu_771_p2;
reg   [0:0] icmp_ln1494_10_reg_2298;
reg   [2:0] trunc_ln708_23_reg_2303;
reg   [0:0] tmp_119_reg_2308;
wire   [0:0] icmp_ln879_25_fu_805_p2;
reg   [0:0] icmp_ln879_25_reg_2313;
wire   [0:0] icmp_ln768_25_fu_811_p2;
reg   [0:0] icmp_ln768_25_reg_2318;
wire   [0:0] icmp_ln1494_11_fu_817_p2;
reg   [0:0] icmp_ln1494_11_reg_2323;
reg   [2:0] trunc_ln708_24_reg_2328;
reg   [0:0] tmp_122_reg_2333;
wire   [0:0] icmp_ln879_26_fu_851_p2;
reg   [0:0] icmp_ln879_26_reg_2338;
wire   [0:0] icmp_ln768_26_fu_857_p2;
reg   [0:0] icmp_ln768_26_reg_2343;
wire   [0:0] icmp_ln1494_12_fu_863_p2;
reg   [0:0] icmp_ln1494_12_reg_2348;
reg   [2:0] trunc_ln708_25_reg_2353;
reg   [0:0] tmp_125_reg_2358;
wire   [0:0] icmp_ln879_27_fu_897_p2;
reg   [0:0] icmp_ln879_27_reg_2363;
wire   [0:0] icmp_ln768_27_fu_903_p2;
reg   [0:0] icmp_ln768_27_reg_2368;
wire   [0:0] icmp_ln1494_13_fu_909_p2;
reg   [0:0] icmp_ln1494_13_reg_2373;
reg   [2:0] trunc_ln708_26_reg_2378;
reg   [0:0] tmp_128_reg_2383;
wire   [0:0] icmp_ln879_28_fu_943_p2;
reg   [0:0] icmp_ln879_28_reg_2388;
wire   [0:0] icmp_ln768_28_fu_949_p2;
reg   [0:0] icmp_ln768_28_reg_2393;
wire   [0:0] icmp_ln1494_14_fu_955_p2;
reg   [0:0] icmp_ln1494_14_reg_2398;
reg   [2:0] trunc_ln708_27_reg_2403;
reg   [0:0] tmp_131_reg_2408;
wire   [0:0] icmp_ln879_29_fu_989_p2;
reg   [0:0] icmp_ln879_29_reg_2413;
wire   [0:0] icmp_ln768_29_fu_995_p2;
reg   [0:0] icmp_ln768_29_reg_2418;
wire   [0:0] icmp_ln1494_15_fu_1001_p2;
reg   [0:0] icmp_ln1494_15_reg_2423;
reg   [2:0] trunc_ln708_28_reg_2428;
reg   [0:0] tmp_134_reg_2433;
wire   [0:0] icmp_ln879_30_fu_1035_p2;
reg   [0:0] icmp_ln879_30_reg_2438;
wire   [0:0] icmp_ln768_30_fu_1041_p2;
reg   [0:0] icmp_ln768_30_reg_2443;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] p_Result_8_fu_335_p4;
wire   [4:0] p_Result_8_1_fu_381_p4;
wire   [4:0] p_Result_8_2_fu_427_p4;
wire   [4:0] p_Result_8_3_fu_473_p4;
wire   [4:0] p_Result_8_4_fu_519_p4;
wire   [4:0] p_Result_8_5_fu_565_p4;
wire   [4:0] p_Result_8_6_fu_611_p4;
wire   [4:0] p_Result_8_7_fu_657_p4;
wire   [4:0] p_Result_8_8_fu_703_p4;
wire   [4:0] p_Result_8_9_fu_749_p4;
wire   [4:0] p_Result_8_s_fu_795_p4;
wire   [4:0] p_Result_8_10_fu_841_p4;
wire   [4:0] p_Result_8_11_fu_887_p4;
wire   [4:0] p_Result_8_12_fu_933_p4;
wire   [4:0] p_Result_8_13_fu_979_p4;
wire   [4:0] p_Result_8_14_fu_1025_p4;
wire   [2:0] zext_ln415_fu_1054_p1;
wire   [2:0] add_ln415_fu_1057_p2;
wire   [0:0] tmp_90_fu_1062_p3;
wire   [0:0] tmp_88_fu_1047_p3;
wire   [0:0] xor_ln416_fu_1070_p2;
wire   [0:0] and_ln416_fu_1076_p2;
wire   [0:0] select_ln777_fu_1082_p3;
wire   [2:0] select_ln340_fu_1088_p3;
wire   [2:0] zext_ln415_16_fu_1111_p1;
wire   [2:0] add_ln415_16_fu_1114_p2;
wire   [0:0] tmp_93_fu_1119_p3;
wire   [0:0] tmp_91_fu_1104_p3;
wire   [0:0] xor_ln416_16_fu_1127_p2;
wire   [0:0] and_ln416_16_fu_1133_p2;
wire   [0:0] select_ln777_16_fu_1139_p3;
wire   [2:0] select_ln340_1_fu_1145_p3;
wire   [2:0] zext_ln415_17_fu_1168_p1;
wire   [2:0] add_ln415_17_fu_1171_p2;
wire   [0:0] tmp_96_fu_1176_p3;
wire   [0:0] tmp_94_fu_1161_p3;
wire   [0:0] xor_ln416_17_fu_1184_p2;
wire   [0:0] and_ln416_17_fu_1190_p2;
wire   [0:0] select_ln777_17_fu_1196_p3;
wire   [2:0] select_ln340_2_fu_1202_p3;
wire   [2:0] zext_ln415_18_fu_1225_p1;
wire   [2:0] add_ln415_18_fu_1228_p2;
wire   [0:0] tmp_99_fu_1233_p3;
wire   [0:0] tmp_97_fu_1218_p3;
wire   [0:0] xor_ln416_18_fu_1241_p2;
wire   [0:0] and_ln416_18_fu_1247_p2;
wire   [0:0] select_ln777_18_fu_1253_p3;
wire   [2:0] select_ln340_3_fu_1259_p3;
wire   [2:0] zext_ln415_19_fu_1282_p1;
wire   [2:0] add_ln415_19_fu_1285_p2;
wire   [0:0] tmp_102_fu_1290_p3;
wire   [0:0] tmp_100_fu_1275_p3;
wire   [0:0] xor_ln416_19_fu_1298_p2;
wire   [0:0] and_ln416_19_fu_1304_p2;
wire   [0:0] select_ln777_19_fu_1310_p3;
wire   [2:0] select_ln340_4_fu_1316_p3;
wire   [2:0] zext_ln415_20_fu_1339_p1;
wire   [2:0] add_ln415_20_fu_1342_p2;
wire   [0:0] tmp_105_fu_1347_p3;
wire   [0:0] tmp_103_fu_1332_p3;
wire   [0:0] xor_ln416_20_fu_1355_p2;
wire   [0:0] and_ln416_20_fu_1361_p2;
wire   [0:0] select_ln777_20_fu_1367_p3;
wire   [2:0] select_ln340_5_fu_1373_p3;
wire   [2:0] zext_ln415_21_fu_1396_p1;
wire   [2:0] add_ln415_21_fu_1399_p2;
wire   [0:0] tmp_108_fu_1404_p3;
wire   [0:0] tmp_106_fu_1389_p3;
wire   [0:0] xor_ln416_21_fu_1412_p2;
wire   [0:0] and_ln416_21_fu_1418_p2;
wire   [0:0] select_ln777_21_fu_1424_p3;
wire   [2:0] select_ln340_6_fu_1430_p3;
wire   [2:0] zext_ln415_22_fu_1453_p1;
wire   [2:0] add_ln415_22_fu_1456_p2;
wire   [0:0] tmp_111_fu_1461_p3;
wire   [0:0] tmp_109_fu_1446_p3;
wire   [0:0] xor_ln416_22_fu_1469_p2;
wire   [0:0] and_ln416_22_fu_1475_p2;
wire   [0:0] select_ln777_22_fu_1481_p3;
wire   [2:0] select_ln340_7_fu_1487_p3;
wire   [2:0] zext_ln415_23_fu_1510_p1;
wire   [2:0] add_ln415_23_fu_1513_p2;
wire   [0:0] tmp_114_fu_1518_p3;
wire   [0:0] tmp_112_fu_1503_p3;
wire   [0:0] xor_ln416_23_fu_1526_p2;
wire   [0:0] and_ln416_23_fu_1532_p2;
wire   [0:0] select_ln777_23_fu_1538_p3;
wire   [2:0] select_ln340_8_fu_1544_p3;
wire   [2:0] zext_ln415_24_fu_1567_p1;
wire   [2:0] add_ln415_24_fu_1570_p2;
wire   [0:0] tmp_117_fu_1575_p3;
wire   [0:0] tmp_115_fu_1560_p3;
wire   [0:0] xor_ln416_24_fu_1583_p2;
wire   [0:0] and_ln416_24_fu_1589_p2;
wire   [0:0] select_ln777_24_fu_1595_p3;
wire   [2:0] select_ln340_9_fu_1601_p3;
wire   [2:0] zext_ln415_25_fu_1624_p1;
wire   [2:0] add_ln415_25_fu_1627_p2;
wire   [0:0] tmp_120_fu_1632_p3;
wire   [0:0] tmp_118_fu_1617_p3;
wire   [0:0] xor_ln416_25_fu_1640_p2;
wire   [0:0] and_ln416_25_fu_1646_p2;
wire   [0:0] select_ln777_25_fu_1652_p3;
wire   [2:0] select_ln340_10_fu_1658_p3;
wire   [2:0] zext_ln415_26_fu_1681_p1;
wire   [2:0] add_ln415_26_fu_1684_p2;
wire   [0:0] tmp_123_fu_1689_p3;
wire   [0:0] tmp_121_fu_1674_p3;
wire   [0:0] xor_ln416_26_fu_1697_p2;
wire   [0:0] and_ln416_26_fu_1703_p2;
wire   [0:0] select_ln777_26_fu_1709_p3;
wire   [2:0] select_ln340_11_fu_1715_p3;
wire   [2:0] zext_ln415_27_fu_1738_p1;
wire   [2:0] add_ln415_27_fu_1741_p2;
wire   [0:0] tmp_126_fu_1746_p3;
wire   [0:0] tmp_124_fu_1731_p3;
wire   [0:0] xor_ln416_27_fu_1754_p2;
wire   [0:0] and_ln416_27_fu_1760_p2;
wire   [0:0] select_ln777_27_fu_1766_p3;
wire   [2:0] select_ln340_12_fu_1772_p3;
wire   [2:0] zext_ln415_28_fu_1795_p1;
wire   [2:0] add_ln415_28_fu_1798_p2;
wire   [0:0] tmp_129_fu_1803_p3;
wire   [0:0] tmp_127_fu_1788_p3;
wire   [0:0] xor_ln416_28_fu_1811_p2;
wire   [0:0] and_ln416_28_fu_1817_p2;
wire   [0:0] select_ln777_28_fu_1823_p3;
wire   [2:0] select_ln340_13_fu_1829_p3;
wire   [2:0] zext_ln415_29_fu_1852_p1;
wire   [2:0] add_ln415_29_fu_1855_p2;
wire   [0:0] tmp_132_fu_1860_p3;
wire   [0:0] tmp_130_fu_1845_p3;
wire   [0:0] xor_ln416_29_fu_1868_p2;
wire   [0:0] and_ln416_29_fu_1874_p2;
wire   [0:0] select_ln777_29_fu_1880_p3;
wire   [2:0] select_ln340_14_fu_1886_p3;
wire   [2:0] zext_ln415_30_fu_1909_p1;
wire   [2:0] add_ln415_30_fu_1912_p2;
wire   [0:0] tmp_135_fu_1917_p3;
wire   [0:0] tmp_133_fu_1902_p3;
wire   [0:0] xor_ln416_30_fu_1925_p2;
wire   [0:0] and_ln416_30_fu_1931_p2;
wire   [0:0] select_ln777_30_fu_1937_p3;
wire   [2:0] select_ln340_15_fu_1943_p3;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_fu_235_p2 == 1'd0))) begin
        i_0_reg_224 <= i_fu_241_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_224 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        icmp_ln1494_10_reg_2298 <= icmp_ln1494_10_fu_771_p2;
        icmp_ln1494_11_reg_2323 <= icmp_ln1494_11_fu_817_p2;
        icmp_ln1494_12_reg_2348 <= icmp_ln1494_12_fu_863_p2;
        icmp_ln1494_13_reg_2373 <= icmp_ln1494_13_fu_909_p2;
        icmp_ln1494_14_reg_2398 <= icmp_ln1494_14_fu_955_p2;
        icmp_ln1494_15_reg_2423 <= icmp_ln1494_15_fu_1001_p2;
        icmp_ln1494_1_reg_2073 <= icmp_ln1494_1_fu_357_p2;
        icmp_ln1494_2_reg_2098 <= icmp_ln1494_2_fu_403_p2;
        icmp_ln1494_3_reg_2123 <= icmp_ln1494_3_fu_449_p2;
        icmp_ln1494_4_reg_2148 <= icmp_ln1494_4_fu_495_p2;
        icmp_ln1494_5_reg_2173 <= icmp_ln1494_5_fu_541_p2;
        icmp_ln1494_6_reg_2198 <= icmp_ln1494_6_fu_587_p2;
        icmp_ln1494_7_reg_2223 <= icmp_ln1494_7_fu_633_p2;
        icmp_ln1494_8_reg_2248 <= icmp_ln1494_8_fu_679_p2;
        icmp_ln1494_9_reg_2273 <= icmp_ln1494_9_fu_725_p2;
        icmp_ln1494_reg_2048 <= icmp_ln1494_fu_311_p2;
        icmp_ln768_16_reg_2093 <= icmp_ln768_16_fu_397_p2;
        icmp_ln768_17_reg_2118 <= icmp_ln768_17_fu_443_p2;
        icmp_ln768_18_reg_2143 <= icmp_ln768_18_fu_489_p2;
        icmp_ln768_19_reg_2168 <= icmp_ln768_19_fu_535_p2;
        icmp_ln768_20_reg_2193 <= icmp_ln768_20_fu_581_p2;
        icmp_ln768_21_reg_2218 <= icmp_ln768_21_fu_627_p2;
        icmp_ln768_22_reg_2243 <= icmp_ln768_22_fu_673_p2;
        icmp_ln768_23_reg_2268 <= icmp_ln768_23_fu_719_p2;
        icmp_ln768_24_reg_2293 <= icmp_ln768_24_fu_765_p2;
        icmp_ln768_25_reg_2318 <= icmp_ln768_25_fu_811_p2;
        icmp_ln768_26_reg_2343 <= icmp_ln768_26_fu_857_p2;
        icmp_ln768_27_reg_2368 <= icmp_ln768_27_fu_903_p2;
        icmp_ln768_28_reg_2393 <= icmp_ln768_28_fu_949_p2;
        icmp_ln768_29_reg_2418 <= icmp_ln768_29_fu_995_p2;
        icmp_ln768_30_reg_2443 <= icmp_ln768_30_fu_1041_p2;
        icmp_ln768_reg_2068 <= icmp_ln768_fu_351_p2;
        icmp_ln879_16_reg_2088 <= icmp_ln879_16_fu_391_p2;
        icmp_ln879_17_reg_2113 <= icmp_ln879_17_fu_437_p2;
        icmp_ln879_18_reg_2138 <= icmp_ln879_18_fu_483_p2;
        icmp_ln879_19_reg_2163 <= icmp_ln879_19_fu_529_p2;
        icmp_ln879_20_reg_2188 <= icmp_ln879_20_fu_575_p2;
        icmp_ln879_21_reg_2213 <= icmp_ln879_21_fu_621_p2;
        icmp_ln879_22_reg_2238 <= icmp_ln879_22_fu_667_p2;
        icmp_ln879_23_reg_2263 <= icmp_ln879_23_fu_713_p2;
        icmp_ln879_24_reg_2288 <= icmp_ln879_24_fu_759_p2;
        icmp_ln879_25_reg_2313 <= icmp_ln879_25_fu_805_p2;
        icmp_ln879_26_reg_2338 <= icmp_ln879_26_fu_851_p2;
        icmp_ln879_27_reg_2363 <= icmp_ln879_27_fu_897_p2;
        icmp_ln879_28_reg_2388 <= icmp_ln879_28_fu_943_p2;
        icmp_ln879_29_reg_2413 <= icmp_ln879_29_fu_989_p2;
        icmp_ln879_30_reg_2438 <= icmp_ln879_30_fu_1035_p2;
        icmp_ln879_reg_2063 <= icmp_ln879_fu_345_p2;
        tmp_101_reg_2158 <= data_V_data_4_V_dout[32'd3];
        tmp_104_reg_2183 <= data_V_data_5_V_dout[32'd3];
        tmp_107_reg_2208 <= data_V_data_6_V_dout[32'd3];
        tmp_110_reg_2233 <= data_V_data_7_V_dout[32'd3];
        tmp_113_reg_2258 <= data_V_data_8_V_dout[32'd3];
        tmp_116_reg_2283 <= data_V_data_9_V_dout[32'd3];
        tmp_119_reg_2308 <= data_V_data_10_V_dout[32'd3];
        tmp_122_reg_2333 <= data_V_data_11_V_dout[32'd3];
        tmp_125_reg_2358 <= data_V_data_12_V_dout[32'd3];
        tmp_128_reg_2383 <= data_V_data_13_V_dout[32'd3];
        tmp_131_reg_2408 <= data_V_data_14_V_dout[32'd3];
        tmp_134_reg_2433 <= data_V_data_15_V_dout[32'd3];
        tmp_89_reg_2058 <= data_V_data_0_V_dout[32'd3];
        tmp_92_reg_2083 <= data_V_data_1_V_dout[32'd3];
        tmp_95_reg_2108 <= data_V_data_2_V_dout[32'd3];
        tmp_98_reg_2133 <= data_V_data_3_V_dout[32'd3];
        tmp_data_V_0_reg_1968 <= data_V_data_0_V_dout;
        tmp_data_V_10_reg_2018 <= data_V_data_10_V_dout;
        tmp_data_V_11_reg_2023 <= data_V_data_11_V_dout;
        tmp_data_V_12_reg_2028 <= data_V_data_12_V_dout;
        tmp_data_V_13_reg_2033 <= data_V_data_13_V_dout;
        tmp_data_V_14_reg_2038 <= data_V_data_14_V_dout;
        tmp_data_V_15_reg_2043 <= data_V_data_15_V_dout;
        tmp_data_V_1_reg_1973 <= data_V_data_1_V_dout;
        tmp_data_V_2_reg_1978 <= data_V_data_2_V_dout;
        tmp_data_V_324_reg_1983 <= data_V_data_3_V_dout;
        tmp_data_V_4_reg_1988 <= data_V_data_4_V_dout;
        tmp_data_V_5_reg_1993 <= data_V_data_5_V_dout;
        tmp_data_V_6_reg_1998 <= data_V_data_6_V_dout;
        tmp_data_V_7_reg_2003 <= data_V_data_7_V_dout;
        tmp_data_V_8_reg_2008 <= data_V_data_8_V_dout;
        tmp_data_V_9_reg_2013 <= data_V_data_9_V_dout;
        trunc_ln708_15_reg_2103 <= {{data_V_data_2_V_dout[6:4]}};
        trunc_ln708_16_reg_2128 <= {{data_V_data_3_V_dout[6:4]}};
        trunc_ln708_17_reg_2153 <= {{data_V_data_4_V_dout[6:4]}};
        trunc_ln708_18_reg_2178 <= {{data_V_data_5_V_dout[6:4]}};
        trunc_ln708_19_reg_2203 <= {{data_V_data_6_V_dout[6:4]}};
        trunc_ln708_20_reg_2228 <= {{data_V_data_7_V_dout[6:4]}};
        trunc_ln708_21_reg_2253 <= {{data_V_data_8_V_dout[6:4]}};
        trunc_ln708_22_reg_2278 <= {{data_V_data_9_V_dout[6:4]}};
        trunc_ln708_23_reg_2303 <= {{data_V_data_10_V_dout[6:4]}};
        trunc_ln708_24_reg_2328 <= {{data_V_data_11_V_dout[6:4]}};
        trunc_ln708_25_reg_2353 <= {{data_V_data_12_V_dout[6:4]}};
        trunc_ln708_26_reg_2378 <= {{data_V_data_13_V_dout[6:4]}};
        trunc_ln708_27_reg_2403 <= {{data_V_data_14_V_dout[6:4]}};
        trunc_ln708_28_reg_2428 <= {{data_V_data_15_V_dout[6:4]}};
        trunc_ln708_s_reg_2078 <= {{data_V_data_1_V_dout[6:4]}};
        trunc_ln_reg_2053 <= {{data_V_data_0_V_dout[6:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln60_reg_1959 <= icmp_ln60_fu_235_p2;
        icmp_ln60_reg_1959_pp0_iter1_reg <= icmp_ln60_reg_1959;
    end
end

always @ (*) begin
    if ((icmp_ln60_fu_235_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1959 == 1'd0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln60_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln60_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_16_fu_1114_p2 = (zext_ln415_16_fu_1111_p1 + trunc_ln708_s_reg_2078);

assign add_ln415_17_fu_1171_p2 = (zext_ln415_17_fu_1168_p1 + trunc_ln708_15_reg_2103);

assign add_ln415_18_fu_1228_p2 = (zext_ln415_18_fu_1225_p1 + trunc_ln708_16_reg_2128);

assign add_ln415_19_fu_1285_p2 = (zext_ln415_19_fu_1282_p1 + trunc_ln708_17_reg_2153);

assign add_ln415_20_fu_1342_p2 = (zext_ln415_20_fu_1339_p1 + trunc_ln708_18_reg_2178);

assign add_ln415_21_fu_1399_p2 = (zext_ln415_21_fu_1396_p1 + trunc_ln708_19_reg_2203);

assign add_ln415_22_fu_1456_p2 = (zext_ln415_22_fu_1453_p1 + trunc_ln708_20_reg_2228);

assign add_ln415_23_fu_1513_p2 = (zext_ln415_23_fu_1510_p1 + trunc_ln708_21_reg_2253);

assign add_ln415_24_fu_1570_p2 = (zext_ln415_24_fu_1567_p1 + trunc_ln708_22_reg_2278);

assign add_ln415_25_fu_1627_p2 = (zext_ln415_25_fu_1624_p1 + trunc_ln708_23_reg_2303);

assign add_ln415_26_fu_1684_p2 = (zext_ln415_26_fu_1681_p1 + trunc_ln708_24_reg_2328);

assign add_ln415_27_fu_1741_p2 = (zext_ln415_27_fu_1738_p1 + trunc_ln708_25_reg_2353);

assign add_ln415_28_fu_1798_p2 = (zext_ln415_28_fu_1795_p1 + trunc_ln708_26_reg_2378);

assign add_ln415_29_fu_1855_p2 = (zext_ln415_29_fu_1852_p1 + trunc_ln708_27_reg_2403);

assign add_ln415_30_fu_1912_p2 = (zext_ln415_30_fu_1909_p1 + trunc_ln708_28_reg_2428);

assign add_ln415_fu_1057_p2 = (zext_ln415_fu_1054_p1 + trunc_ln_reg_2053);

assign and_ln416_16_fu_1133_p2 = (xor_ln416_16_fu_1127_p2 & tmp_91_fu_1104_p3);

assign and_ln416_17_fu_1190_p2 = (xor_ln416_17_fu_1184_p2 & tmp_94_fu_1161_p3);

assign and_ln416_18_fu_1247_p2 = (xor_ln416_18_fu_1241_p2 & tmp_97_fu_1218_p3);

assign and_ln416_19_fu_1304_p2 = (xor_ln416_19_fu_1298_p2 & tmp_100_fu_1275_p3);

assign and_ln416_20_fu_1361_p2 = (xor_ln416_20_fu_1355_p2 & tmp_103_fu_1332_p3);

assign and_ln416_21_fu_1418_p2 = (xor_ln416_21_fu_1412_p2 & tmp_106_fu_1389_p3);

assign and_ln416_22_fu_1475_p2 = (xor_ln416_22_fu_1469_p2 & tmp_109_fu_1446_p3);

assign and_ln416_23_fu_1532_p2 = (xor_ln416_23_fu_1526_p2 & tmp_112_fu_1503_p3);

assign and_ln416_24_fu_1589_p2 = (xor_ln416_24_fu_1583_p2 & tmp_115_fu_1560_p3);

assign and_ln416_25_fu_1646_p2 = (xor_ln416_25_fu_1640_p2 & tmp_118_fu_1617_p3);

assign and_ln416_26_fu_1703_p2 = (xor_ln416_26_fu_1697_p2 & tmp_121_fu_1674_p3);

assign and_ln416_27_fu_1760_p2 = (xor_ln416_27_fu_1754_p2 & tmp_124_fu_1731_p3);

assign and_ln416_28_fu_1817_p2 = (xor_ln416_28_fu_1811_p2 & tmp_127_fu_1788_p3);

assign and_ln416_29_fu_1874_p2 = (xor_ln416_29_fu_1868_p2 & tmp_130_fu_1845_p3);

assign and_ln416_30_fu_1931_p2 = (xor_ln416_30_fu_1925_p2 & tmp_133_fu_1902_p3);

assign and_ln416_fu_1076_p2 = (xor_ln416_fu_1070_p2 & tmp_88_fu_1047_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op304 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op44 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1959 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op304 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op44 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1959 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op304 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op44 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1959 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op44 == 1'b0) & (icmp_ln60_reg_1959 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((io_acc_block_signal_op304 == 1'b0) & (icmp_ln60_reg_1959_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_241_p2 = (i_0_reg_224 + 10'd1);

assign icmp_ln1494_10_fu_771_p2 = (($signed(data_V_data_10_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_11_fu_817_p2 = (($signed(data_V_data_11_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_12_fu_863_p2 = (($signed(data_V_data_12_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_13_fu_909_p2 = (($signed(data_V_data_13_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_14_fu_955_p2 = (($signed(data_V_data_14_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_15_fu_1001_p2 = (($signed(data_V_data_15_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_357_p2 = (($signed(data_V_data_1_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_403_p2 = (($signed(data_V_data_2_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_449_p2 = (($signed(data_V_data_3_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_495_p2 = (($signed(data_V_data_4_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_541_p2 = (($signed(data_V_data_5_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_587_p2 = (($signed(data_V_data_6_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_633_p2 = (($signed(data_V_data_7_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_679_p2 = (($signed(data_V_data_8_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_725_p2 = (($signed(data_V_data_9_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_311_p2 = (($signed(data_V_data_0_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_235_p2 = ((i_0_reg_224 == 10'd676) ? 1'b1 : 1'b0);

assign icmp_ln768_16_fu_397_p2 = ((p_Result_8_1_fu_381_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_17_fu_443_p2 = ((p_Result_8_2_fu_427_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_18_fu_489_p2 = ((p_Result_8_3_fu_473_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_19_fu_535_p2 = ((p_Result_8_4_fu_519_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_20_fu_581_p2 = ((p_Result_8_5_fu_565_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_21_fu_627_p2 = ((p_Result_8_6_fu_611_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_22_fu_673_p2 = ((p_Result_8_7_fu_657_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_23_fu_719_p2 = ((p_Result_8_8_fu_703_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_24_fu_765_p2 = ((p_Result_8_9_fu_749_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_25_fu_811_p2 = ((p_Result_8_s_fu_795_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_26_fu_857_p2 = ((p_Result_8_10_fu_841_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_27_fu_903_p2 = ((p_Result_8_11_fu_887_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_28_fu_949_p2 = ((p_Result_8_12_fu_933_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_29_fu_995_p2 = ((p_Result_8_13_fu_979_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_30_fu_1041_p2 = ((p_Result_8_14_fu_1025_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_351_p2 = ((p_Result_8_fu_335_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_16_fu_391_p2 = ((p_Result_8_1_fu_381_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_17_fu_437_p2 = ((p_Result_8_2_fu_427_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_18_fu_483_p2 = ((p_Result_8_3_fu_473_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_19_fu_529_p2 = ((p_Result_8_4_fu_519_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_20_fu_575_p2 = ((p_Result_8_5_fu_565_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_21_fu_621_p2 = ((p_Result_8_6_fu_611_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_22_fu_667_p2 = ((p_Result_8_7_fu_657_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_23_fu_713_p2 = ((p_Result_8_8_fu_703_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_24_fu_759_p2 = ((p_Result_8_9_fu_749_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_25_fu_805_p2 = ((p_Result_8_s_fu_795_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_26_fu_851_p2 = ((p_Result_8_10_fu_841_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_27_fu_897_p2 = ((p_Result_8_11_fu_887_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_28_fu_943_p2 = ((p_Result_8_12_fu_933_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_29_fu_989_p2 = ((p_Result_8_13_fu_979_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_30_fu_1035_p2 = ((p_Result_8_14_fu_1025_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_345_p2 = ((p_Result_8_fu_335_p4 == 5'd31) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op304 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op44 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign p_Result_8_10_fu_841_p4 = {{data_V_data_11_V_dout[11:7]}};

assign p_Result_8_11_fu_887_p4 = {{data_V_data_12_V_dout[11:7]}};

assign p_Result_8_12_fu_933_p4 = {{data_V_data_13_V_dout[11:7]}};

assign p_Result_8_13_fu_979_p4 = {{data_V_data_14_V_dout[11:7]}};

assign p_Result_8_14_fu_1025_p4 = {{data_V_data_15_V_dout[11:7]}};

assign p_Result_8_1_fu_381_p4 = {{data_V_data_1_V_dout[11:7]}};

assign p_Result_8_2_fu_427_p4 = {{data_V_data_2_V_dout[11:7]}};

assign p_Result_8_3_fu_473_p4 = {{data_V_data_3_V_dout[11:7]}};

assign p_Result_8_4_fu_519_p4 = {{data_V_data_4_V_dout[11:7]}};

assign p_Result_8_5_fu_565_p4 = {{data_V_data_5_V_dout[11:7]}};

assign p_Result_8_6_fu_611_p4 = {{data_V_data_6_V_dout[11:7]}};

assign p_Result_8_7_fu_657_p4 = {{data_V_data_7_V_dout[11:7]}};

assign p_Result_8_8_fu_703_p4 = {{data_V_data_8_V_dout[11:7]}};

assign p_Result_8_9_fu_749_p4 = {{data_V_data_9_V_dout[11:7]}};

assign p_Result_8_fu_335_p4 = {{data_V_data_0_V_dout[11:7]}};

assign p_Result_8_s_fu_795_p4 = {{data_V_data_10_V_dout[11:7]}};

assign res_V_data_0_V_din = ((icmp_ln1494_reg_2048[0:0] === 1'b1) ? select_ln340_fu_1088_p3 : 3'd0);

assign res_V_data_10_V_din = ((icmp_ln1494_10_reg_2298[0:0] === 1'b1) ? select_ln340_10_fu_1658_p3 : 3'd0);

assign res_V_data_11_V_din = ((icmp_ln1494_11_reg_2323[0:0] === 1'b1) ? select_ln340_11_fu_1715_p3 : 3'd0);

assign res_V_data_12_V_din = ((icmp_ln1494_12_reg_2348[0:0] === 1'b1) ? select_ln340_12_fu_1772_p3 : 3'd0);

assign res_V_data_13_V_din = ((icmp_ln1494_13_reg_2373[0:0] === 1'b1) ? select_ln340_13_fu_1829_p3 : 3'd0);

assign res_V_data_14_V_din = ((icmp_ln1494_14_reg_2398[0:0] === 1'b1) ? select_ln340_14_fu_1886_p3 : 3'd0);

assign res_V_data_15_V_din = ((icmp_ln1494_15_reg_2423[0:0] === 1'b1) ? select_ln340_15_fu_1943_p3 : 3'd0);

assign res_V_data_1_V_din = ((icmp_ln1494_1_reg_2073[0:0] === 1'b1) ? select_ln340_1_fu_1145_p3 : 3'd0);

assign res_V_data_2_V_din = ((icmp_ln1494_2_reg_2098[0:0] === 1'b1) ? select_ln340_2_fu_1202_p3 : 3'd0);

assign res_V_data_3_V_din = ((icmp_ln1494_3_reg_2123[0:0] === 1'b1) ? select_ln340_3_fu_1259_p3 : 3'd0);

assign res_V_data_4_V_din = ((icmp_ln1494_4_reg_2148[0:0] === 1'b1) ? select_ln340_4_fu_1316_p3 : 3'd0);

assign res_V_data_5_V_din = ((icmp_ln1494_5_reg_2173[0:0] === 1'b1) ? select_ln340_5_fu_1373_p3 : 3'd0);

assign res_V_data_6_V_din = ((icmp_ln1494_6_reg_2198[0:0] === 1'b1) ? select_ln340_6_fu_1430_p3 : 3'd0);

assign res_V_data_7_V_din = ((icmp_ln1494_7_reg_2223[0:0] === 1'b1) ? select_ln340_7_fu_1487_p3 : 3'd0);

assign res_V_data_8_V_din = ((icmp_ln1494_8_reg_2248[0:0] === 1'b1) ? select_ln340_8_fu_1544_p3 : 3'd0);

assign res_V_data_9_V_din = ((icmp_ln1494_9_reg_2273[0:0] === 1'b1) ? select_ln340_9_fu_1601_p3 : 3'd0);

assign select_ln340_10_fu_1658_p3 = ((select_ln777_25_fu_1652_p3[0:0] === 1'b1) ? add_ln415_25_fu_1627_p2 : 3'd7);

assign select_ln340_11_fu_1715_p3 = ((select_ln777_26_fu_1709_p3[0:0] === 1'b1) ? add_ln415_26_fu_1684_p2 : 3'd7);

assign select_ln340_12_fu_1772_p3 = ((select_ln777_27_fu_1766_p3[0:0] === 1'b1) ? add_ln415_27_fu_1741_p2 : 3'd7);

assign select_ln340_13_fu_1829_p3 = ((select_ln777_28_fu_1823_p3[0:0] === 1'b1) ? add_ln415_28_fu_1798_p2 : 3'd7);

assign select_ln340_14_fu_1886_p3 = ((select_ln777_29_fu_1880_p3[0:0] === 1'b1) ? add_ln415_29_fu_1855_p2 : 3'd7);

assign select_ln340_15_fu_1943_p3 = ((select_ln777_30_fu_1937_p3[0:0] === 1'b1) ? add_ln415_30_fu_1912_p2 : 3'd7);

assign select_ln340_1_fu_1145_p3 = ((select_ln777_16_fu_1139_p3[0:0] === 1'b1) ? add_ln415_16_fu_1114_p2 : 3'd7);

assign select_ln340_2_fu_1202_p3 = ((select_ln777_17_fu_1196_p3[0:0] === 1'b1) ? add_ln415_17_fu_1171_p2 : 3'd7);

assign select_ln340_3_fu_1259_p3 = ((select_ln777_18_fu_1253_p3[0:0] === 1'b1) ? add_ln415_18_fu_1228_p2 : 3'd7);

assign select_ln340_4_fu_1316_p3 = ((select_ln777_19_fu_1310_p3[0:0] === 1'b1) ? add_ln415_19_fu_1285_p2 : 3'd7);

assign select_ln340_5_fu_1373_p3 = ((select_ln777_20_fu_1367_p3[0:0] === 1'b1) ? add_ln415_20_fu_1342_p2 : 3'd7);

assign select_ln340_6_fu_1430_p3 = ((select_ln777_21_fu_1424_p3[0:0] === 1'b1) ? add_ln415_21_fu_1399_p2 : 3'd7);

assign select_ln340_7_fu_1487_p3 = ((select_ln777_22_fu_1481_p3[0:0] === 1'b1) ? add_ln415_22_fu_1456_p2 : 3'd7);

assign select_ln340_8_fu_1544_p3 = ((select_ln777_23_fu_1538_p3[0:0] === 1'b1) ? add_ln415_23_fu_1513_p2 : 3'd7);

assign select_ln340_9_fu_1601_p3 = ((select_ln777_24_fu_1595_p3[0:0] === 1'b1) ? add_ln415_24_fu_1570_p2 : 3'd7);

assign select_ln340_fu_1088_p3 = ((select_ln777_fu_1082_p3[0:0] === 1'b1) ? add_ln415_fu_1057_p2 : 3'd7);

assign select_ln777_16_fu_1139_p3 = ((and_ln416_16_fu_1133_p2[0:0] === 1'b1) ? icmp_ln879_16_reg_2088 : icmp_ln768_16_reg_2093);

assign select_ln777_17_fu_1196_p3 = ((and_ln416_17_fu_1190_p2[0:0] === 1'b1) ? icmp_ln879_17_reg_2113 : icmp_ln768_17_reg_2118);

assign select_ln777_18_fu_1253_p3 = ((and_ln416_18_fu_1247_p2[0:0] === 1'b1) ? icmp_ln879_18_reg_2138 : icmp_ln768_18_reg_2143);

assign select_ln777_19_fu_1310_p3 = ((and_ln416_19_fu_1304_p2[0:0] === 1'b1) ? icmp_ln879_19_reg_2163 : icmp_ln768_19_reg_2168);

assign select_ln777_20_fu_1367_p3 = ((and_ln416_20_fu_1361_p2[0:0] === 1'b1) ? icmp_ln879_20_reg_2188 : icmp_ln768_20_reg_2193);

assign select_ln777_21_fu_1424_p3 = ((and_ln416_21_fu_1418_p2[0:0] === 1'b1) ? icmp_ln879_21_reg_2213 : icmp_ln768_21_reg_2218);

assign select_ln777_22_fu_1481_p3 = ((and_ln416_22_fu_1475_p2[0:0] === 1'b1) ? icmp_ln879_22_reg_2238 : icmp_ln768_22_reg_2243);

assign select_ln777_23_fu_1538_p3 = ((and_ln416_23_fu_1532_p2[0:0] === 1'b1) ? icmp_ln879_23_reg_2263 : icmp_ln768_23_reg_2268);

assign select_ln777_24_fu_1595_p3 = ((and_ln416_24_fu_1589_p2[0:0] === 1'b1) ? icmp_ln879_24_reg_2288 : icmp_ln768_24_reg_2293);

assign select_ln777_25_fu_1652_p3 = ((and_ln416_25_fu_1646_p2[0:0] === 1'b1) ? icmp_ln879_25_reg_2313 : icmp_ln768_25_reg_2318);

assign select_ln777_26_fu_1709_p3 = ((and_ln416_26_fu_1703_p2[0:0] === 1'b1) ? icmp_ln879_26_reg_2338 : icmp_ln768_26_reg_2343);

assign select_ln777_27_fu_1766_p3 = ((and_ln416_27_fu_1760_p2[0:0] === 1'b1) ? icmp_ln879_27_reg_2363 : icmp_ln768_27_reg_2368);

assign select_ln777_28_fu_1823_p3 = ((and_ln416_28_fu_1817_p2[0:0] === 1'b1) ? icmp_ln879_28_reg_2388 : icmp_ln768_28_reg_2393);

assign select_ln777_29_fu_1880_p3 = ((and_ln416_29_fu_1874_p2[0:0] === 1'b1) ? icmp_ln879_29_reg_2413 : icmp_ln768_29_reg_2418);

assign select_ln777_30_fu_1937_p3 = ((and_ln416_30_fu_1931_p2[0:0] === 1'b1) ? icmp_ln879_30_reg_2438 : icmp_ln768_30_reg_2443);

assign select_ln777_fu_1082_p3 = ((and_ln416_fu_1076_p2[0:0] === 1'b1) ? icmp_ln879_reg_2063 : icmp_ln768_reg_2068);

assign start_out = real_start;

assign tmp_100_fu_1275_p3 = tmp_data_V_4_reg_1988[32'd6];

assign tmp_102_fu_1290_p3 = add_ln415_19_fu_1285_p2[32'd2];

assign tmp_103_fu_1332_p3 = tmp_data_V_5_reg_1993[32'd6];

assign tmp_105_fu_1347_p3 = add_ln415_20_fu_1342_p2[32'd2];

assign tmp_106_fu_1389_p3 = tmp_data_V_6_reg_1998[32'd6];

assign tmp_108_fu_1404_p3 = add_ln415_21_fu_1399_p2[32'd2];

assign tmp_109_fu_1446_p3 = tmp_data_V_7_reg_2003[32'd6];

assign tmp_111_fu_1461_p3 = add_ln415_22_fu_1456_p2[32'd2];

assign tmp_112_fu_1503_p3 = tmp_data_V_8_reg_2008[32'd6];

assign tmp_114_fu_1518_p3 = add_ln415_23_fu_1513_p2[32'd2];

assign tmp_115_fu_1560_p3 = tmp_data_V_9_reg_2013[32'd6];

assign tmp_117_fu_1575_p3 = add_ln415_24_fu_1570_p2[32'd2];

assign tmp_118_fu_1617_p3 = tmp_data_V_10_reg_2018[32'd6];

assign tmp_120_fu_1632_p3 = add_ln415_25_fu_1627_p2[32'd2];

assign tmp_121_fu_1674_p3 = tmp_data_V_11_reg_2023[32'd6];

assign tmp_123_fu_1689_p3 = add_ln415_26_fu_1684_p2[32'd2];

assign tmp_124_fu_1731_p3 = tmp_data_V_12_reg_2028[32'd6];

assign tmp_126_fu_1746_p3 = add_ln415_27_fu_1741_p2[32'd2];

assign tmp_127_fu_1788_p3 = tmp_data_V_13_reg_2033[32'd6];

assign tmp_129_fu_1803_p3 = add_ln415_28_fu_1798_p2[32'd2];

assign tmp_130_fu_1845_p3 = tmp_data_V_14_reg_2038[32'd6];

assign tmp_132_fu_1860_p3 = add_ln415_29_fu_1855_p2[32'd2];

assign tmp_133_fu_1902_p3 = tmp_data_V_15_reg_2043[32'd6];

assign tmp_135_fu_1917_p3 = add_ln415_30_fu_1912_p2[32'd2];

assign tmp_88_fu_1047_p3 = tmp_data_V_0_reg_1968[32'd6];

assign tmp_90_fu_1062_p3 = add_ln415_fu_1057_p2[32'd2];

assign tmp_91_fu_1104_p3 = tmp_data_V_1_reg_1973[32'd6];

assign tmp_93_fu_1119_p3 = add_ln415_16_fu_1114_p2[32'd2];

assign tmp_94_fu_1161_p3 = tmp_data_V_2_reg_1978[32'd6];

assign tmp_96_fu_1176_p3 = add_ln415_17_fu_1171_p2[32'd2];

assign tmp_97_fu_1218_p3 = tmp_data_V_324_reg_1983[32'd6];

assign tmp_99_fu_1233_p3 = add_ln415_18_fu_1228_p2[32'd2];

assign xor_ln416_16_fu_1127_p2 = (tmp_93_fu_1119_p3 ^ 1'd1);

assign xor_ln416_17_fu_1184_p2 = (tmp_96_fu_1176_p3 ^ 1'd1);

assign xor_ln416_18_fu_1241_p2 = (tmp_99_fu_1233_p3 ^ 1'd1);

assign xor_ln416_19_fu_1298_p2 = (tmp_102_fu_1290_p3 ^ 1'd1);

assign xor_ln416_20_fu_1355_p2 = (tmp_105_fu_1347_p3 ^ 1'd1);

assign xor_ln416_21_fu_1412_p2 = (tmp_108_fu_1404_p3 ^ 1'd1);

assign xor_ln416_22_fu_1469_p2 = (tmp_111_fu_1461_p3 ^ 1'd1);

assign xor_ln416_23_fu_1526_p2 = (tmp_114_fu_1518_p3 ^ 1'd1);

assign xor_ln416_24_fu_1583_p2 = (tmp_117_fu_1575_p3 ^ 1'd1);

assign xor_ln416_25_fu_1640_p2 = (tmp_120_fu_1632_p3 ^ 1'd1);

assign xor_ln416_26_fu_1697_p2 = (tmp_123_fu_1689_p3 ^ 1'd1);

assign xor_ln416_27_fu_1754_p2 = (tmp_126_fu_1746_p3 ^ 1'd1);

assign xor_ln416_28_fu_1811_p2 = (tmp_129_fu_1803_p3 ^ 1'd1);

assign xor_ln416_29_fu_1868_p2 = (tmp_132_fu_1860_p3 ^ 1'd1);

assign xor_ln416_30_fu_1925_p2 = (tmp_135_fu_1917_p3 ^ 1'd1);

assign xor_ln416_fu_1070_p2 = (tmp_90_fu_1062_p3 ^ 1'd1);

assign zext_ln415_16_fu_1111_p1 = tmp_92_reg_2083;

assign zext_ln415_17_fu_1168_p1 = tmp_95_reg_2108;

assign zext_ln415_18_fu_1225_p1 = tmp_98_reg_2133;

assign zext_ln415_19_fu_1282_p1 = tmp_101_reg_2158;

assign zext_ln415_20_fu_1339_p1 = tmp_104_reg_2183;

assign zext_ln415_21_fu_1396_p1 = tmp_107_reg_2208;

assign zext_ln415_22_fu_1453_p1 = tmp_110_reg_2233;

assign zext_ln415_23_fu_1510_p1 = tmp_113_reg_2258;

assign zext_ln415_24_fu_1567_p1 = tmp_116_reg_2283;

assign zext_ln415_25_fu_1624_p1 = tmp_119_reg_2308;

assign zext_ln415_26_fu_1681_p1 = tmp_122_reg_2333;

assign zext_ln415_27_fu_1738_p1 = tmp_125_reg_2358;

assign zext_ln415_28_fu_1795_p1 = tmp_128_reg_2383;

assign zext_ln415_29_fu_1852_p1 = tmp_131_reg_2408;

assign zext_ln415_30_fu_1909_p1 = tmp_134_reg_2433;

assign zext_ln415_fu_1054_p1 = tmp_89_reg_2058;

endmodule //relu_array_array_ap_ufixed_16u_relu_config4_s
