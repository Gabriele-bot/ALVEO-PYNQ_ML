// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_softmax_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_blk_n,
        res_V_data_1_V_blk_n,
        res_V_data_2_V_blk_n,
        res_V_data_3_V_blk_n,
        res_V_data_4_V_blk_n,
        res_V_data_5_V_blk_n,
        res_V_data_6_V_blk_n,
        res_V_data_7_V_blk_n,
        res_V_data_8_V_blk_n,
        res_V_data_9_V_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [11:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [11:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [11:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [11:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [11:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [11:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [11:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [11:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [11:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_blk_n;
output   res_V_data_1_V_blk_n;
output   res_V_data_2_V_blk_n;
output   res_V_data_3_V_blk_n;
output   res_V_data_4_V_blk_n;
output   res_V_data_5_V_blk_n;
output   res_V_data_6_V_blk_n;
output   res_V_data_7_V_blk_n;
output   res_V_data_8_V_blk_n;
output   res_V_data_9_V_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_blk_n;
reg res_V_data_1_V_blk_n;
reg res_V_data_2_V_blk_n;
reg res_V_data_3_V_blk_n;
reg res_V_data_4_V_blk_n;
reg res_V_data_5_V_blk_n;
reg res_V_data_6_V_blk_n;
reg res_V_data_7_V_blk_n;
reg res_V_data_8_V_blk_n;
reg res_V_data_9_V_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op8;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    io_acc_block_signal_op307;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [11:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [11:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [11:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [11:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [11:0] exp_table1_q4;
wire   [9:0] exp_table1_address5;
reg    exp_table1_ce5;
wire   [11:0] exp_table1_q5;
wire   [9:0] exp_table1_address6;
reg    exp_table1_ce6;
wire   [11:0] exp_table1_q6;
wire   [9:0] exp_table1_address7;
reg    exp_table1_ce7;
wire   [11:0] exp_table1_q7;
wire   [9:0] exp_table1_address8;
reg    exp_table1_ce8;
wire   [11:0] exp_table1_q8;
wire   [9:0] exp_table1_address9;
reg    exp_table1_ce9;
wire   [11:0] exp_table1_q9;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [11:0] invert_table2_q0;
reg  signed [11:0] data_array_0_V_reg_1985;
reg  signed [11:0] data_array_1_V_reg_1990;
reg  signed [11:0] data_array_2_V_reg_1995;
reg  signed [11:0] data_array_3_V_reg_2000;
reg  signed [11:0] data_array_4_V_reg_2005;
reg  signed [11:0] data_array_5_V_reg_2010;
reg  signed [11:0] data_array_6_V_reg_2015;
reg  signed [11:0] data_array_7_V_reg_2020;
reg  signed [11:0] data_array_8_V_reg_2025;
reg  signed [11:0] data_array_9_V_reg_2032;
wire   [11:0] select_ln86_2_fu_745_p3;
reg   [11:0] select_ln86_2_reg_2039;
wire   [11:0] select_ln86_5_fu_787_p3;
reg   [11:0] select_ln86_5_reg_2045;
wire   [9:0] y_V_fu_1409_p3;
reg   [9:0] y_V_reg_2051;
wire   [9:0] y_V_1_fu_1443_p3;
reg   [9:0] y_V_1_reg_2056;
wire   [9:0] y_V_2_fu_1477_p3;
reg   [9:0] y_V_2_reg_2061;
wire   [9:0] y_V_3_fu_1511_p3;
reg   [9:0] y_V_3_reg_2066;
wire   [9:0] y_V_4_fu_1545_p3;
reg   [9:0] y_V_4_reg_2071;
wire   [9:0] y_V_5_fu_1579_p3;
reg   [9:0] y_V_5_reg_2076;
wire   [9:0] y_V_6_fu_1613_p3;
reg   [9:0] y_V_6_reg_2081;
wire   [9:0] y_V_7_fu_1647_p3;
reg   [9:0] y_V_7_reg_2086;
wire   [9:0] y_V_8_fu_1681_p3;
reg   [9:0] y_V_8_reg_2091;
wire   [9:0] y_V_9_fu_1715_p3;
reg   [9:0] y_V_9_reg_2096;
reg  signed [11:0] exp_res_0_V_reg_2151;
reg  signed [11:0] exp_res_0_V_reg_2151_pp0_iter4_reg;
reg  signed [11:0] exp_res_0_V_reg_2151_pp0_iter5_reg;
reg  signed [11:0] exp_res_1_V_reg_2157;
reg  signed [11:0] exp_res_1_V_reg_2157_pp0_iter4_reg;
reg  signed [11:0] exp_res_1_V_reg_2157_pp0_iter5_reg;
reg  signed [11:0] exp_res_2_V_reg_2163;
reg  signed [11:0] exp_res_2_V_reg_2163_pp0_iter4_reg;
reg  signed [11:0] exp_res_2_V_reg_2163_pp0_iter5_reg;
reg  signed [11:0] exp_res_3_V_reg_2169;
reg  signed [11:0] exp_res_3_V_reg_2169_pp0_iter4_reg;
reg  signed [11:0] exp_res_3_V_reg_2169_pp0_iter5_reg;
reg  signed [11:0] exp_res_4_V_reg_2175;
reg  signed [11:0] exp_res_4_V_reg_2175_pp0_iter4_reg;
reg  signed [11:0] exp_res_4_V_reg_2175_pp0_iter5_reg;
reg  signed [11:0] exp_res_5_V_reg_2181;
reg  signed [11:0] exp_res_5_V_reg_2181_pp0_iter4_reg;
reg  signed [11:0] exp_res_5_V_reg_2181_pp0_iter5_reg;
reg  signed [11:0] exp_res_6_V_reg_2187;
reg  signed [11:0] exp_res_6_V_reg_2187_pp0_iter4_reg;
reg  signed [11:0] exp_res_6_V_reg_2187_pp0_iter5_reg;
reg  signed [11:0] exp_res_7_V_reg_2193;
reg  signed [11:0] exp_res_7_V_reg_2193_pp0_iter4_reg;
reg  signed [11:0] exp_res_7_V_reg_2193_pp0_iter5_reg;
reg  signed [11:0] exp_res_8_V_reg_2199;
reg  signed [11:0] exp_res_8_V_reg_2199_pp0_iter4_reg;
reg  signed [11:0] exp_res_8_V_reg_2199_pp0_iter5_reg;
reg  signed [11:0] exp_res_9_V_reg_2205;
reg  signed [11:0] exp_res_9_V_reg_2205_pp0_iter4_reg;
reg  signed [11:0] exp_res_9_V_reg_2205_pp0_iter5_reg;
reg   [11:0] inv_exp_sum_V_reg_2216;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln236_fu_1723_p1;
wire   [63:0] zext_ln236_1_fu_1727_p1;
wire   [63:0] zext_ln236_2_fu_1731_p1;
wire   [63:0] zext_ln236_3_fu_1735_p1;
wire   [63:0] zext_ln236_4_fu_1739_p1;
wire   [63:0] zext_ln236_5_fu_1743_p1;
wire   [63:0] zext_ln236_6_fu_1747_p1;
wire   [63:0] zext_ln236_7_fu_1751_p1;
wire   [63:0] zext_ln236_8_fu_1755_p1;
wire   [63:0] zext_ln236_9_fu_1759_p1;
wire   [63:0] zext_ln244_fu_1817_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [11:0] mul_ln1118_fu_300_p0;
wire  signed [23:0] sext_ln1118_fu_1822_p1;
wire  signed [11:0] mul_ln1118_fu_300_p1;
wire  signed [11:0] mul_ln1118_2_fu_301_p0;
wire  signed [11:0] mul_ln1118_2_fu_301_p1;
wire  signed [11:0] mul_ln1118_4_fu_302_p0;
wire  signed [11:0] mul_ln1118_4_fu_302_p1;
wire  signed [11:0] mul_ln1118_6_fu_303_p0;
wire  signed [11:0] mul_ln1118_6_fu_303_p1;
wire  signed [11:0] mul_ln1118_3_fu_304_p0;
wire  signed [11:0] mul_ln1118_3_fu_304_p1;
wire  signed [11:0] mul_ln1118_7_fu_305_p0;
wire  signed [11:0] mul_ln1118_7_fu_305_p1;
wire  signed [11:0] mul_ln1118_5_fu_306_p0;
wire  signed [11:0] mul_ln1118_5_fu_306_p1;
wire  signed [11:0] mul_ln1118_1_fu_307_p0;
wire  signed [11:0] mul_ln1118_1_fu_307_p1;
wire  signed [11:0] mul_ln1118_8_fu_308_p0;
wire  signed [11:0] mul_ln1118_8_fu_308_p1;
wire  signed [11:0] mul_ln1118_9_fu_309_p0;
wire  signed [11:0] mul_ln1118_9_fu_309_p1;
wire  signed [11:0] icmp_ln1496_fu_711_p0;
wire  signed [11:0] icmp_ln1496_fu_711_p1;
wire   [0:0] icmp_ln1496_fu_711_p2;
wire  signed [11:0] select_ln86_fu_717_p1;
wire  signed [11:0] select_ln86_fu_717_p2;
wire  signed [11:0] icmp_ln1496_1_fu_725_p0;
wire  signed [11:0] icmp_ln1496_1_fu_725_p1;
wire   [0:0] icmp_ln1496_1_fu_725_p2;
wire  signed [11:0] select_ln86_1_fu_731_p1;
wire  signed [11:0] select_ln86_1_fu_731_p2;
wire   [11:0] select_ln86_fu_717_p3;
wire   [11:0] select_ln86_1_fu_731_p3;
wire   [0:0] icmp_ln1496_2_fu_739_p2;
wire  signed [11:0] icmp_ln1496_3_fu_753_p0;
wire  signed [11:0] icmp_ln1496_3_fu_753_p1;
wire   [0:0] icmp_ln1496_3_fu_753_p2;
wire  signed [11:0] select_ln86_3_fu_759_p1;
wire  signed [11:0] select_ln86_3_fu_759_p2;
wire  signed [11:0] icmp_ln1496_4_fu_767_p0;
wire  signed [11:0] icmp_ln1496_4_fu_767_p1;
wire   [0:0] icmp_ln1496_4_fu_767_p2;
wire  signed [11:0] select_ln86_4_fu_773_p1;
wire  signed [11:0] select_ln86_4_fu_773_p2;
wire   [11:0] select_ln86_3_fu_759_p3;
wire   [11:0] select_ln86_4_fu_773_p3;
wire   [0:0] icmp_ln1496_5_fu_781_p2;
wire   [0:0] icmp_ln1496_6_fu_795_p2;
wire   [0:0] icmp_ln1496_7_fu_805_p2;
wire   [11:0] select_ln86_6_fu_799_p3;
wire   [11:0] select_ln86_7_fu_809_p3;
wire   [0:0] icmp_ln1496_8_fu_815_p2;
wire   [11:0] x_max_V_fu_821_p3;
wire  signed [12:0] sext_ln703_fu_829_p1;
wire  signed [12:0] sext_ln703_1_fu_832_p1;
wire   [12:0] sub_ln1193_fu_836_p2;
wire   [0:0] tmp_21_fu_850_p3;
wire   [0:0] tmp_fu_842_p3;
wire   [0:0] xor_ln786_fu_858_p2;
wire   [0:0] xor_ln340_fu_876_p2;
wire  signed [12:0] sext_ln703_2_fu_888_p1;
wire   [12:0] sub_ln1193_1_fu_891_p2;
wire   [0:0] tmp_23_fu_905_p3;
wire   [0:0] tmp_22_fu_897_p3;
wire   [0:0] xor_ln786_1_fu_913_p2;
wire   [0:0] xor_ln340_1_fu_931_p2;
wire  signed [12:0] sext_ln703_3_fu_943_p1;
wire   [12:0] sub_ln1193_2_fu_946_p2;
wire   [0:0] tmp_25_fu_960_p3;
wire   [0:0] tmp_24_fu_952_p3;
wire   [0:0] xor_ln786_2_fu_968_p2;
wire   [0:0] xor_ln340_2_fu_986_p2;
wire  signed [12:0] sext_ln703_4_fu_998_p1;
wire   [12:0] sub_ln1193_3_fu_1001_p2;
wire   [0:0] tmp_27_fu_1015_p3;
wire   [0:0] tmp_26_fu_1007_p3;
wire   [0:0] xor_ln786_3_fu_1023_p2;
wire   [0:0] xor_ln340_3_fu_1041_p2;
wire  signed [12:0] sext_ln703_5_fu_1053_p1;
wire   [12:0] sub_ln1193_4_fu_1056_p2;
wire   [0:0] tmp_29_fu_1070_p3;
wire   [0:0] tmp_28_fu_1062_p3;
wire   [0:0] xor_ln786_4_fu_1078_p2;
wire   [0:0] xor_ln340_4_fu_1096_p2;
wire  signed [12:0] sext_ln703_6_fu_1108_p1;
wire   [12:0] sub_ln1193_5_fu_1111_p2;
wire   [0:0] tmp_31_fu_1125_p3;
wire   [0:0] tmp_30_fu_1117_p3;
wire   [0:0] xor_ln786_5_fu_1133_p2;
wire   [0:0] xor_ln340_5_fu_1151_p2;
wire  signed [12:0] sext_ln703_7_fu_1163_p1;
wire   [12:0] sub_ln1193_6_fu_1166_p2;
wire   [0:0] tmp_33_fu_1180_p3;
wire   [0:0] tmp_32_fu_1172_p3;
wire   [0:0] xor_ln786_6_fu_1188_p2;
wire   [0:0] xor_ln340_6_fu_1206_p2;
wire  signed [12:0] sext_ln703_8_fu_1218_p1;
wire   [12:0] sub_ln1193_7_fu_1221_p2;
wire   [0:0] tmp_35_fu_1235_p3;
wire   [0:0] tmp_34_fu_1227_p3;
wire   [0:0] xor_ln786_7_fu_1243_p2;
wire   [0:0] xor_ln340_7_fu_1261_p2;
wire  signed [12:0] sext_ln703_9_fu_1273_p1;
wire   [12:0] sub_ln1193_8_fu_1276_p2;
wire   [0:0] tmp_37_fu_1290_p3;
wire   [0:0] tmp_36_fu_1282_p3;
wire   [0:0] xor_ln786_8_fu_1298_p2;
wire   [0:0] xor_ln340_8_fu_1316_p2;
wire  signed [12:0] sext_ln703_10_fu_1328_p1;
wire   [12:0] sub_ln1193_9_fu_1331_p2;
wire   [0:0] tmp_39_fu_1345_p3;
wire   [0:0] tmp_38_fu_1337_p3;
wire   [0:0] xor_ln786_9_fu_1353_p2;
wire   [0:0] xor_ln340_9_fu_1371_p2;
wire   [0:0] xor_ln340_10_fu_870_p2;
wire   [9:0] tmp_11_fu_1383_p4;
wire   [0:0] and_ln786_fu_864_p2;
wire   [0:0] or_ln340_fu_882_p2;
wire   [9:0] select_ln340_fu_1393_p3;
wire   [9:0] select_ln388_fu_1401_p3;
wire   [0:0] xor_ln340_11_fu_925_p2;
wire   [9:0] tmp_12_fu_1417_p4;
wire   [0:0] and_ln786_1_fu_919_p2;
wire   [0:0] or_ln340_1_fu_937_p2;
wire   [9:0] select_ln340_2_fu_1427_p3;
wire   [9:0] select_ln388_1_fu_1435_p3;
wire   [0:0] xor_ln340_12_fu_980_p2;
wire   [9:0] tmp_13_fu_1451_p4;
wire   [0:0] and_ln786_2_fu_974_p2;
wire   [0:0] or_ln340_2_fu_992_p2;
wire   [9:0] select_ln340_4_fu_1461_p3;
wire   [9:0] select_ln388_2_fu_1469_p3;
wire   [0:0] xor_ln340_13_fu_1035_p2;
wire   [9:0] tmp_14_fu_1485_p4;
wire   [0:0] and_ln786_3_fu_1029_p2;
wire   [0:0] or_ln340_3_fu_1047_p2;
wire   [9:0] select_ln340_6_fu_1495_p3;
wire   [9:0] select_ln388_3_fu_1503_p3;
wire   [0:0] xor_ln340_14_fu_1090_p2;
wire   [9:0] tmp_15_fu_1519_p4;
wire   [0:0] and_ln786_4_fu_1084_p2;
wire   [0:0] or_ln340_4_fu_1102_p2;
wire   [9:0] select_ln340_8_fu_1529_p3;
wire   [9:0] select_ln388_4_fu_1537_p3;
wire   [0:0] xor_ln340_15_fu_1145_p2;
wire   [9:0] tmp_16_fu_1553_p4;
wire   [0:0] and_ln786_5_fu_1139_p2;
wire   [0:0] or_ln340_5_fu_1157_p2;
wire   [9:0] select_ln340_10_fu_1563_p3;
wire   [9:0] select_ln388_5_fu_1571_p3;
wire   [0:0] xor_ln340_16_fu_1200_p2;
wire   [9:0] tmp_17_fu_1587_p4;
wire   [0:0] and_ln786_6_fu_1194_p2;
wire   [0:0] or_ln340_6_fu_1212_p2;
wire   [9:0] select_ln340_12_fu_1597_p3;
wire   [9:0] select_ln388_6_fu_1605_p3;
wire   [0:0] xor_ln340_17_fu_1255_p2;
wire   [9:0] tmp_18_fu_1621_p4;
wire   [0:0] and_ln786_7_fu_1249_p2;
wire   [0:0] or_ln340_7_fu_1267_p2;
wire   [9:0] select_ln340_14_fu_1631_p3;
wire   [9:0] select_ln388_7_fu_1639_p3;
wire   [0:0] xor_ln340_18_fu_1310_p2;
wire   [9:0] tmp_19_fu_1655_p4;
wire   [0:0] and_ln786_8_fu_1304_p2;
wire   [0:0] or_ln340_8_fu_1322_p2;
wire   [9:0] select_ln340_16_fu_1665_p3;
wire   [9:0] select_ln388_8_fu_1673_p3;
wire   [0:0] xor_ln340_19_fu_1365_p2;
wire   [9:0] tmp_20_fu_1689_p4;
wire   [0:0] and_ln786_9_fu_1359_p2;
wire   [0:0] or_ln340_9_fu_1377_p2;
wire   [9:0] select_ln340_18_fu_1699_p3;
wire   [9:0] select_ln388_9_fu_1707_p3;
wire   [11:0] add_ln703_1_fu_1767_p2;
wire   [11:0] add_ln703_fu_1763_p2;
wire   [11:0] add_ln703_2_fu_1771_p2;
wire   [11:0] add_ln703_5_fu_1786_p2;
wire   [11:0] add_ln703_4_fu_1782_p2;
wire   [11:0] add_ln703_6_fu_1790_p2;
wire   [11:0] add_ln703_3_fu_1776_p2;
wire   [11:0] add_ln703_7_fu_1795_p2;
wire   [11:0] exp_sum_V_fu_1801_p2;
wire   [9:0] y_V_10_fu_1807_p4;
wire   [23:0] mul_ln1118_fu_300_p2;
wire   [23:0] mul_ln1118_1_fu_307_p2;
wire   [23:0] mul_ln1118_2_fu_301_p2;
wire   [23:0] mul_ln1118_3_fu_304_p2;
wire   [23:0] mul_ln1118_4_fu_302_p2;
wire   [23:0] mul_ln1118_5_fu_306_p2;
wire   [23:0] mul_ln1118_6_fu_303_p2;
wire   [23:0] mul_ln1118_7_fu_305_p2;
wire   [23:0] mul_ln1118_8_fu_308_p2;
wire   [23:0] mul_ln1118_9_fu_309_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

softmax_stable_array_array_softmax_config13_s_exp_table1 #(
    .DataWidth( 12 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4),
    .address5(exp_table1_address5),
    .ce5(exp_table1_ce5),
    .q5(exp_table1_q5),
    .address6(exp_table1_address6),
    .ce6(exp_table1_ce6),
    .q6(exp_table1_q6),
    .address7(exp_table1_address7),
    .ce7(exp_table1_ce7),
    .q7(exp_table1_q7),
    .address8(exp_table1_address8),
    .ce8(exp_table1_ce8),
    .q8(exp_table1_q8),
    .address9(exp_table1_address9),
    .ce9(exp_table1_ce9),
    .q9(exp_table1_q9)
);

softmax_stable_array_array_softmax_config13_s_invert_table2 #(
    .DataWidth( 12 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_array_0_V_reg_1985 <= data_V_data_0_V_dout;
        data_array_1_V_reg_1990 <= data_V_data_1_V_dout;
        data_array_2_V_reg_1995 <= data_V_data_2_V_dout;
        data_array_3_V_reg_2000 <= data_V_data_3_V_dout;
        data_array_4_V_reg_2005 <= data_V_data_4_V_dout;
        data_array_5_V_reg_2010 <= data_V_data_5_V_dout;
        data_array_6_V_reg_2015 <= data_V_data_6_V_dout;
        data_array_7_V_reg_2020 <= data_V_data_7_V_dout;
        data_array_8_V_reg_2025 <= data_V_data_8_V_dout;
        data_array_9_V_reg_2032 <= data_V_data_9_V_dout;
        select_ln86_2_reg_2039 <= select_ln86_2_fu_745_p3;
        select_ln86_5_reg_2045 <= select_ln86_5_fu_787_p3;
        y_V_1_reg_2056 <= y_V_1_fu_1443_p3;
        y_V_2_reg_2061 <= y_V_2_fu_1477_p3;
        y_V_3_reg_2066 <= y_V_3_fu_1511_p3;
        y_V_4_reg_2071 <= y_V_4_fu_1545_p3;
        y_V_5_reg_2076 <= y_V_5_fu_1579_p3;
        y_V_6_reg_2081 <= y_V_6_fu_1613_p3;
        y_V_7_reg_2086 <= y_V_7_fu_1647_p3;
        y_V_8_reg_2091 <= y_V_8_fu_1681_p3;
        y_V_9_reg_2096 <= y_V_9_fu_1715_p3;
        y_V_reg_2051 <= y_V_fu_1409_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_0_V_reg_2151 <= exp_table1_q0;
        exp_res_1_V_reg_2157 <= exp_table1_q1;
        exp_res_2_V_reg_2163 <= exp_table1_q2;
        exp_res_3_V_reg_2169 <= exp_table1_q3;
        exp_res_4_V_reg_2175 <= exp_table1_q4;
        exp_res_5_V_reg_2181 <= exp_table1_q5;
        exp_res_6_V_reg_2187 <= exp_table1_q6;
        exp_res_7_V_reg_2193 <= exp_table1_q7;
        exp_res_8_V_reg_2199 <= exp_table1_q8;
        exp_res_9_V_reg_2205 <= exp_table1_q9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exp_res_0_V_reg_2151_pp0_iter4_reg <= exp_res_0_V_reg_2151;
        exp_res_0_V_reg_2151_pp0_iter5_reg <= exp_res_0_V_reg_2151_pp0_iter4_reg;
        exp_res_1_V_reg_2157_pp0_iter4_reg <= exp_res_1_V_reg_2157;
        exp_res_1_V_reg_2157_pp0_iter5_reg <= exp_res_1_V_reg_2157_pp0_iter4_reg;
        exp_res_2_V_reg_2163_pp0_iter4_reg <= exp_res_2_V_reg_2163;
        exp_res_2_V_reg_2163_pp0_iter5_reg <= exp_res_2_V_reg_2163_pp0_iter4_reg;
        exp_res_3_V_reg_2169_pp0_iter4_reg <= exp_res_3_V_reg_2169;
        exp_res_3_V_reg_2169_pp0_iter5_reg <= exp_res_3_V_reg_2169_pp0_iter4_reg;
        exp_res_4_V_reg_2175_pp0_iter4_reg <= exp_res_4_V_reg_2175;
        exp_res_4_V_reg_2175_pp0_iter5_reg <= exp_res_4_V_reg_2175_pp0_iter4_reg;
        exp_res_5_V_reg_2181_pp0_iter4_reg <= exp_res_5_V_reg_2181;
        exp_res_5_V_reg_2181_pp0_iter5_reg <= exp_res_5_V_reg_2181_pp0_iter4_reg;
        exp_res_6_V_reg_2187_pp0_iter4_reg <= exp_res_6_V_reg_2187;
        exp_res_6_V_reg_2187_pp0_iter5_reg <= exp_res_6_V_reg_2187_pp0_iter4_reg;
        exp_res_7_V_reg_2193_pp0_iter4_reg <= exp_res_7_V_reg_2193;
        exp_res_7_V_reg_2193_pp0_iter5_reg <= exp_res_7_V_reg_2193_pp0_iter4_reg;
        exp_res_8_V_reg_2199_pp0_iter4_reg <= exp_res_8_V_reg_2199;
        exp_res_8_V_reg_2199_pp0_iter5_reg <= exp_res_8_V_reg_2199_pp0_iter4_reg;
        exp_res_9_V_reg_2205_pp0_iter4_reg <= exp_res_9_V_reg_2205;
        exp_res_9_V_reg_2205_pp0_iter5_reg <= exp_res_9_V_reg_2205_pp0_iter4_reg;
        inv_exp_sum_V_reg_2216 <= invert_table2_q0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce5 = 1'b1;
    end else begin
        exp_table1_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce6 = 1'b1;
    end else begin
        exp_table1_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce7 = 1'b1;
    end else begin
        exp_table1_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce8 = 1'b1;
    end else begin
        exp_table1_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce9 = 1'b1;
    end else begin
        exp_table1_ce9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_1767_p2 = ($signed(exp_res_7_V_reg_2193) + $signed(exp_res_2_V_reg_2163));

assign add_ln703_2_fu_1771_p2 = ($signed(exp_res_3_V_reg_2169) + $signed(add_ln703_1_fu_1767_p2));

assign add_ln703_3_fu_1776_p2 = (add_ln703_fu_1763_p2 + add_ln703_2_fu_1771_p2);

assign add_ln703_4_fu_1782_p2 = ($signed(exp_res_5_V_reg_2181) + $signed(exp_res_6_V_reg_2187));

assign add_ln703_5_fu_1786_p2 = ($signed(exp_res_8_V_reg_2199) + $signed(exp_res_9_V_reg_2205));

assign add_ln703_6_fu_1790_p2 = ($signed(exp_res_4_V_reg_2175) + $signed(add_ln703_5_fu_1786_p2));

assign add_ln703_7_fu_1795_p2 = (add_ln703_4_fu_1782_p2 + add_ln703_6_fu_1790_p2);

assign add_ln703_fu_1763_p2 = ($signed(exp_res_1_V_reg_2157) + $signed(exp_res_0_V_reg_2151));

assign and_ln786_1_fu_919_p2 = (xor_ln786_1_fu_913_p2 & tmp_22_fu_897_p3);

assign and_ln786_2_fu_974_p2 = (xor_ln786_2_fu_968_p2 & tmp_24_fu_952_p3);

assign and_ln786_3_fu_1029_p2 = (xor_ln786_3_fu_1023_p2 & tmp_26_fu_1007_p3);

assign and_ln786_4_fu_1084_p2 = (xor_ln786_4_fu_1078_p2 & tmp_28_fu_1062_p3);

assign and_ln786_5_fu_1139_p2 = (xor_ln786_5_fu_1133_p2 & tmp_30_fu_1117_p3);

assign and_ln786_6_fu_1194_p2 = (xor_ln786_6_fu_1188_p2 & tmp_32_fu_1172_p3);

assign and_ln786_7_fu_1249_p2 = (xor_ln786_7_fu_1243_p2 & tmp_34_fu_1227_p3);

assign and_ln786_8_fu_1304_p2 = (xor_ln786_8_fu_1298_p2 & tmp_36_fu_1282_p3);

assign and_ln786_9_fu_1359_p2 = (xor_ln786_9_fu_1353_p2 & tmp_38_fu_1337_p3);

assign and_ln786_fu_864_p2 = (xor_ln786_fu_858_p2 & tmp_fu_842_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b1) & ((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0))) | ((io_acc_block_signal_op307 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b1) & ((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0))) | ((io_acc_block_signal_op307 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b1) & ((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0))) | ((io_acc_block_signal_op307 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = (io_acc_block_signal_op307 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_sum_V_fu_1801_p2 = (add_ln703_3_fu_1776_p2 + add_ln703_7_fu_1795_p2);

assign exp_table1_address0 = zext_ln236_fu_1723_p1;

assign exp_table1_address1 = zext_ln236_1_fu_1727_p1;

assign exp_table1_address2 = zext_ln236_2_fu_1731_p1;

assign exp_table1_address3 = zext_ln236_3_fu_1735_p1;

assign exp_table1_address4 = zext_ln236_4_fu_1739_p1;

assign exp_table1_address5 = zext_ln236_5_fu_1743_p1;

assign exp_table1_address6 = zext_ln236_6_fu_1747_p1;

assign exp_table1_address7 = zext_ln236_7_fu_1751_p1;

assign exp_table1_address8 = zext_ln236_8_fu_1755_p1;

assign exp_table1_address9 = zext_ln236_9_fu_1759_p1;

assign icmp_ln1496_1_fu_725_p0 = data_V_data_2_V_dout;

assign icmp_ln1496_1_fu_725_p1 = data_V_data_3_V_dout;

assign icmp_ln1496_1_fu_725_p2 = (($signed(icmp_ln1496_1_fu_725_p0) < $signed(icmp_ln1496_1_fu_725_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_739_p2 = (($signed(select_ln86_fu_717_p3) < $signed(select_ln86_1_fu_731_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_753_p0 = data_V_data_4_V_dout;

assign icmp_ln1496_3_fu_753_p1 = data_V_data_5_V_dout;

assign icmp_ln1496_3_fu_753_p2 = (($signed(icmp_ln1496_3_fu_753_p0) < $signed(icmp_ln1496_3_fu_753_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_767_p0 = data_V_data_6_V_dout;

assign icmp_ln1496_4_fu_767_p1 = data_V_data_7_V_dout;

assign icmp_ln1496_4_fu_767_p2 = (($signed(icmp_ln1496_4_fu_767_p0) < $signed(icmp_ln1496_4_fu_767_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_781_p2 = (($signed(select_ln86_3_fu_759_p3) < $signed(select_ln86_4_fu_773_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_795_p2 = (($signed(select_ln86_2_reg_2039) < $signed(select_ln86_5_reg_2045)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_805_p2 = (($signed(data_array_8_V_reg_2025) < $signed(data_array_9_V_reg_2032)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_815_p2 = (($signed(select_ln86_6_fu_799_p3) < $signed(select_ln86_7_fu_809_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_711_p0 = data_V_data_0_V_dout;

assign icmp_ln1496_fu_711_p1 = data_V_data_1_V_dout;

assign icmp_ln1496_fu_711_p2 = (($signed(icmp_ln1496_fu_711_p0) < $signed(icmp_ln1496_fu_711_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln244_fu_1817_p1;

assign io_acc_block_signal_op307 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op8 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign mul_ln1118_1_fu_307_p0 = sext_ln1118_fu_1822_p1;

assign mul_ln1118_1_fu_307_p1 = exp_res_1_V_reg_2157_pp0_iter5_reg;

assign mul_ln1118_1_fu_307_p2 = ($signed(mul_ln1118_1_fu_307_p0) * $signed(mul_ln1118_1_fu_307_p1));

assign mul_ln1118_2_fu_301_p0 = sext_ln1118_fu_1822_p1;

assign mul_ln1118_2_fu_301_p1 = exp_res_2_V_reg_2163_pp0_iter5_reg;

assign mul_ln1118_2_fu_301_p2 = ($signed(mul_ln1118_2_fu_301_p0) * $signed(mul_ln1118_2_fu_301_p1));

assign mul_ln1118_3_fu_304_p0 = sext_ln1118_fu_1822_p1;

assign mul_ln1118_3_fu_304_p1 = exp_res_3_V_reg_2169_pp0_iter5_reg;

assign mul_ln1118_3_fu_304_p2 = ($signed(mul_ln1118_3_fu_304_p0) * $signed(mul_ln1118_3_fu_304_p1));

assign mul_ln1118_4_fu_302_p0 = sext_ln1118_fu_1822_p1;

assign mul_ln1118_4_fu_302_p1 = exp_res_4_V_reg_2175_pp0_iter5_reg;

assign mul_ln1118_4_fu_302_p2 = ($signed(mul_ln1118_4_fu_302_p0) * $signed(mul_ln1118_4_fu_302_p1));

assign mul_ln1118_5_fu_306_p0 = sext_ln1118_fu_1822_p1;

assign mul_ln1118_5_fu_306_p1 = exp_res_5_V_reg_2181_pp0_iter5_reg;

assign mul_ln1118_5_fu_306_p2 = ($signed(mul_ln1118_5_fu_306_p0) * $signed(mul_ln1118_5_fu_306_p1));

assign mul_ln1118_6_fu_303_p0 = sext_ln1118_fu_1822_p1;

assign mul_ln1118_6_fu_303_p1 = exp_res_6_V_reg_2187_pp0_iter5_reg;

assign mul_ln1118_6_fu_303_p2 = ($signed(mul_ln1118_6_fu_303_p0) * $signed(mul_ln1118_6_fu_303_p1));

assign mul_ln1118_7_fu_305_p0 = sext_ln1118_fu_1822_p1;

assign mul_ln1118_7_fu_305_p1 = exp_res_7_V_reg_2193_pp0_iter5_reg;

assign mul_ln1118_7_fu_305_p2 = ($signed(mul_ln1118_7_fu_305_p0) * $signed(mul_ln1118_7_fu_305_p1));

assign mul_ln1118_8_fu_308_p0 = sext_ln1118_fu_1822_p1;

assign mul_ln1118_8_fu_308_p1 = exp_res_8_V_reg_2199_pp0_iter5_reg;

assign mul_ln1118_8_fu_308_p2 = ($signed(mul_ln1118_8_fu_308_p0) * $signed(mul_ln1118_8_fu_308_p1));

assign mul_ln1118_9_fu_309_p0 = sext_ln1118_fu_1822_p1;

assign mul_ln1118_9_fu_309_p1 = exp_res_9_V_reg_2205_pp0_iter5_reg;

assign mul_ln1118_9_fu_309_p2 = ($signed(mul_ln1118_9_fu_309_p0) * $signed(mul_ln1118_9_fu_309_p1));

assign mul_ln1118_fu_300_p0 = sext_ln1118_fu_1822_p1;

assign mul_ln1118_fu_300_p1 = exp_res_0_V_reg_2151_pp0_iter5_reg;

assign mul_ln1118_fu_300_p2 = ($signed(mul_ln1118_fu_300_p0) * $signed(mul_ln1118_fu_300_p1));

assign or_ln340_1_fu_937_p2 = (xor_ln340_1_fu_931_p2 | tmp_23_fu_905_p3);

assign or_ln340_2_fu_992_p2 = (xor_ln340_2_fu_986_p2 | tmp_25_fu_960_p3);

assign or_ln340_3_fu_1047_p2 = (xor_ln340_3_fu_1041_p2 | tmp_27_fu_1015_p3);

assign or_ln340_4_fu_1102_p2 = (xor_ln340_4_fu_1096_p2 | tmp_29_fu_1070_p3);

assign or_ln340_5_fu_1157_p2 = (xor_ln340_5_fu_1151_p2 | tmp_31_fu_1125_p3);

assign or_ln340_6_fu_1212_p2 = (xor_ln340_6_fu_1206_p2 | tmp_33_fu_1180_p3);

assign or_ln340_7_fu_1267_p2 = (xor_ln340_7_fu_1261_p2 | tmp_35_fu_1235_p3);

assign or_ln340_8_fu_1322_p2 = (xor_ln340_8_fu_1316_p2 | tmp_37_fu_1290_p3);

assign or_ln340_9_fu_1377_p2 = (xor_ln340_9_fu_1371_p2 | tmp_39_fu_1345_p3);

assign or_ln340_fu_882_p2 = (xor_ln340_fu_876_p2 | tmp_21_fu_850_p3);

assign res_V_data_0_V_din = {{mul_ln1118_fu_300_p2[23:8]}};

assign res_V_data_1_V_din = {{mul_ln1118_1_fu_307_p2[23:8]}};

assign res_V_data_2_V_din = {{mul_ln1118_2_fu_301_p2[23:8]}};

assign res_V_data_3_V_din = {{mul_ln1118_3_fu_304_p2[23:8]}};

assign res_V_data_4_V_din = {{mul_ln1118_4_fu_302_p2[23:8]}};

assign res_V_data_5_V_din = {{mul_ln1118_5_fu_306_p2[23:8]}};

assign res_V_data_6_V_din = {{mul_ln1118_6_fu_303_p2[23:8]}};

assign res_V_data_7_V_din = {{mul_ln1118_7_fu_305_p2[23:8]}};

assign res_V_data_8_V_din = {{mul_ln1118_8_fu_308_p2[23:8]}};

assign res_V_data_9_V_din = {{mul_ln1118_9_fu_309_p2[23:8]}};

assign select_ln340_10_fu_1563_p3 = ((xor_ln340_15_fu_1145_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_fu_1553_p4);

assign select_ln340_12_fu_1597_p3 = ((xor_ln340_16_fu_1200_p2[0:0] === 1'b1) ? 10'd511 : tmp_17_fu_1587_p4);

assign select_ln340_14_fu_1631_p3 = ((xor_ln340_17_fu_1255_p2[0:0] === 1'b1) ? 10'd511 : tmp_18_fu_1621_p4);

assign select_ln340_16_fu_1665_p3 = ((xor_ln340_18_fu_1310_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_fu_1655_p4);

assign select_ln340_18_fu_1699_p3 = ((xor_ln340_19_fu_1365_p2[0:0] === 1'b1) ? 10'd511 : tmp_20_fu_1689_p4);

assign select_ln340_2_fu_1427_p3 = ((xor_ln340_11_fu_925_p2[0:0] === 1'b1) ? 10'd511 : tmp_12_fu_1417_p4);

assign select_ln340_4_fu_1461_p3 = ((xor_ln340_12_fu_980_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_fu_1451_p4);

assign select_ln340_6_fu_1495_p3 = ((xor_ln340_13_fu_1035_p2[0:0] === 1'b1) ? 10'd511 : tmp_14_fu_1485_p4);

assign select_ln340_8_fu_1529_p3 = ((xor_ln340_14_fu_1090_p2[0:0] === 1'b1) ? 10'd511 : tmp_15_fu_1519_p4);

assign select_ln340_fu_1393_p3 = ((xor_ln340_10_fu_870_p2[0:0] === 1'b1) ? 10'd511 : tmp_11_fu_1383_p4);

assign select_ln388_1_fu_1435_p3 = ((and_ln786_1_fu_919_p2[0:0] === 1'b1) ? 10'd512 : tmp_12_fu_1417_p4);

assign select_ln388_2_fu_1469_p3 = ((and_ln786_2_fu_974_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_fu_1451_p4);

assign select_ln388_3_fu_1503_p3 = ((and_ln786_3_fu_1029_p2[0:0] === 1'b1) ? 10'd512 : tmp_14_fu_1485_p4);

assign select_ln388_4_fu_1537_p3 = ((and_ln786_4_fu_1084_p2[0:0] === 1'b1) ? 10'd512 : tmp_15_fu_1519_p4);

assign select_ln388_5_fu_1571_p3 = ((and_ln786_5_fu_1139_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_fu_1553_p4);

assign select_ln388_6_fu_1605_p3 = ((and_ln786_6_fu_1194_p2[0:0] === 1'b1) ? 10'd512 : tmp_17_fu_1587_p4);

assign select_ln388_7_fu_1639_p3 = ((and_ln786_7_fu_1249_p2[0:0] === 1'b1) ? 10'd512 : tmp_18_fu_1621_p4);

assign select_ln388_8_fu_1673_p3 = ((and_ln786_8_fu_1304_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_fu_1655_p4);

assign select_ln388_9_fu_1707_p3 = ((and_ln786_9_fu_1359_p2[0:0] === 1'b1) ? 10'd512 : tmp_20_fu_1689_p4);

assign select_ln388_fu_1401_p3 = ((and_ln786_fu_864_p2[0:0] === 1'b1) ? 10'd512 : tmp_11_fu_1383_p4);

assign select_ln86_1_fu_731_p1 = data_V_data_3_V_dout;

assign select_ln86_1_fu_731_p2 = data_V_data_2_V_dout;

assign select_ln86_1_fu_731_p3 = ((icmp_ln1496_1_fu_725_p2[0:0] === 1'b1) ? select_ln86_1_fu_731_p1 : select_ln86_1_fu_731_p2);

assign select_ln86_2_fu_745_p3 = ((icmp_ln1496_2_fu_739_p2[0:0] === 1'b1) ? select_ln86_1_fu_731_p3 : select_ln86_fu_717_p3);

assign select_ln86_3_fu_759_p1 = data_V_data_5_V_dout;

assign select_ln86_3_fu_759_p2 = data_V_data_4_V_dout;

assign select_ln86_3_fu_759_p3 = ((icmp_ln1496_3_fu_753_p2[0:0] === 1'b1) ? select_ln86_3_fu_759_p1 : select_ln86_3_fu_759_p2);

assign select_ln86_4_fu_773_p1 = data_V_data_7_V_dout;

assign select_ln86_4_fu_773_p2 = data_V_data_6_V_dout;

assign select_ln86_4_fu_773_p3 = ((icmp_ln1496_4_fu_767_p2[0:0] === 1'b1) ? select_ln86_4_fu_773_p1 : select_ln86_4_fu_773_p2);

assign select_ln86_5_fu_787_p3 = ((icmp_ln1496_5_fu_781_p2[0:0] === 1'b1) ? select_ln86_4_fu_773_p3 : select_ln86_3_fu_759_p3);

assign select_ln86_6_fu_799_p3 = ((icmp_ln1496_6_fu_795_p2[0:0] === 1'b1) ? select_ln86_5_reg_2045 : select_ln86_2_reg_2039);

assign select_ln86_7_fu_809_p3 = ((icmp_ln1496_7_fu_805_p2[0:0] === 1'b1) ? data_array_9_V_reg_2032 : data_array_8_V_reg_2025);

assign select_ln86_fu_717_p1 = data_V_data_1_V_dout;

assign select_ln86_fu_717_p2 = data_V_data_0_V_dout;

assign select_ln86_fu_717_p3 = ((icmp_ln1496_fu_711_p2[0:0] === 1'b1) ? select_ln86_fu_717_p1 : select_ln86_fu_717_p2);

assign sext_ln1118_fu_1822_p1 = $signed(inv_exp_sum_V_reg_2216);

assign sext_ln703_10_fu_1328_p1 = data_array_9_V_reg_2032;

assign sext_ln703_1_fu_832_p1 = $signed(x_max_V_fu_821_p3);

assign sext_ln703_2_fu_888_p1 = data_array_1_V_reg_1990;

assign sext_ln703_3_fu_943_p1 = data_array_2_V_reg_1995;

assign sext_ln703_4_fu_998_p1 = data_array_3_V_reg_2000;

assign sext_ln703_5_fu_1053_p1 = data_array_4_V_reg_2005;

assign sext_ln703_6_fu_1108_p1 = data_array_5_V_reg_2010;

assign sext_ln703_7_fu_1163_p1 = data_array_6_V_reg_2015;

assign sext_ln703_8_fu_1218_p1 = data_array_7_V_reg_2020;

assign sext_ln703_9_fu_1273_p1 = data_array_8_V_reg_2025;

assign sext_ln703_fu_829_p1 = data_array_0_V_reg_1985;

assign sub_ln1193_1_fu_891_p2 = ($signed(sext_ln703_2_fu_888_p1) - $signed(sext_ln703_1_fu_832_p1));

assign sub_ln1193_2_fu_946_p2 = ($signed(sext_ln703_3_fu_943_p1) - $signed(sext_ln703_1_fu_832_p1));

assign sub_ln1193_3_fu_1001_p2 = ($signed(sext_ln703_4_fu_998_p1) - $signed(sext_ln703_1_fu_832_p1));

assign sub_ln1193_4_fu_1056_p2 = ($signed(sext_ln703_5_fu_1053_p1) - $signed(sext_ln703_1_fu_832_p1));

assign sub_ln1193_5_fu_1111_p2 = ($signed(sext_ln703_6_fu_1108_p1) - $signed(sext_ln703_1_fu_832_p1));

assign sub_ln1193_6_fu_1166_p2 = ($signed(sext_ln703_7_fu_1163_p1) - $signed(sext_ln703_1_fu_832_p1));

assign sub_ln1193_7_fu_1221_p2 = ($signed(sext_ln703_8_fu_1218_p1) - $signed(sext_ln703_1_fu_832_p1));

assign sub_ln1193_8_fu_1276_p2 = ($signed(sext_ln703_9_fu_1273_p1) - $signed(sext_ln703_1_fu_832_p1));

assign sub_ln1193_9_fu_1331_p2 = ($signed(sext_ln703_10_fu_1328_p1) - $signed(sext_ln703_1_fu_832_p1));

assign sub_ln1193_fu_836_p2 = ($signed(sext_ln703_fu_829_p1) - $signed(sext_ln703_1_fu_832_p1));

assign tmp_11_fu_1383_p4 = {{sub_ln1193_fu_836_p2[11:2]}};

assign tmp_12_fu_1417_p4 = {{sub_ln1193_1_fu_891_p2[11:2]}};

assign tmp_13_fu_1451_p4 = {{sub_ln1193_2_fu_946_p2[11:2]}};

assign tmp_14_fu_1485_p4 = {{sub_ln1193_3_fu_1001_p2[11:2]}};

assign tmp_15_fu_1519_p4 = {{sub_ln1193_4_fu_1056_p2[11:2]}};

assign tmp_16_fu_1553_p4 = {{sub_ln1193_5_fu_1111_p2[11:2]}};

assign tmp_17_fu_1587_p4 = {{sub_ln1193_6_fu_1166_p2[11:2]}};

assign tmp_18_fu_1621_p4 = {{sub_ln1193_7_fu_1221_p2[11:2]}};

assign tmp_19_fu_1655_p4 = {{sub_ln1193_8_fu_1276_p2[11:2]}};

assign tmp_20_fu_1689_p4 = {{sub_ln1193_9_fu_1331_p2[11:2]}};

assign tmp_21_fu_850_p3 = sub_ln1193_fu_836_p2[32'd11];

assign tmp_22_fu_897_p3 = sub_ln1193_1_fu_891_p2[32'd12];

assign tmp_23_fu_905_p3 = sub_ln1193_1_fu_891_p2[32'd11];

assign tmp_24_fu_952_p3 = sub_ln1193_2_fu_946_p2[32'd12];

assign tmp_25_fu_960_p3 = sub_ln1193_2_fu_946_p2[32'd11];

assign tmp_26_fu_1007_p3 = sub_ln1193_3_fu_1001_p2[32'd12];

assign tmp_27_fu_1015_p3 = sub_ln1193_3_fu_1001_p2[32'd11];

assign tmp_28_fu_1062_p3 = sub_ln1193_4_fu_1056_p2[32'd12];

assign tmp_29_fu_1070_p3 = sub_ln1193_4_fu_1056_p2[32'd11];

assign tmp_30_fu_1117_p3 = sub_ln1193_5_fu_1111_p2[32'd12];

assign tmp_31_fu_1125_p3 = sub_ln1193_5_fu_1111_p2[32'd11];

assign tmp_32_fu_1172_p3 = sub_ln1193_6_fu_1166_p2[32'd12];

assign tmp_33_fu_1180_p3 = sub_ln1193_6_fu_1166_p2[32'd11];

assign tmp_34_fu_1227_p3 = sub_ln1193_7_fu_1221_p2[32'd12];

assign tmp_35_fu_1235_p3 = sub_ln1193_7_fu_1221_p2[32'd11];

assign tmp_36_fu_1282_p3 = sub_ln1193_8_fu_1276_p2[32'd12];

assign tmp_37_fu_1290_p3 = sub_ln1193_8_fu_1276_p2[32'd11];

assign tmp_38_fu_1337_p3 = sub_ln1193_9_fu_1331_p2[32'd12];

assign tmp_39_fu_1345_p3 = sub_ln1193_9_fu_1331_p2[32'd11];

assign tmp_fu_842_p3 = sub_ln1193_fu_836_p2[32'd12];

assign x_max_V_fu_821_p3 = ((icmp_ln1496_8_fu_815_p2[0:0] === 1'b1) ? select_ln86_7_fu_809_p3 : select_ln86_6_fu_799_p3);

assign xor_ln340_10_fu_870_p2 = (tmp_fu_842_p3 ^ tmp_21_fu_850_p3);

assign xor_ln340_11_fu_925_p2 = (tmp_23_fu_905_p3 ^ tmp_22_fu_897_p3);

assign xor_ln340_12_fu_980_p2 = (tmp_25_fu_960_p3 ^ tmp_24_fu_952_p3);

assign xor_ln340_13_fu_1035_p2 = (tmp_27_fu_1015_p3 ^ tmp_26_fu_1007_p3);

assign xor_ln340_14_fu_1090_p2 = (tmp_29_fu_1070_p3 ^ tmp_28_fu_1062_p3);

assign xor_ln340_15_fu_1145_p2 = (tmp_31_fu_1125_p3 ^ tmp_30_fu_1117_p3);

assign xor_ln340_16_fu_1200_p2 = (tmp_33_fu_1180_p3 ^ tmp_32_fu_1172_p3);

assign xor_ln340_17_fu_1255_p2 = (tmp_35_fu_1235_p3 ^ tmp_34_fu_1227_p3);

assign xor_ln340_18_fu_1310_p2 = (tmp_37_fu_1290_p3 ^ tmp_36_fu_1282_p3);

assign xor_ln340_19_fu_1365_p2 = (tmp_39_fu_1345_p3 ^ tmp_38_fu_1337_p3);

assign xor_ln340_1_fu_931_p2 = (tmp_22_fu_897_p3 ^ 1'd1);

assign xor_ln340_2_fu_986_p2 = (tmp_24_fu_952_p3 ^ 1'd1);

assign xor_ln340_3_fu_1041_p2 = (tmp_26_fu_1007_p3 ^ 1'd1);

assign xor_ln340_4_fu_1096_p2 = (tmp_28_fu_1062_p3 ^ 1'd1);

assign xor_ln340_5_fu_1151_p2 = (tmp_30_fu_1117_p3 ^ 1'd1);

assign xor_ln340_6_fu_1206_p2 = (tmp_32_fu_1172_p3 ^ 1'd1);

assign xor_ln340_7_fu_1261_p2 = (tmp_34_fu_1227_p3 ^ 1'd1);

assign xor_ln340_8_fu_1316_p2 = (tmp_36_fu_1282_p3 ^ 1'd1);

assign xor_ln340_9_fu_1371_p2 = (tmp_38_fu_1337_p3 ^ 1'd1);

assign xor_ln340_fu_876_p2 = (tmp_fu_842_p3 ^ 1'd1);

assign xor_ln786_1_fu_913_p2 = (tmp_23_fu_905_p3 ^ 1'd1);

assign xor_ln786_2_fu_968_p2 = (tmp_25_fu_960_p3 ^ 1'd1);

assign xor_ln786_3_fu_1023_p2 = (tmp_27_fu_1015_p3 ^ 1'd1);

assign xor_ln786_4_fu_1078_p2 = (tmp_29_fu_1070_p3 ^ 1'd1);

assign xor_ln786_5_fu_1133_p2 = (tmp_31_fu_1125_p3 ^ 1'd1);

assign xor_ln786_6_fu_1188_p2 = (tmp_33_fu_1180_p3 ^ 1'd1);

assign xor_ln786_7_fu_1243_p2 = (tmp_35_fu_1235_p3 ^ 1'd1);

assign xor_ln786_8_fu_1298_p2 = (tmp_37_fu_1290_p3 ^ 1'd1);

assign xor_ln786_9_fu_1353_p2 = (tmp_39_fu_1345_p3 ^ 1'd1);

assign xor_ln786_fu_858_p2 = (tmp_21_fu_850_p3 ^ 1'd1);

assign y_V_10_fu_1807_p4 = {{exp_sum_V_fu_1801_p2[11:2]}};

assign y_V_1_fu_1443_p3 = ((or_ln340_1_fu_937_p2[0:0] === 1'b1) ? select_ln340_2_fu_1427_p3 : select_ln388_1_fu_1435_p3);

assign y_V_2_fu_1477_p3 = ((or_ln340_2_fu_992_p2[0:0] === 1'b1) ? select_ln340_4_fu_1461_p3 : select_ln388_2_fu_1469_p3);

assign y_V_3_fu_1511_p3 = ((or_ln340_3_fu_1047_p2[0:0] === 1'b1) ? select_ln340_6_fu_1495_p3 : select_ln388_3_fu_1503_p3);

assign y_V_4_fu_1545_p3 = ((or_ln340_4_fu_1102_p2[0:0] === 1'b1) ? select_ln340_8_fu_1529_p3 : select_ln388_4_fu_1537_p3);

assign y_V_5_fu_1579_p3 = ((or_ln340_5_fu_1157_p2[0:0] === 1'b1) ? select_ln340_10_fu_1563_p3 : select_ln388_5_fu_1571_p3);

assign y_V_6_fu_1613_p3 = ((or_ln340_6_fu_1212_p2[0:0] === 1'b1) ? select_ln340_12_fu_1597_p3 : select_ln388_6_fu_1605_p3);

assign y_V_7_fu_1647_p3 = ((or_ln340_7_fu_1267_p2[0:0] === 1'b1) ? select_ln340_14_fu_1631_p3 : select_ln388_7_fu_1639_p3);

assign y_V_8_fu_1681_p3 = ((or_ln340_8_fu_1322_p2[0:0] === 1'b1) ? select_ln340_16_fu_1665_p3 : select_ln388_8_fu_1673_p3);

assign y_V_9_fu_1715_p3 = ((or_ln340_9_fu_1377_p2[0:0] === 1'b1) ? select_ln340_18_fu_1699_p3 : select_ln388_9_fu_1707_p3);

assign y_V_fu_1409_p3 = ((or_ln340_fu_882_p2[0:0] === 1'b1) ? select_ln340_fu_1393_p3 : select_ln388_fu_1401_p3);

assign zext_ln236_1_fu_1727_p1 = y_V_1_reg_2056;

assign zext_ln236_2_fu_1731_p1 = y_V_2_reg_2061;

assign zext_ln236_3_fu_1735_p1 = y_V_3_reg_2066;

assign zext_ln236_4_fu_1739_p1 = y_V_4_reg_2071;

assign zext_ln236_5_fu_1743_p1 = y_V_5_reg_2076;

assign zext_ln236_6_fu_1747_p1 = y_V_6_reg_2081;

assign zext_ln236_7_fu_1751_p1 = y_V_7_reg_2086;

assign zext_ln236_8_fu_1755_p1 = y_V_8_reg_2091;

assign zext_ln236_9_fu_1759_p1 = y_V_9_reg_2096;

assign zext_ln236_fu_1723_p1 = y_V_reg_2051;

assign zext_ln244_fu_1817_p1 = y_V_10_fu_1807_p4;

endmodule //softmax_stable_array_array_softmax_config13_s
