-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc406 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_local_V_data_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_local_V_data_0_V_full_n : IN STD_LOGIC;
    in_local_V_data_0_V_write : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Loop_1_proc406 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_FFB : STD_LOGIC_VECTOR (11 downto 0) := "111111111011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_local_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln23_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_130_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_426 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal in_data_tmp_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln28_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln557_fu_155_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln557_reg_442 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2011_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_reg_452 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_177_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_457 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln571_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_462 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln581_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_468 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_201_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_reg_475 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_207_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_reg_480 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln570_fu_236_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln570_reg_491 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln581_fu_243_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln581_reg_496 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln583_fu_248_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln583_reg_502 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln603_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_1_fu_359_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_1_reg_517 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln603_2_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_0_V_fu_416_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_0_V_reg_527 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal is_last_0_i_out_0_reg_99 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_0_i_reg_110 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln696_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln461_fu_181_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln575_fu_189_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_219_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_226_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln461_fu_230_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_2012_fu_258_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln696_1_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2013_fu_277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_285_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln582_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_1_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_385_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_389_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln581_fu_382_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln604_fu_398_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln586_fu_394_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_fu_403_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_2_fu_410_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_121_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal regslice_both_in_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_both_in_data_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_U_ack_in : STD_LOGIC;

    component myproject_axi_fpext_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    myproject_axi_fpext_32ns_64_2_1_U1 : component myproject_axi_fpext_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_r_TDATA_int,
        ce => grp_fu_121_ce,
        dout => grp_fu_121_p1);

    regslice_both_in_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_last_V_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_last_V_U_apdone_blk);

    regslice_both_in_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_data_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => regslice_both_in_data_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_data_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln23_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((not(((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln23_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= is_last_0_i_out_0_reg_99;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_local_V_data_0_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_0_i_reg_110 <= i_reg_426;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_110 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    is_last_0_i_out_0_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_local_V_data_0_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                is_last_0_i_out_0_reg_99 <= or_ln28_reg_437;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                is_last_0_i_out_0_reg_99 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln581_reg_475 <= add_ln581_fu_201_p2;
                icmp_ln571_reg_462 <= icmp_ln571_fu_184_p2;
                icmp_ln581_reg_468 <= icmp_ln581_fu_195_p2;
                icmp_ln582_reg_485 <= icmp_ln582_fu_213_p2;
                sub_ln581_reg_480 <= sub_ln581_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                and_ln603_reg_507 <= and_ln603_fu_347_p2;
                or_ln603_2_reg_522 <= or_ln603_2_fu_373_p2;
                or_ln603_reg_512 <= or_ln603_fu_353_p2;
                select_ln570_reg_491 <= select_ln570_fu_236_p3;
                select_ln581_reg_496 <= select_ln581_fu_243_p3;
                select_ln603_1_reg_517 <= select_ln603_1_fu_359_p3;
                trunc_ln583_reg_502 <= trunc_ln583_fu_248_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_426 <= i_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                in_data_tmp_reg_431 <= in_r_TDATA_int;
                or_ln28_reg_437 <= or_ln28_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Result_i_reg_452 <= bitcast_ln696_fu_151_p1(62 downto 52);
                tmp_2011_reg_447 <= bitcast_ln696_fu_151_p1(63 downto 63);
                trunc_ln557_reg_442 <= trunc_ln557_fu_155_p1;
                trunc_ln565_reg_457 <= trunc_ln565_fu_177_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_data_0_V_reg_527 <= tmp_data_0_V_fu_416_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_local_V_data_0_V_full_n, ap_CS_fsm_state7, ap_CS_fsm_state2, icmp_ln23_fu_124_p2, in_r_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln23_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((in_local_V_data_0_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln581_fu_201_p2 <= std_logic_vector(signed(ap_const_lv12_FFB) + signed(sub_ln575_fu_189_p2));
    and_ln581_fu_313_p2 <= (xor_ln582_fu_307_p2 and icmp_ln581_reg_468);
    and_ln582_fu_298_p2 <= (xor_ln571_fu_293_p2 and icmp_ln582_reg_485);
    and_ln585_1_fu_330_p2 <= (icmp_ln585_fu_252_p2 and and_ln581_fu_313_p2);
    and_ln585_fu_324_p2 <= (xor_ln585_fu_318_p2 and and_ln581_fu_313_p2);
    and_ln603_fu_347_p2 <= (xor_ln581_fu_341_p2 and icmp_ln603_fu_268_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln23_fu_124_p2, in_r_TVALID_int)
    begin
                ap_block_state2 <= ((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln23_fu_124_p2, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln23_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_return_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_124_p2, is_last_0_i_out_0_reg_99, ap_return_preg, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln23_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= is_last_0_i_out_0_reg_99;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    ashr_ln586_fu_389_p2 <= std_logic_vector(shift_right(signed(select_ln570_reg_491),to_integer(unsigned('0' & zext_ln586_fu_385_p1(31-1 downto 0)))));
    bitcast_ln696_1_fu_274_p1 <= in_data_tmp_reg_431;
    bitcast_ln696_fu_151_p1 <= grp_fu_121_p1;

    grp_fu_121_ce_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_124_p2, ap_CS_fsm_state3, in_r_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_121_ce <= ap_const_logic_1;
        else 
            grp_fu_121_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_130_p2 <= std_logic_vector(unsigned(i_0_i_reg_110) + unsigned(ap_const_lv10_1));
    icmp_ln23_fu_124_p2 <= "1" when (i_0_i_reg_110 = ap_const_lv10_310) else "0";
    icmp_ln571_fu_184_p2 <= "1" when (trunc_ln557_reg_442 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_195_p2 <= "1" when (signed(sub_ln575_fu_189_p2) > signed(ap_const_lv12_5)) else "0";
    icmp_ln582_fu_213_p2 <= "1" when (sub_ln575_fu_189_p2 = ap_const_lv12_5) else "0";
    icmp_ln585_fu_252_p2 <= "1" when (unsigned(select_ln581_fu_243_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_268_p2 <= "1" when (tmp_2012_fu_258_p4 = ap_const_lv9_0) else "0";

    in_local_V_data_0_V_blk_n_assign_proc : process(in_local_V_data_0_V_full_n, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_local_V_data_0_V_blk_n <= in_local_V_data_0_V_full_n;
        else 
            in_local_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_local_V_data_0_V_din <= tmp_data_0_V_reg_527;

    in_local_V_data_0_V_write_assign_proc : process(in_local_V_data_0_V_full_n, ap_CS_fsm_state7)
    begin
        if (((in_local_V_data_0_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            in_local_V_data_0_V_write <= ap_const_logic_1;
        else 
            in_local_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_124_p2, in_r_TVALID_int)
    begin
        if (((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_last_V_U_ack_in)
    begin
        if (((in_r_TVALID = ap_const_logic_1) and (regslice_both_in_last_V_U_ack_in = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_124_p2, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_TREADY_int <= ap_const_logic_1;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_124_p2, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln23_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    or_ln28_fu_145_p2 <= (is_last_0_i_out_0_reg_99 or in_r_TLAST_int);
    or_ln581_fu_336_p2 <= (or_ln582_fu_303_p2 or icmp_ln581_reg_468);
    or_ln582_fu_303_p2 <= (icmp_ln582_reg_485 or icmp_ln571_reg_462);
    or_ln603_1_fu_367_p2 <= (and_ln585_fu_324_p2 or and_ln582_fu_298_p2);
    or_ln603_2_fu_373_p2 <= (or_ln603_fu_353_p2 or or_ln603_1_fu_367_p2);
    or_ln603_fu_353_p2 <= (and_ln603_fu_347_p2 or and_ln585_1_fu_330_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln570_fu_236_p3 <= 
        sub_ln461_fu_230_p2 when (tmp_2011_reg_447(0) = '1') else 
        zext_ln569_fu_226_p1;
    select_ln581_fu_243_p3 <= 
        add_ln581_reg_475 when (icmp_ln581_reg_468(0) = '1') else 
        sub_ln581_reg_480;
    select_ln588_fu_285_p3 <= 
        ap_const_lv8_FF when (tmp_2013_fu_277_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln603_1_fu_359_p3 <= 
        select_ln588_fu_285_p3 when (and_ln585_fu_324_p2(0) = '1') else 
        trunc_ln583_fu_248_p1;
    select_ln603_2_fu_410_p3 <= 
        select_ln603_fu_403_p3 when (or_ln603_reg_512(0) = '1') else 
        select_ln603_1_reg_517;
    select_ln603_fu_403_p3 <= 
        shl_ln604_fu_398_p2 when (and_ln603_reg_507(0) = '1') else 
        trunc_ln586_fu_394_p1;
        sext_ln581_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln581_reg_496),32));

    shl_ln604_fu_398_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_502),to_integer(unsigned('0' & trunc_ln581_fu_382_p1(8-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln461_fu_230_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_226_p1));
    sub_ln575_fu_189_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_181_p1));
    sub_ln581_fu_207_p2 <= std_logic_vector(unsigned(ap_const_lv12_5) - unsigned(sub_ln575_fu_189_p2));
    tmp_2012_fu_258_p4 <= select_ln581_fu_243_p3(11 downto 3);
    tmp_2013_fu_277_p3 <= bitcast_ln696_1_fu_274_p1(31 downto 31);
    tmp_data_0_V_fu_416_p3 <= 
        select_ln603_2_fu_410_p3 when (or_ln603_2_reg_522(0) = '1') else 
        ap_const_lv8_0;
    tmp_fu_219_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_457);
    trunc_ln557_fu_155_p1 <= bitcast_ln696_fu_151_p1(63 - 1 downto 0);
    trunc_ln565_fu_177_p1 <= bitcast_ln696_fu_151_p1(52 - 1 downto 0);
    trunc_ln581_fu_382_p1 <= select_ln581_reg_496(8 - 1 downto 0);
    trunc_ln583_fu_248_p1 <= select_ln570_fu_236_p3(8 - 1 downto 0);
    trunc_ln586_fu_394_p1 <= ashr_ln586_fu_389_p2(8 - 1 downto 0);
    xor_ln571_fu_293_p2 <= (icmp_ln571_reg_462 xor ap_const_lv1_1);
    xor_ln581_fu_341_p2 <= (or_ln581_fu_336_p2 xor ap_const_lv1_1);
    xor_ln582_fu_307_p2 <= (or_ln582_fu_303_p2 xor ap_const_lv1_1);
    xor_ln585_fu_318_p2 <= (icmp_ln585_fu_252_p2 xor ap_const_lv1_1);
    zext_ln461_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_reg_452),12));
    zext_ln569_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_219_p3),54));
    zext_ln586_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_379_p1),54));
end behav;
