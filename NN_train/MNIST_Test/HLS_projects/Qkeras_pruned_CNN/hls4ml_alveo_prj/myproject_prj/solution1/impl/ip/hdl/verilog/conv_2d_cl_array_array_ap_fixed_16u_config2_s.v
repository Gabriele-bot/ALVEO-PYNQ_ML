// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_2d_cl_array_array_ap_fixed_16u_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_V_dout,
        data_V_data_V_empty_n,
        data_V_data_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] data_V_data_V_dout;
input   data_V_data_V_empty_n;
output   data_V_data_V_read;
output  [11:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [11:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [11:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [11:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [11:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [11:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [11:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [11:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [11:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [11:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [11:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [11:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [11:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [11:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [11:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [11:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_2;
reg   [31:0] sX_2;
reg   [31:0] pY_2;
reg   [31:0] sY_2;
reg   [7:0] kernel_data_V_1_1;
reg   [7:0] kernel_data_V_1_2;
reg   [7:0] kernel_data_V_1_4;
reg   [7:0] kernel_data_V_1_5;
reg   [7:0] kernel_data_V_1_7;
reg   [7:0] kernel_data_V_1_8;
reg    data_V_data_V_blk_n;
wire    ap_CS_fsm_state3;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_state4;
reg   [0:0] icmp_ln78_reg_1018;
reg   [0:0] and_ln272_2_reg_1105;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
wire   [0:0] icmp_ln78_fu_271_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln78_fu_277_p2;
reg   [9:0] add_ln78_reg_1022;
reg   [7:0] kernel_data_V_1_6_ret_reg_1027;
reg   [7:0] kernel_data_V_1_3_ret_reg_1033;
reg   [7:0] kernel_data_V_1_0_ret_reg_1039;
reg   [7:0] kernel_data_V_1_1_ret_reg_1044;
reg   [7:0] kernel_data_V_1_2_ret_reg_1049;
reg   [7:0] kernel_data_V_1_5_ret_reg_1054;
reg   [7:0] kernel_data_V_1_7_ret_reg_1061;
reg   [7:0] kernel_data_V_1_8_ret_reg_1067;
reg   [31:0] sX_2_load_reg_1073;
wire   [0:0] icmp_ln272_fu_389_p2;
reg   [0:0] icmp_ln272_reg_1078;
reg   [31:0] sY_2_load_reg_1083;
wire   [0:0] icmp_ln272_1_fu_399_p2;
reg   [0:0] icmp_ln272_1_reg_1088;
reg   [31:0] pY_2_load_reg_1093;
reg   [31:0] pX_2_load_reg_1099;
wire   [0:0] and_ln272_2_fu_457_p2;
reg   [9:0] lshr_ln_reg_1109;
wire   [10:0] sub_ln1118_fu_495_p2;
reg   [10:0] sub_ln1118_reg_1114;
reg   [6:0] lshr_ln708_1_reg_1119;
reg   [7:0] trunc_ln708_30_reg_1124;
reg    call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_start;
wire    call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_done;
wire    call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_idle;
wire    call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_ready;
wire   [7:0] call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_0;
wire   [7:0] call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_1;
wire   [7:0] call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_2;
wire   [7:0] call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_3;
wire   [7:0] call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_4;
wire   [7:0] call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_5;
wire   [7:0] call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_6;
wire   [7:0] call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_7;
wire   [7:0] call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_8;
reg    call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_ce;
reg   [9:0] indvar_flatten_reg_234;
reg    ap_block_state1;
wire    io_acc_block_signal_op155;
reg    ap_predicate_op155_write_state4;
reg    ap_block_state4;
wire   [31:0] select_ln303_fu_998_p3;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_248_p4;
wire   [0:0] icmp_ln293_fu_931_p2;
wire   [0:0] icmp_ln297_fu_977_p2;
wire   [31:0] add_ln306_fu_936_p2;
wire   [31:0] select_ln308_fu_952_p3;
wire   [31:0] add_ln301_fu_982_p2;
wire   [11:0] tmp_data_4_V_fu_886_p1;
wire   [30:0] tmp_fu_409_p4;
wire   [30:0] tmp_2008_fu_429_p4;
wire   [0:0] icmp_ln272_4_fu_419_p2;
wire   [0:0] icmp_ln272_5_fu_439_p2;
wire   [0:0] and_ln272_1_fu_451_p2;
wire   [0:0] and_ln272_fu_445_p2;
wire   [9:0] shl_ln708_1_fu_467_p3;
wire   [10:0] zext_ln708_1_fu_463_p1;
wire   [10:0] zext_ln708_2_fu_475_p1;
wire   [10:0] add_ln708_fu_479_p2;
wire   [8:0] zext_ln708_16_fu_511_p1;
wire   [8:0] sub_ln1118_3_fu_515_p2;
wire   [8:0] shl_ln_fu_531_p3;
wire  signed [11:0] sext_ln1118_fu_548_p1;
wire   [11:0] zext_ln1116_fu_545_p1;
wire   [11:0] sub_ln1118_1_fu_551_p2;
wire   [10:0] trunc_ln_fu_557_p4;
wire   [8:0] shl_ln708_2_fu_571_p3;
wire   [8:0] shl_ln708_4_fu_589_p3;
wire   [10:0] shl_ln708_3_fu_582_p3;
wire   [10:0] zext_ln708_5_fu_596_p1;
wire   [10:0] sub_ln708_fu_600_p2;
wire   [9:0] lshr_ln708_s_fu_606_p4;
wire   [8:0] shl_ln708_5_fu_626_p3;
wire   [9:0] shl_ln708_6_fu_637_p3;
wire   [10:0] zext_ln708_8_fu_623_p1;
wire   [10:0] zext_ln708_10_fu_644_p1;
wire   [10:0] add_ln708_1_fu_648_p2;
wire   [9:0] lshr_ln708_2_fu_654_p4;
wire   [10:0] sub_ln1118_2_fu_668_p2;
wire   [9:0] trunc_ln708_s_fu_674_p4;
wire   [6:0] lshr_ln708_3_fu_688_p4;
wire   [8:0] shl_ln708_7_fu_701_p3;
wire   [9:0] shl_ln708_8_fu_715_p3;
wire   [10:0] zext_ln708_14_fu_712_p1;
wire   [10:0] zext_ln708_15_fu_722_p1;
wire   [10:0] add_ln708_2_fu_726_p2;
wire   [8:0] shl_ln708_9_fu_742_p3;
wire   [9:0] shl_ln2_fu_756_p3;
wire   [10:0] zext_ln1118_1_fu_763_p1;
wire   [10:0] sub_ln1118_4_fu_767_p2;
wire   [9:0] trunc_ln708_31_fu_773_p4;
wire   [9:0] zext_ln708_fu_538_p1;
wire   [9:0] acc_9_V_fu_787_p2;
wire   [10:0] zext_ln708_3_fu_542_p1;
wire   [10:0] add_ln703_2000_fu_798_p2;
wire   [10:0] zext_ln708_6_fu_616_p1;
wire   [10:0] acc_2_V_fu_808_p2;
wire   [7:0] zext_ln708_7_fu_620_p1;
wire   [7:0] add_ln703_2003_fu_819_p2;
wire   [9:0] zext_ln703_1_fu_825_p1;
wire   [9:0] zext_ln708_9_fu_633_p1;
wire   [9:0] acc_1_V_fu_829_p2;
wire   [10:0] zext_ln708_11_fu_664_p1;
wire   [10:0] acc_11_V_fu_840_p2;
wire   [7:0] zext_ln708_12_fu_697_p1;
wire   [7:0] tmp_data_0_V_4_fu_851_p2;
wire   [11:0] zext_ln708_13_fu_708_p1;
wire  signed [11:0] sext_ln708_fu_567_p1;
wire   [9:0] trunc_ln708_29_fu_732_p4;
wire   [9:0] acc_12_V_fu_869_p2;
wire   [8:0] acc_4_V_fu_880_p2;
wire  signed [10:0] sext_ln1118_1999_fu_753_p1;
wire   [10:0] zext_ln708_4_fu_578_p1;
wire   [10:0] add_ln703_2012_fu_892_p2;
wire  signed [11:0] sext_ln703_fu_804_p1;
wire  signed [11:0] sext_ln703_1381_fu_898_p1;
wire  signed [10:0] sext_ln703_1378_fu_783_p1;
wire   [10:0] acc_8_V_fu_909_p2;
wire   [10:0] zext_ln1118_fu_749_p1;
wire  signed [10:0] sext_ln708_1_fu_684_p1;
wire   [10:0] acc_14_V_fu_920_p2;
wire   [31:0] add_ln308_fu_947_p2;
wire   [31:0] add_ln303_fu_993_p2;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_condition_815;
reg    ap_condition_245;
reg    ap_condition_298;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 pX_2 = 32'd0;
#0 sX_2 = 32'd0;
#0 pY_2 = 32'd0;
#0 sY_2 = 32'd0;
#0 kernel_data_V_1_1 = 8'd0;
#0 kernel_data_V_1_2 = 8'd0;
#0 kernel_data_V_1_4 = 8'd0;
#0 kernel_data_V_1_5 = 8'd0;
#0 kernel_data_V_1_7 = 8'd0;
#0 kernel_data_V_1_8 = 8'd0;
end

shift_line_buffer_array_ap_ufixed_1u_config2_s call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_start),
    .ap_done(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_done),
    .ap_idle(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_idle),
    .ap_ready(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_ready),
    .in_elem_data_V_read(data_V_data_V_dout),
    .kernel_window_1_V_read(kernel_data_V_1_1),
    .kernel_window_2_V_read(kernel_data_V_1_2),
    .kernel_window_4_V_read(kernel_data_V_1_4),
    .kernel_window_5_V_read(kernel_data_V_1_5),
    .kernel_window_7_V_read(kernel_data_V_1_7),
    .kernel_window_8_V_read(kernel_data_V_1_8),
    .ap_return_0(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_0),
    .ap_return_1(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_1),
    .ap_return_2(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_2),
    .ap_return_3(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_3),
    .ap_return_4(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_4),
    .ap_return_5(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_5),
    .ap_return_6(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_6),
    .ap_return_7(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_7),
    .ap_return_8(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_8),
    .ap_ce(call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln78_reg_1018 == 1'd0))) begin
        indvar_flatten_reg_234 <= add_ln78_reg_1022;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_234 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_245)) begin
        if ((icmp_ln293_fu_931_p2 == 1'd1)) begin
            pX_2 <= 32'd0;
        end else if ((icmp_ln293_fu_931_p2 == 1'd0)) begin
            pX_2 <= add_ln306_fu_936_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_298)) begin
        if ((icmp_ln297_fu_977_p2 == 1'd1)) begin
            pY_2 <= 32'd0;
        end else if ((icmp_ln297_fu_977_p2 == 1'd0)) begin
            pY_2 <= add_ln301_fu_982_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_245)) begin
        if ((icmp_ln293_fu_931_p2 == 1'd1)) begin
            sX_2 <= 32'd0;
        end else if ((icmp_ln293_fu_931_p2 == 1'd0)) begin
            sX_2 <= select_ln308_fu_952_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln78_reg_1022 <= add_ln78_fu_277_p2;
        icmp_ln78_reg_1018 <= icmp_ln78_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln272_2_reg_1105 <= and_ln272_2_fu_457_p2;
        icmp_ln272_1_reg_1088 <= icmp_ln272_1_fu_399_p2;
        icmp_ln272_reg_1078 <= icmp_ln272_fu_389_p2;
        kernel_data_V_1_0_ret_reg_1039 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_0;
        kernel_data_V_1_1 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_3;
        kernel_data_V_1_1_ret_reg_1044 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_3;
        kernel_data_V_1_2 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_4;
        kernel_data_V_1_2_ret_reg_1049 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_4;
        kernel_data_V_1_3_ret_reg_1033 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_1;
        kernel_data_V_1_4 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_5;
        kernel_data_V_1_5 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_6;
        kernel_data_V_1_5_ret_reg_1054 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_6;
        kernel_data_V_1_6_ret_reg_1027 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_2;
        kernel_data_V_1_7 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_7;
        kernel_data_V_1_7_ret_reg_1061 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_7;
        kernel_data_V_1_8 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_8;
        kernel_data_V_1_8_ret_reg_1067 <= call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_8;
        pX_2_load_reg_1099 <= pX_2;
        pY_2_load_reg_1093 <= pY_2;
        sX_2_load_reg_1073 <= sX_2;
        sY_2_load_reg_1083 <= sY_2;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_2_fu_457_p2))) begin
        lshr_ln708_1_reg_1119 <= {{call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_5[7:1]}};
        lshr_ln_reg_1109 <= {{add_ln708_fu_479_p2[10:1]}};
        sub_ln1118_reg_1114[10 : 2] <= sub_ln1118_fu_495_p2[10 : 2];
        trunc_ln708_30_reg_1124 <= {{sub_ln1118_3_fu_515_p2[8:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln293_fu_931_p2 == 1'd1) & (icmp_ln78_reg_1018 == 1'd0))) begin
        sY_2 <= ap_phi_mux_storemerge_i_i_phi_fu_248_p4;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_815)) begin
        if ((icmp_ln297_fu_977_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_i_i_phi_fu_248_p4 = 32'd0;
        end else if ((icmp_ln297_fu_977_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_i_i_phi_fu_248_p4 = select_ln303_fu_998_p3;
        end else begin
            ap_phi_mux_storemerge_i_i_phi_fu_248_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_248_p4 = 'bx;
    end
end

always @ (*) begin
    if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_ce = 1'b1;
    end else begin
        call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_start = 1'b1;
    end else begin
        call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_V_blk_n = data_V_data_V_empty_n;
    end else begin
        data_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_V_read = 1'b1;
    end else begin
        data_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op155_write_state4 == 1'b1))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln78_fu_271_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_11_V_fu_840_p2 = ($signed(zext_ln708_11_fu_664_p1) + $signed(11'd2046));

assign acc_12_V_fu_869_p2 = (trunc_ln708_29_fu_732_p4 + 10'd8);

assign acc_14_V_fu_920_p2 = ($signed(zext_ln1118_fu_749_p1) + $signed(sext_ln708_1_fu_684_p1));

assign acc_1_V_fu_829_p2 = (zext_ln703_1_fu_825_p1 + zext_ln708_9_fu_633_p1);

assign acc_2_V_fu_808_p2 = ($signed(zext_ln708_6_fu_616_p1) + $signed(11'd2046));

assign acc_4_V_fu_880_p2 = (shl_ln708_9_fu_742_p3 | 9'd1);

assign acc_8_V_fu_909_p2 = ($signed(sext_ln703_1378_fu_783_p1) + $signed(11'd2043));

assign acc_9_V_fu_787_p2 = (zext_ln708_fu_538_p1 + 10'd4);

assign add_ln301_fu_982_p2 = (pY_2_load_reg_1093 + 32'd1);

assign add_ln303_fu_993_p2 = (sY_2_load_reg_1083 + 32'd1);

assign add_ln306_fu_936_p2 = (pX_2_load_reg_1099 + 32'd1);

assign add_ln308_fu_947_p2 = (sX_2_load_reg_1073 + 32'd1);

assign add_ln703_2000_fu_798_p2 = ($signed(zext_ln708_3_fu_542_p1) + $signed(11'd2027));

assign add_ln703_2003_fu_819_p2 = (zext_ln708_7_fu_620_p1 + 8'd8);

assign add_ln703_2012_fu_892_p2 = ($signed(sext_ln1118_1999_fu_753_p1) + $signed(zext_ln708_4_fu_578_p1));

assign add_ln708_1_fu_648_p2 = (zext_ln708_8_fu_623_p1 + zext_ln708_10_fu_644_p1);

assign add_ln708_2_fu_726_p2 = (zext_ln708_14_fu_712_p1 + zext_ln708_15_fu_722_p1);

assign add_ln708_fu_479_p2 = (zext_ln708_1_fu_463_p1 + zext_ln708_2_fu_475_p1);

assign add_ln78_fu_277_p2 = (indvar_flatten_reg_234 + 10'd1);

assign and_ln272_1_fu_451_p2 = (icmp_ln272_5_fu_439_p2 & icmp_ln272_4_fu_419_p2);

assign and_ln272_2_fu_457_p2 = (and_ln272_fu_445_p2 & and_ln272_1_fu_451_p2);

assign and_ln272_fu_445_p2 = (icmp_ln272_fu_389_p2 & icmp_ln272_1_fu_399_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1));
end

always @ (*) begin
    ap_condition_245 = (~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln78_reg_1018 == 1'd0));
end

always @ (*) begin
    ap_condition_298 = (~((io_acc_block_signal_op155 == 1'b0) & (ap_predicate_op155_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln293_fu_931_p2 == 1'd1) & (icmp_ln78_reg_1018 == 1'd0));
end

always @ (*) begin
    ap_condition_815 = ((1'b1 == ap_CS_fsm_state4) & (icmp_ln293_fu_931_p2 == 1'd1) & (icmp_ln78_reg_1018 == 1'd0));
end

always @ (*) begin
    ap_predicate_op155_write_state4 = ((1'd1 == and_ln272_2_reg_1105) & (icmp_ln78_reg_1018 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln272_1_fu_399_p2 = ((sY_2 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln272_4_fu_419_p2 = (($signed(tmp_fu_409_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln272_5_fu_439_p2 = (($signed(tmp_2008_fu_429_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln272_fu_389_p2 = ((sX_2 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln293_fu_931_p2 = ((pX_2_load_reg_1099 == 32'd27) ? 1'b1 : 1'b0);

assign icmp_ln297_fu_977_p2 = ((pY_2_load_reg_1093 == 32'd27) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_271_p2 = ((indvar_flatten_reg_234 == 10'd784) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op155 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign lshr_ln708_2_fu_654_p4 = {{add_ln708_1_fu_648_p2[10:1]}};

assign lshr_ln708_3_fu_688_p4 = {{kernel_data_V_1_6_ret_reg_1027[7:1]}};

assign lshr_ln708_s_fu_606_p4 = {{sub_ln708_fu_600_p2[10:1]}};

assign res_V_data_0_V_din = tmp_data_0_V_4_fu_851_p2;

assign res_V_data_10_V_din = tmp_data_4_V_fu_886_p1;

assign res_V_data_11_V_din = $signed(acc_11_V_fu_840_p2);

assign res_V_data_12_V_din = acc_12_V_fu_869_p2;

assign res_V_data_13_V_din = ($signed(zext_ln708_13_fu_708_p1) + $signed(sext_ln708_fu_567_p1));

assign res_V_data_14_V_din = $signed(acc_14_V_fu_920_p2);

assign res_V_data_15_V_din = 12'd0;

assign res_V_data_1_V_din = acc_1_V_fu_829_p2;

assign res_V_data_2_V_din = $signed(acc_2_V_fu_808_p2);

assign res_V_data_3_V_din = 12'd0;

assign res_V_data_4_V_din = tmp_data_4_V_fu_886_p1;

assign res_V_data_5_V_din = ($signed(sext_ln703_fu_804_p1) + $signed(sext_ln703_1381_fu_898_p1));

assign res_V_data_6_V_din = 12'd0;

assign res_V_data_7_V_din = 12'd4090;

assign res_V_data_8_V_din = $signed(acc_8_V_fu_909_p2);

assign res_V_data_9_V_din = acc_9_V_fu_787_p2;

assign select_ln303_fu_998_p3 = ((icmp_ln272_1_reg_1088[0:0] === 1'b1) ? 32'd2 : add_ln303_fu_993_p2);

assign select_ln308_fu_952_p3 = ((icmp_ln272_reg_1078[0:0] === 1'b1) ? 32'd2 : add_ln308_fu_947_p2);

assign sext_ln1118_1999_fu_753_p1 = $signed(trunc_ln708_30_reg_1124);

assign sext_ln1118_fu_548_p1 = $signed(sub_ln1118_reg_1114);

assign sext_ln703_1378_fu_783_p1 = $signed(trunc_ln708_31_fu_773_p4);

assign sext_ln703_1381_fu_898_p1 = $signed(add_ln703_2012_fu_892_p2);

assign sext_ln703_fu_804_p1 = $signed(add_ln703_2000_fu_798_p2);

assign sext_ln708_1_fu_684_p1 = $signed(trunc_ln708_s_fu_674_p4);

assign sext_ln708_fu_567_p1 = $signed(trunc_ln_fu_557_p4);

assign shl_ln2_fu_756_p3 = {{kernel_data_V_1_8_ret_reg_1067}, {2'd0}};

assign shl_ln708_1_fu_467_p3 = {{call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_3}, {2'd0}};

assign shl_ln708_2_fu_571_p3 = {{kernel_data_V_1_2_ret_reg_1049}, {1'd0}};

assign shl_ln708_3_fu_582_p3 = {{kernel_data_V_1_3_ret_reg_1033}, {3'd0}};

assign shl_ln708_4_fu_589_p3 = {{kernel_data_V_1_3_ret_reg_1033}, {1'd0}};

assign shl_ln708_5_fu_626_p3 = {{kernel_data_V_1_5_ret_reg_1054}, {1'd0}};

assign shl_ln708_6_fu_637_p3 = {{kernel_data_V_1_5_ret_reg_1054}, {2'd0}};

assign shl_ln708_7_fu_701_p3 = {{kernel_data_V_1_6_ret_reg_1027}, {1'd0}};

assign shl_ln708_8_fu_715_p3 = {{kernel_data_V_1_7_ret_reg_1061}, {2'd0}};

assign shl_ln708_9_fu_742_p3 = {{kernel_data_V_1_8_ret_reg_1067}, {1'd0}};

assign shl_ln_fu_531_p3 = {{kernel_data_V_1_0_ret_reg_1039}, {1'd0}};

assign start_out = real_start;

assign sub_ln1118_1_fu_551_p2 = ($signed(sext_ln1118_fu_548_p1) - $signed(zext_ln1116_fu_545_p1));

assign sub_ln1118_2_fu_668_p2 = (11'd0 - zext_ln708_10_fu_644_p1);

assign sub_ln1118_3_fu_515_p2 = (9'd0 - zext_ln708_16_fu_511_p1);

assign sub_ln1118_4_fu_767_p2 = (11'd0 - zext_ln1118_1_fu_763_p1);

assign sub_ln1118_fu_495_p2 = (11'd0 - zext_ln708_2_fu_475_p1);

assign sub_ln708_fu_600_p2 = (shl_ln708_3_fu_582_p3 - zext_ln708_5_fu_596_p1);

assign tmp_2008_fu_429_p4 = {{pX_2[31:1]}};

assign tmp_data_0_V_4_fu_851_p2 = (zext_ln708_12_fu_697_p1 + 8'd6);

assign tmp_data_4_V_fu_886_p1 = acc_4_V_fu_880_p2;

assign tmp_fu_409_p4 = {{pY_2[31:1]}};

assign trunc_ln708_29_fu_732_p4 = {{add_ln708_2_fu_726_p2[10:1]}};

assign trunc_ln708_31_fu_773_p4 = {{sub_ln1118_4_fu_767_p2[10:1]}};

assign trunc_ln708_s_fu_674_p4 = {{sub_ln1118_2_fu_668_p2[10:1]}};

assign trunc_ln_fu_557_p4 = {{sub_ln1118_1_fu_551_p2[11:1]}};

assign zext_ln1116_fu_545_p1 = kernel_data_V_1_1_ret_reg_1044;

assign zext_ln1118_1_fu_763_p1 = shl_ln2_fu_756_p3;

assign zext_ln1118_fu_749_p1 = shl_ln708_9_fu_742_p3;

assign zext_ln703_1_fu_825_p1 = add_ln703_2003_fu_819_p2;

assign zext_ln708_10_fu_644_p1 = shl_ln708_6_fu_637_p3;

assign zext_ln708_11_fu_664_p1 = lshr_ln708_2_fu_654_p4;

assign zext_ln708_12_fu_697_p1 = lshr_ln708_3_fu_688_p4;

assign zext_ln708_13_fu_708_p1 = shl_ln708_7_fu_701_p3;

assign zext_ln708_14_fu_712_p1 = kernel_data_V_1_7_ret_reg_1061;

assign zext_ln708_15_fu_722_p1 = shl_ln708_8_fu_715_p3;

assign zext_ln708_16_fu_511_p1 = call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_8;

assign zext_ln708_1_fu_463_p1 = call_ret_shift_line_buffer_array_ap_ufixed_1u_config2_s_fu_255_ap_return_3;

assign zext_ln708_2_fu_475_p1 = shl_ln708_1_fu_467_p3;

assign zext_ln708_3_fu_542_p1 = lshr_ln_reg_1109;

assign zext_ln708_4_fu_578_p1 = shl_ln708_2_fu_571_p3;

assign zext_ln708_5_fu_596_p1 = shl_ln708_4_fu_589_p3;

assign zext_ln708_6_fu_616_p1 = lshr_ln708_s_fu_606_p4;

assign zext_ln708_7_fu_620_p1 = lshr_ln708_1_reg_1119;

assign zext_ln708_8_fu_623_p1 = kernel_data_V_1_5_ret_reg_1054;

assign zext_ln708_9_fu_633_p1 = shl_ln708_5_fu_626_p3;

assign zext_ln708_fu_538_p1 = shl_ln_fu_531_p3;

always @ (posedge ap_clk) begin
    sub_ln1118_reg_1114[1:0] <= 2'b00;
end

endmodule //conv_2d_cl_array_array_ap_fixed_16u_config2_s
