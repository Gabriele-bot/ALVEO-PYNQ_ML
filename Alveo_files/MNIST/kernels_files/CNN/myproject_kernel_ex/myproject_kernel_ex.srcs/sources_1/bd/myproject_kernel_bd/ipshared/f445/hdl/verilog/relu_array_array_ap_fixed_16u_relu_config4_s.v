// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_array_ap_fixed_16u_relu_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [11:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [11:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [11:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [11:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [11:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [11:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [11:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [11:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [11:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [11:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [11:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [11:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [11:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [11:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [11:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [11:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [2:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [2:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [2:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [2:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [2:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [2:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [2:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [2:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [2:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [2:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [2:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [2:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [2:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [2:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [2:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [2:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln60_reg_2747;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln60_reg_2747_pp0_iter1_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [9:0] i_0_reg_228;
wire   [0:0] icmp_ln60_fu_239_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op44;
reg    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op416;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] i_fu_245_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] tmp_data_0_V_fu_455_p3;
reg   [1:0] tmp_data_0_V_reg_2756;
wire   [1:0] tmp_data_1_V_fu_603_p3;
reg   [1:0] tmp_data_1_V_reg_2761;
wire   [1:0] tmp_data_2_V_fu_751_p3;
reg   [1:0] tmp_data_2_V_reg_2766;
wire   [1:0] tmp_data_3_V_fu_899_p3;
reg   [1:0] tmp_data_3_V_reg_2771;
wire   [1:0] tmp_data_4_V_fu_1047_p3;
reg   [1:0] tmp_data_4_V_reg_2776;
wire   [1:0] tmp_data_5_V_fu_1195_p3;
reg   [1:0] tmp_data_5_V_reg_2781;
wire   [1:0] tmp_data_6_V_fu_1343_p3;
reg   [1:0] tmp_data_6_V_reg_2786;
wire   [1:0] tmp_data_7_V_fu_1491_p3;
reg   [1:0] tmp_data_7_V_reg_2791;
wire   [1:0] tmp_data_8_V_fu_1639_p3;
reg   [1:0] tmp_data_8_V_reg_2796;
wire   [1:0] tmp_data_9_V_fu_1787_p3;
reg   [1:0] tmp_data_9_V_reg_2801;
wire   [1:0] tmp_data_10_V_fu_1935_p3;
reg   [1:0] tmp_data_10_V_reg_2806;
wire   [1:0] tmp_data_11_V_fu_2083_p3;
reg   [1:0] tmp_data_11_V_reg_2811;
wire   [1:0] tmp_data_12_V_fu_2231_p3;
reg   [1:0] tmp_data_12_V_reg_2816;
wire   [1:0] tmp_data_13_V_fu_2379_p3;
reg   [1:0] tmp_data_13_V_reg_2821;
wire   [1:0] tmp_data_14_V_fu_2527_p3;
reg   [1:0] tmp_data_14_V_reg_2826;
wire   [1:0] tmp_data_15_V_fu_2675_p3;
reg   [1:0] tmp_data_15_V_reg_2831;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_105_fu_339_p3;
wire   [2:0] trunc_ln_fu_321_p4;
wire   [2:0] zext_ln415_fu_347_p1;
wire   [1:0] trunc_ln415_s_fu_351_p4;
wire   [1:0] zext_ln415_32_fu_361_p1;
wire   [2:0] add_ln415_fu_365_p2;
wire   [0:0] tmp_106_fu_377_p3;
wire   [0:0] tmp_104_fu_331_p3;
wire   [0:0] xor_ln416_fu_385_p2;
wire   [3:0] p_Result_s_fu_405_p4;
wire   [0:0] and_ln416_fu_391_p2;
wire   [0:0] icmp_ln879_fu_415_p2;
wire   [0:0] icmp_ln768_fu_421_p2;
wire   [0:0] select_ln777_fu_427_p3;
wire   [0:0] tmp_107_fu_397_p3;
wire   [0:0] xor_ln785_fu_435_p2;
wire   [0:0] or_ln340_fu_441_p2;
wire   [1:0] add_ln416_fu_371_p2;
wire   [0:0] icmp_ln1494_fu_315_p2;
wire   [1:0] select_ln340_fu_447_p3;
wire   [0:0] tmp_109_fu_487_p3;
wire   [2:0] trunc_ln708_s_fu_469_p4;
wire   [2:0] zext_ln415_16_fu_495_p1;
wire   [1:0] trunc_ln415_16_fu_499_p4;
wire   [1:0] zext_ln415_33_fu_509_p1;
wire   [2:0] add_ln415_16_fu_513_p2;
wire   [0:0] tmp_110_fu_525_p3;
wire   [0:0] tmp_108_fu_479_p3;
wire   [0:0] xor_ln416_16_fu_533_p2;
wire   [3:0] p_Result_12_1_fu_553_p4;
wire   [0:0] and_ln416_16_fu_539_p2;
wire   [0:0] icmp_ln879_16_fu_563_p2;
wire   [0:0] icmp_ln768_16_fu_569_p2;
wire   [0:0] select_ln777_16_fu_575_p3;
wire   [0:0] tmp_111_fu_545_p3;
wire   [0:0] xor_ln785_1_fu_583_p2;
wire   [0:0] or_ln340_1_fu_589_p2;
wire   [1:0] add_ln416_16_fu_519_p2;
wire   [0:0] icmp_ln1494_1_fu_463_p2;
wire   [1:0] select_ln340_1_fu_595_p3;
wire   [0:0] tmp_113_fu_635_p3;
wire   [2:0] trunc_ln708_15_fu_617_p4;
wire   [2:0] zext_ln415_17_fu_643_p1;
wire   [1:0] trunc_ln415_17_fu_647_p4;
wire   [1:0] zext_ln415_34_fu_657_p1;
wire   [2:0] add_ln415_17_fu_661_p2;
wire   [0:0] tmp_114_fu_673_p3;
wire   [0:0] tmp_112_fu_627_p3;
wire   [0:0] xor_ln416_17_fu_681_p2;
wire   [3:0] p_Result_12_2_fu_701_p4;
wire   [0:0] and_ln416_17_fu_687_p2;
wire   [0:0] icmp_ln879_17_fu_711_p2;
wire   [0:0] icmp_ln768_17_fu_717_p2;
wire   [0:0] select_ln777_17_fu_723_p3;
wire   [0:0] tmp_115_fu_693_p3;
wire   [0:0] xor_ln785_2_fu_731_p2;
wire   [0:0] or_ln340_2_fu_737_p2;
wire   [1:0] add_ln416_17_fu_667_p2;
wire   [0:0] icmp_ln1494_2_fu_611_p2;
wire   [1:0] select_ln340_2_fu_743_p3;
wire   [0:0] tmp_117_fu_783_p3;
wire   [2:0] trunc_ln708_16_fu_765_p4;
wire   [2:0] zext_ln415_18_fu_791_p1;
wire   [1:0] trunc_ln415_18_fu_795_p4;
wire   [1:0] zext_ln415_35_fu_805_p1;
wire   [2:0] add_ln415_18_fu_809_p2;
wire   [0:0] tmp_118_fu_821_p3;
wire   [0:0] tmp_116_fu_775_p3;
wire   [0:0] xor_ln416_18_fu_829_p2;
wire   [3:0] p_Result_12_3_fu_849_p4;
wire   [0:0] and_ln416_18_fu_835_p2;
wire   [0:0] icmp_ln879_18_fu_859_p2;
wire   [0:0] icmp_ln768_18_fu_865_p2;
wire   [0:0] select_ln777_18_fu_871_p3;
wire   [0:0] tmp_119_fu_841_p3;
wire   [0:0] xor_ln785_3_fu_879_p2;
wire   [0:0] or_ln340_3_fu_885_p2;
wire   [1:0] add_ln416_18_fu_815_p2;
wire   [0:0] icmp_ln1494_3_fu_759_p2;
wire   [1:0] select_ln340_3_fu_891_p3;
wire   [0:0] tmp_121_fu_931_p3;
wire   [2:0] trunc_ln708_17_fu_913_p4;
wire   [2:0] zext_ln415_19_fu_939_p1;
wire   [1:0] trunc_ln415_19_fu_943_p4;
wire   [1:0] zext_ln415_36_fu_953_p1;
wire   [2:0] add_ln415_19_fu_957_p2;
wire   [0:0] tmp_122_fu_969_p3;
wire   [0:0] tmp_120_fu_923_p3;
wire   [0:0] xor_ln416_19_fu_977_p2;
wire   [3:0] p_Result_12_4_fu_997_p4;
wire   [0:0] and_ln416_19_fu_983_p2;
wire   [0:0] icmp_ln879_19_fu_1007_p2;
wire   [0:0] icmp_ln768_19_fu_1013_p2;
wire   [0:0] select_ln777_19_fu_1019_p3;
wire   [0:0] tmp_123_fu_989_p3;
wire   [0:0] xor_ln785_4_fu_1027_p2;
wire   [0:0] or_ln340_4_fu_1033_p2;
wire   [1:0] add_ln416_19_fu_963_p2;
wire   [0:0] icmp_ln1494_4_fu_907_p2;
wire   [1:0] select_ln340_4_fu_1039_p3;
wire   [0:0] tmp_125_fu_1079_p3;
wire   [2:0] trunc_ln708_18_fu_1061_p4;
wire   [2:0] zext_ln415_20_fu_1087_p1;
wire   [1:0] trunc_ln415_20_fu_1091_p4;
wire   [1:0] zext_ln415_37_fu_1101_p1;
wire   [2:0] add_ln415_20_fu_1105_p2;
wire   [0:0] tmp_126_fu_1117_p3;
wire   [0:0] tmp_124_fu_1071_p3;
wire   [0:0] xor_ln416_20_fu_1125_p2;
wire   [3:0] p_Result_12_5_fu_1145_p4;
wire   [0:0] and_ln416_20_fu_1131_p2;
wire   [0:0] icmp_ln879_20_fu_1155_p2;
wire   [0:0] icmp_ln768_20_fu_1161_p2;
wire   [0:0] select_ln777_20_fu_1167_p3;
wire   [0:0] tmp_127_fu_1137_p3;
wire   [0:0] xor_ln785_5_fu_1175_p2;
wire   [0:0] or_ln340_5_fu_1181_p2;
wire   [1:0] add_ln416_20_fu_1111_p2;
wire   [0:0] icmp_ln1494_5_fu_1055_p2;
wire   [1:0] select_ln340_5_fu_1187_p3;
wire   [0:0] tmp_129_fu_1227_p3;
wire   [2:0] trunc_ln708_19_fu_1209_p4;
wire   [2:0] zext_ln415_21_fu_1235_p1;
wire   [1:0] trunc_ln415_21_fu_1239_p4;
wire   [1:0] zext_ln415_38_fu_1249_p1;
wire   [2:0] add_ln415_21_fu_1253_p2;
wire   [0:0] tmp_130_fu_1265_p3;
wire   [0:0] tmp_128_fu_1219_p3;
wire   [0:0] xor_ln416_21_fu_1273_p2;
wire   [3:0] p_Result_12_6_fu_1293_p4;
wire   [0:0] and_ln416_21_fu_1279_p2;
wire   [0:0] icmp_ln879_21_fu_1303_p2;
wire   [0:0] icmp_ln768_21_fu_1309_p2;
wire   [0:0] select_ln777_21_fu_1315_p3;
wire   [0:0] tmp_131_fu_1285_p3;
wire   [0:0] xor_ln785_6_fu_1323_p2;
wire   [0:0] or_ln340_6_fu_1329_p2;
wire   [1:0] add_ln416_21_fu_1259_p2;
wire   [0:0] icmp_ln1494_6_fu_1203_p2;
wire   [1:0] select_ln340_6_fu_1335_p3;
wire   [0:0] tmp_133_fu_1375_p3;
wire   [2:0] trunc_ln708_20_fu_1357_p4;
wire   [2:0] zext_ln415_22_fu_1383_p1;
wire   [1:0] trunc_ln415_22_fu_1387_p4;
wire   [1:0] zext_ln415_39_fu_1397_p1;
wire   [2:0] add_ln415_22_fu_1401_p2;
wire   [0:0] tmp_134_fu_1413_p3;
wire   [0:0] tmp_132_fu_1367_p3;
wire   [0:0] xor_ln416_22_fu_1421_p2;
wire   [3:0] p_Result_12_7_fu_1441_p4;
wire   [0:0] and_ln416_22_fu_1427_p2;
wire   [0:0] icmp_ln879_22_fu_1451_p2;
wire   [0:0] icmp_ln768_22_fu_1457_p2;
wire   [0:0] select_ln777_22_fu_1463_p3;
wire   [0:0] tmp_135_fu_1433_p3;
wire   [0:0] xor_ln785_7_fu_1471_p2;
wire   [0:0] or_ln340_7_fu_1477_p2;
wire   [1:0] add_ln416_22_fu_1407_p2;
wire   [0:0] icmp_ln1494_7_fu_1351_p2;
wire   [1:0] select_ln340_7_fu_1483_p3;
wire   [0:0] tmp_137_fu_1523_p3;
wire   [2:0] trunc_ln708_21_fu_1505_p4;
wire   [2:0] zext_ln415_23_fu_1531_p1;
wire   [1:0] trunc_ln415_23_fu_1535_p4;
wire   [1:0] zext_ln415_40_fu_1545_p1;
wire   [2:0] add_ln415_23_fu_1549_p2;
wire   [0:0] tmp_138_fu_1561_p3;
wire   [0:0] tmp_136_fu_1515_p3;
wire   [0:0] xor_ln416_23_fu_1569_p2;
wire   [3:0] p_Result_12_8_fu_1589_p4;
wire   [0:0] and_ln416_23_fu_1575_p2;
wire   [0:0] icmp_ln879_23_fu_1599_p2;
wire   [0:0] icmp_ln768_23_fu_1605_p2;
wire   [0:0] select_ln777_23_fu_1611_p3;
wire   [0:0] tmp_139_fu_1581_p3;
wire   [0:0] xor_ln785_8_fu_1619_p2;
wire   [0:0] or_ln340_8_fu_1625_p2;
wire   [1:0] add_ln416_23_fu_1555_p2;
wire   [0:0] icmp_ln1494_8_fu_1499_p2;
wire   [1:0] select_ln340_8_fu_1631_p3;
wire   [0:0] tmp_141_fu_1671_p3;
wire   [2:0] trunc_ln708_22_fu_1653_p4;
wire   [2:0] zext_ln415_24_fu_1679_p1;
wire   [1:0] trunc_ln415_24_fu_1683_p4;
wire   [1:0] zext_ln415_41_fu_1693_p1;
wire   [2:0] add_ln415_24_fu_1697_p2;
wire   [0:0] tmp_142_fu_1709_p3;
wire   [0:0] tmp_140_fu_1663_p3;
wire   [0:0] xor_ln416_24_fu_1717_p2;
wire   [3:0] p_Result_12_9_fu_1737_p4;
wire   [0:0] and_ln416_24_fu_1723_p2;
wire   [0:0] icmp_ln879_24_fu_1747_p2;
wire   [0:0] icmp_ln768_24_fu_1753_p2;
wire   [0:0] select_ln777_24_fu_1759_p3;
wire   [0:0] tmp_143_fu_1729_p3;
wire   [0:0] xor_ln785_9_fu_1767_p2;
wire   [0:0] or_ln340_9_fu_1773_p2;
wire   [1:0] add_ln416_24_fu_1703_p2;
wire   [0:0] icmp_ln1494_9_fu_1647_p2;
wire   [1:0] select_ln340_9_fu_1779_p3;
wire   [0:0] tmp_145_fu_1819_p3;
wire   [2:0] trunc_ln708_23_fu_1801_p4;
wire   [2:0] zext_ln415_25_fu_1827_p1;
wire   [1:0] trunc_ln415_25_fu_1831_p4;
wire   [1:0] zext_ln415_42_fu_1841_p1;
wire   [2:0] add_ln415_25_fu_1845_p2;
wire   [0:0] tmp_146_fu_1857_p3;
wire   [0:0] tmp_144_fu_1811_p3;
wire   [0:0] xor_ln416_25_fu_1865_p2;
wire   [3:0] p_Result_12_s_fu_1885_p4;
wire   [0:0] and_ln416_25_fu_1871_p2;
wire   [0:0] icmp_ln879_25_fu_1895_p2;
wire   [0:0] icmp_ln768_25_fu_1901_p2;
wire   [0:0] select_ln777_25_fu_1907_p3;
wire   [0:0] tmp_147_fu_1877_p3;
wire   [0:0] xor_ln785_10_fu_1915_p2;
wire   [0:0] or_ln340_10_fu_1921_p2;
wire   [1:0] add_ln416_25_fu_1851_p2;
wire   [0:0] icmp_ln1494_10_fu_1795_p2;
wire   [1:0] select_ln340_10_fu_1927_p3;
wire   [0:0] tmp_149_fu_1967_p3;
wire   [2:0] trunc_ln708_24_fu_1949_p4;
wire   [2:0] zext_ln415_26_fu_1975_p1;
wire   [1:0] trunc_ln415_26_fu_1979_p4;
wire   [1:0] zext_ln415_43_fu_1989_p1;
wire   [2:0] add_ln415_26_fu_1993_p2;
wire   [0:0] tmp_150_fu_2005_p3;
wire   [0:0] tmp_148_fu_1959_p3;
wire   [0:0] xor_ln416_26_fu_2013_p2;
wire   [3:0] p_Result_12_10_fu_2033_p4;
wire   [0:0] and_ln416_26_fu_2019_p2;
wire   [0:0] icmp_ln879_26_fu_2043_p2;
wire   [0:0] icmp_ln768_26_fu_2049_p2;
wire   [0:0] select_ln777_26_fu_2055_p3;
wire   [0:0] tmp_151_fu_2025_p3;
wire   [0:0] xor_ln785_11_fu_2063_p2;
wire   [0:0] or_ln340_11_fu_2069_p2;
wire   [1:0] add_ln416_26_fu_1999_p2;
wire   [0:0] icmp_ln1494_11_fu_1943_p2;
wire   [1:0] select_ln340_11_fu_2075_p3;
wire   [0:0] tmp_153_fu_2115_p3;
wire   [2:0] trunc_ln708_25_fu_2097_p4;
wire   [2:0] zext_ln415_27_fu_2123_p1;
wire   [1:0] trunc_ln415_27_fu_2127_p4;
wire   [1:0] zext_ln415_44_fu_2137_p1;
wire   [2:0] add_ln415_27_fu_2141_p2;
wire   [0:0] tmp_154_fu_2153_p3;
wire   [0:0] tmp_152_fu_2107_p3;
wire   [0:0] xor_ln416_27_fu_2161_p2;
wire   [3:0] p_Result_12_11_fu_2181_p4;
wire   [0:0] and_ln416_27_fu_2167_p2;
wire   [0:0] icmp_ln879_27_fu_2191_p2;
wire   [0:0] icmp_ln768_27_fu_2197_p2;
wire   [0:0] select_ln777_27_fu_2203_p3;
wire   [0:0] tmp_155_fu_2173_p3;
wire   [0:0] xor_ln785_12_fu_2211_p2;
wire   [0:0] or_ln340_12_fu_2217_p2;
wire   [1:0] add_ln416_27_fu_2147_p2;
wire   [0:0] icmp_ln1494_12_fu_2091_p2;
wire   [1:0] select_ln340_12_fu_2223_p3;
wire   [0:0] tmp_157_fu_2263_p3;
wire   [2:0] trunc_ln708_26_fu_2245_p4;
wire   [2:0] zext_ln415_28_fu_2271_p1;
wire   [1:0] trunc_ln415_28_fu_2275_p4;
wire   [1:0] zext_ln415_45_fu_2285_p1;
wire   [2:0] add_ln415_28_fu_2289_p2;
wire   [0:0] tmp_158_fu_2301_p3;
wire   [0:0] tmp_156_fu_2255_p3;
wire   [0:0] xor_ln416_28_fu_2309_p2;
wire   [3:0] p_Result_12_12_fu_2329_p4;
wire   [0:0] and_ln416_28_fu_2315_p2;
wire   [0:0] icmp_ln879_28_fu_2339_p2;
wire   [0:0] icmp_ln768_28_fu_2345_p2;
wire   [0:0] select_ln777_28_fu_2351_p3;
wire   [0:0] tmp_159_fu_2321_p3;
wire   [0:0] xor_ln785_13_fu_2359_p2;
wire   [0:0] or_ln340_13_fu_2365_p2;
wire   [1:0] add_ln416_28_fu_2295_p2;
wire   [0:0] icmp_ln1494_13_fu_2239_p2;
wire   [1:0] select_ln340_13_fu_2371_p3;
wire   [0:0] tmp_161_fu_2411_p3;
wire   [2:0] trunc_ln708_27_fu_2393_p4;
wire   [2:0] zext_ln415_29_fu_2419_p1;
wire   [1:0] trunc_ln415_29_fu_2423_p4;
wire   [1:0] zext_ln415_46_fu_2433_p1;
wire   [2:0] add_ln415_29_fu_2437_p2;
wire   [0:0] tmp_162_fu_2449_p3;
wire   [0:0] tmp_160_fu_2403_p3;
wire   [0:0] xor_ln416_29_fu_2457_p2;
wire   [3:0] p_Result_12_13_fu_2477_p4;
wire   [0:0] and_ln416_29_fu_2463_p2;
wire   [0:0] icmp_ln879_29_fu_2487_p2;
wire   [0:0] icmp_ln768_29_fu_2493_p2;
wire   [0:0] select_ln777_29_fu_2499_p3;
wire   [0:0] tmp_163_fu_2469_p3;
wire   [0:0] xor_ln785_14_fu_2507_p2;
wire   [0:0] or_ln340_14_fu_2513_p2;
wire   [1:0] add_ln416_29_fu_2443_p2;
wire   [0:0] icmp_ln1494_14_fu_2387_p2;
wire   [1:0] select_ln340_14_fu_2519_p3;
wire   [0:0] tmp_165_fu_2559_p3;
wire   [2:0] trunc_ln708_28_fu_2541_p4;
wire   [2:0] zext_ln415_30_fu_2567_p1;
wire   [1:0] trunc_ln415_30_fu_2571_p4;
wire   [1:0] zext_ln415_47_fu_2581_p1;
wire   [2:0] add_ln415_30_fu_2585_p2;
wire   [0:0] tmp_166_fu_2597_p3;
wire   [0:0] tmp_164_fu_2551_p3;
wire   [0:0] xor_ln416_30_fu_2605_p2;
wire   [3:0] p_Result_12_14_fu_2625_p4;
wire   [0:0] and_ln416_30_fu_2611_p2;
wire   [0:0] icmp_ln879_30_fu_2635_p2;
wire   [0:0] icmp_ln768_30_fu_2641_p2;
wire   [0:0] select_ln777_30_fu_2647_p3;
wire   [0:0] tmp_167_fu_2617_p3;
wire   [0:0] xor_ln785_15_fu_2655_p2;
wire   [0:0] or_ln340_15_fu_2661_p2;
wire   [1:0] add_ln416_30_fu_2591_p2;
wire   [0:0] icmp_ln1494_15_fu_2535_p2;
wire   [1:0] select_ln340_15_fu_2667_p3;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_fu_239_p2 == 1'd0))) begin
        i_0_reg_228 <= i_fu_245_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_228 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln60_reg_2747 <= icmp_ln60_fu_239_p2;
        icmp_ln60_reg_2747_pp0_iter1_reg <= icmp_ln60_reg_2747;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        tmp_data_0_V_reg_2756 <= tmp_data_0_V_fu_455_p3;
        tmp_data_10_V_reg_2806 <= tmp_data_10_V_fu_1935_p3;
        tmp_data_11_V_reg_2811 <= tmp_data_11_V_fu_2083_p3;
        tmp_data_12_V_reg_2816 <= tmp_data_12_V_fu_2231_p3;
        tmp_data_13_V_reg_2821 <= tmp_data_13_V_fu_2379_p3;
        tmp_data_14_V_reg_2826 <= tmp_data_14_V_fu_2527_p3;
        tmp_data_15_V_reg_2831 <= tmp_data_15_V_fu_2675_p3;
        tmp_data_1_V_reg_2761 <= tmp_data_1_V_fu_603_p3;
        tmp_data_2_V_reg_2766 <= tmp_data_2_V_fu_751_p3;
        tmp_data_3_V_reg_2771 <= tmp_data_3_V_fu_899_p3;
        tmp_data_4_V_reg_2776 <= tmp_data_4_V_fu_1047_p3;
        tmp_data_5_V_reg_2781 <= tmp_data_5_V_fu_1195_p3;
        tmp_data_6_V_reg_2786 <= tmp_data_6_V_fu_1343_p3;
        tmp_data_7_V_reg_2791 <= tmp_data_7_V_fu_1491_p3;
        tmp_data_8_V_reg_2796 <= tmp_data_8_V_fu_1639_p3;
        tmp_data_9_V_reg_2801 <= tmp_data_9_V_fu_1787_p3;
    end
end

always @ (*) begin
    if ((icmp_ln60_fu_239_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_2747 == 1'd0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln60_fu_239_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln60_fu_239_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_16_fu_513_p2 = (trunc_ln708_s_fu_469_p4 + zext_ln415_16_fu_495_p1);

assign add_ln415_17_fu_661_p2 = (trunc_ln708_15_fu_617_p4 + zext_ln415_17_fu_643_p1);

assign add_ln415_18_fu_809_p2 = (trunc_ln708_16_fu_765_p4 + zext_ln415_18_fu_791_p1);

assign add_ln415_19_fu_957_p2 = (trunc_ln708_17_fu_913_p4 + zext_ln415_19_fu_939_p1);

assign add_ln415_20_fu_1105_p2 = (trunc_ln708_18_fu_1061_p4 + zext_ln415_20_fu_1087_p1);

assign add_ln415_21_fu_1253_p2 = (trunc_ln708_19_fu_1209_p4 + zext_ln415_21_fu_1235_p1);

assign add_ln415_22_fu_1401_p2 = (trunc_ln708_20_fu_1357_p4 + zext_ln415_22_fu_1383_p1);

assign add_ln415_23_fu_1549_p2 = (trunc_ln708_21_fu_1505_p4 + zext_ln415_23_fu_1531_p1);

assign add_ln415_24_fu_1697_p2 = (trunc_ln708_22_fu_1653_p4 + zext_ln415_24_fu_1679_p1);

assign add_ln415_25_fu_1845_p2 = (trunc_ln708_23_fu_1801_p4 + zext_ln415_25_fu_1827_p1);

assign add_ln415_26_fu_1993_p2 = (trunc_ln708_24_fu_1949_p4 + zext_ln415_26_fu_1975_p1);

assign add_ln415_27_fu_2141_p2 = (trunc_ln708_25_fu_2097_p4 + zext_ln415_27_fu_2123_p1);

assign add_ln415_28_fu_2289_p2 = (trunc_ln708_26_fu_2245_p4 + zext_ln415_28_fu_2271_p1);

assign add_ln415_29_fu_2437_p2 = (trunc_ln708_27_fu_2393_p4 + zext_ln415_29_fu_2419_p1);

assign add_ln415_30_fu_2585_p2 = (trunc_ln708_28_fu_2541_p4 + zext_ln415_30_fu_2567_p1);

assign add_ln415_fu_365_p2 = (trunc_ln_fu_321_p4 + zext_ln415_fu_347_p1);

assign add_ln416_16_fu_519_p2 = (trunc_ln415_16_fu_499_p4 + zext_ln415_33_fu_509_p1);

assign add_ln416_17_fu_667_p2 = (trunc_ln415_17_fu_647_p4 + zext_ln415_34_fu_657_p1);

assign add_ln416_18_fu_815_p2 = (trunc_ln415_18_fu_795_p4 + zext_ln415_35_fu_805_p1);

assign add_ln416_19_fu_963_p2 = (trunc_ln415_19_fu_943_p4 + zext_ln415_36_fu_953_p1);

assign add_ln416_20_fu_1111_p2 = (trunc_ln415_20_fu_1091_p4 + zext_ln415_37_fu_1101_p1);

assign add_ln416_21_fu_1259_p2 = (trunc_ln415_21_fu_1239_p4 + zext_ln415_38_fu_1249_p1);

assign add_ln416_22_fu_1407_p2 = (trunc_ln415_22_fu_1387_p4 + zext_ln415_39_fu_1397_p1);

assign add_ln416_23_fu_1555_p2 = (trunc_ln415_23_fu_1535_p4 + zext_ln415_40_fu_1545_p1);

assign add_ln416_24_fu_1703_p2 = (trunc_ln415_24_fu_1683_p4 + zext_ln415_41_fu_1693_p1);

assign add_ln416_25_fu_1851_p2 = (trunc_ln415_25_fu_1831_p4 + zext_ln415_42_fu_1841_p1);

assign add_ln416_26_fu_1999_p2 = (trunc_ln415_26_fu_1979_p4 + zext_ln415_43_fu_1989_p1);

assign add_ln416_27_fu_2147_p2 = (trunc_ln415_27_fu_2127_p4 + zext_ln415_44_fu_2137_p1);

assign add_ln416_28_fu_2295_p2 = (trunc_ln415_28_fu_2275_p4 + zext_ln415_45_fu_2285_p1);

assign add_ln416_29_fu_2443_p2 = (trunc_ln415_29_fu_2423_p4 + zext_ln415_46_fu_2433_p1);

assign add_ln416_30_fu_2591_p2 = (trunc_ln415_30_fu_2571_p4 + zext_ln415_47_fu_2581_p1);

assign add_ln416_fu_371_p2 = (trunc_ln415_s_fu_351_p4 + zext_ln415_32_fu_361_p1);

assign and_ln416_16_fu_539_p2 = (xor_ln416_16_fu_533_p2 & tmp_108_fu_479_p3);

assign and_ln416_17_fu_687_p2 = (xor_ln416_17_fu_681_p2 & tmp_112_fu_627_p3);

assign and_ln416_18_fu_835_p2 = (xor_ln416_18_fu_829_p2 & tmp_116_fu_775_p3);

assign and_ln416_19_fu_983_p2 = (xor_ln416_19_fu_977_p2 & tmp_120_fu_923_p3);

assign and_ln416_20_fu_1131_p2 = (xor_ln416_20_fu_1125_p2 & tmp_124_fu_1071_p3);

assign and_ln416_21_fu_1279_p2 = (xor_ln416_21_fu_1273_p2 & tmp_128_fu_1219_p3);

assign and_ln416_22_fu_1427_p2 = (xor_ln416_22_fu_1421_p2 & tmp_132_fu_1367_p3);

assign and_ln416_23_fu_1575_p2 = (xor_ln416_23_fu_1569_p2 & tmp_136_fu_1515_p3);

assign and_ln416_24_fu_1723_p2 = (xor_ln416_24_fu_1717_p2 & tmp_140_fu_1663_p3);

assign and_ln416_25_fu_1871_p2 = (xor_ln416_25_fu_1865_p2 & tmp_144_fu_1811_p3);

assign and_ln416_26_fu_2019_p2 = (xor_ln416_26_fu_2013_p2 & tmp_148_fu_1959_p3);

assign and_ln416_27_fu_2167_p2 = (xor_ln416_27_fu_2161_p2 & tmp_152_fu_2107_p3);

assign and_ln416_28_fu_2315_p2 = (xor_ln416_28_fu_2309_p2 & tmp_156_fu_2255_p3);

assign and_ln416_29_fu_2463_p2 = (xor_ln416_29_fu_2457_p2 & tmp_160_fu_2403_p3);

assign and_ln416_30_fu_2611_p2 = (xor_ln416_30_fu_2605_p2 & tmp_164_fu_2551_p3);

assign and_ln416_fu_391_p2 = (xor_ln416_fu_385_p2 & tmp_104_fu_331_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op416 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op44 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_2747 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op416 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op44 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_2747 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op416 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op44 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_2747 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op44 == 1'b0) & (icmp_ln60_reg_2747 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((io_acc_block_signal_op416 == 1'b0) & (icmp_ln60_reg_2747_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_245_p2 = (i_0_reg_228 + 10'd1);

assign icmp_ln1494_10_fu_1795_p2 = (($signed(data_V_data_10_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_11_fu_1943_p2 = (($signed(data_V_data_11_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_12_fu_2091_p2 = (($signed(data_V_data_12_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_13_fu_2239_p2 = (($signed(data_V_data_13_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_14_fu_2387_p2 = (($signed(data_V_data_14_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_15_fu_2535_p2 = (($signed(data_V_data_15_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_463_p2 = (($signed(data_V_data_1_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_611_p2 = (($signed(data_V_data_2_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_759_p2 = (($signed(data_V_data_3_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_907_p2 = (($signed(data_V_data_4_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_1055_p2 = (($signed(data_V_data_5_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1203_p2 = (($signed(data_V_data_6_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_1351_p2 = (($signed(data_V_data_7_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_1499_p2 = (($signed(data_V_data_8_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_1647_p2 = (($signed(data_V_data_9_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_315_p2 = (($signed(data_V_data_0_V_dout) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_239_p2 = ((i_0_reg_228 == 10'd676) ? 1'b1 : 1'b0);

assign icmp_ln768_16_fu_569_p2 = ((p_Result_12_1_fu_553_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_17_fu_717_p2 = ((p_Result_12_2_fu_701_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_18_fu_865_p2 = ((p_Result_12_3_fu_849_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_19_fu_1013_p2 = ((p_Result_12_4_fu_997_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_20_fu_1161_p2 = ((p_Result_12_5_fu_1145_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_21_fu_1309_p2 = ((p_Result_12_6_fu_1293_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_22_fu_1457_p2 = ((p_Result_12_7_fu_1441_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_23_fu_1605_p2 = ((p_Result_12_8_fu_1589_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_24_fu_1753_p2 = ((p_Result_12_9_fu_1737_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_25_fu_1901_p2 = ((p_Result_12_s_fu_1885_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_26_fu_2049_p2 = ((p_Result_12_10_fu_2033_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_27_fu_2197_p2 = ((p_Result_12_11_fu_2181_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_28_fu_2345_p2 = ((p_Result_12_12_fu_2329_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_29_fu_2493_p2 = ((p_Result_12_13_fu_2477_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_30_fu_2641_p2 = ((p_Result_12_14_fu_2625_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_421_p2 = ((p_Result_s_fu_405_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_16_fu_563_p2 = ((p_Result_12_1_fu_553_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_17_fu_711_p2 = ((p_Result_12_2_fu_701_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_18_fu_859_p2 = ((p_Result_12_3_fu_849_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_19_fu_1007_p2 = ((p_Result_12_4_fu_997_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_20_fu_1155_p2 = ((p_Result_12_5_fu_1145_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_21_fu_1303_p2 = ((p_Result_12_6_fu_1293_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_22_fu_1451_p2 = ((p_Result_12_7_fu_1441_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_23_fu_1599_p2 = ((p_Result_12_8_fu_1589_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_24_fu_1747_p2 = ((p_Result_12_9_fu_1737_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_25_fu_1895_p2 = ((p_Result_12_s_fu_1885_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_26_fu_2043_p2 = ((p_Result_12_10_fu_2033_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_27_fu_2191_p2 = ((p_Result_12_11_fu_2181_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_28_fu_2339_p2 = ((p_Result_12_12_fu_2329_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_29_fu_2487_p2 = ((p_Result_12_13_fu_2477_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_30_fu_2635_p2 = ((p_Result_12_14_fu_2625_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_415_p2 = ((p_Result_s_fu_405_p4 == 4'd15) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op416 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op44 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln340_10_fu_1921_p2 = (xor_ln785_10_fu_1915_p2 | tmp_147_fu_1877_p3);

assign or_ln340_11_fu_2069_p2 = (xor_ln785_11_fu_2063_p2 | tmp_151_fu_2025_p3);

assign or_ln340_12_fu_2217_p2 = (xor_ln785_12_fu_2211_p2 | tmp_155_fu_2173_p3);

assign or_ln340_13_fu_2365_p2 = (xor_ln785_13_fu_2359_p2 | tmp_159_fu_2321_p3);

assign or_ln340_14_fu_2513_p2 = (xor_ln785_14_fu_2507_p2 | tmp_163_fu_2469_p3);

assign or_ln340_15_fu_2661_p2 = (xor_ln785_15_fu_2655_p2 | tmp_167_fu_2617_p3);

assign or_ln340_1_fu_589_p2 = (xor_ln785_1_fu_583_p2 | tmp_111_fu_545_p3);

assign or_ln340_2_fu_737_p2 = (xor_ln785_2_fu_731_p2 | tmp_115_fu_693_p3);

assign or_ln340_3_fu_885_p2 = (xor_ln785_3_fu_879_p2 | tmp_119_fu_841_p3);

assign or_ln340_4_fu_1033_p2 = (xor_ln785_4_fu_1027_p2 | tmp_123_fu_989_p3);

assign or_ln340_5_fu_1181_p2 = (xor_ln785_5_fu_1175_p2 | tmp_127_fu_1137_p3);

assign or_ln340_6_fu_1329_p2 = (xor_ln785_6_fu_1323_p2 | tmp_131_fu_1285_p3);

assign or_ln340_7_fu_1477_p2 = (xor_ln785_7_fu_1471_p2 | tmp_135_fu_1433_p3);

assign or_ln340_8_fu_1625_p2 = (xor_ln785_8_fu_1619_p2 | tmp_139_fu_1581_p3);

assign or_ln340_9_fu_1773_p2 = (xor_ln785_9_fu_1767_p2 | tmp_143_fu_1729_p3);

assign or_ln340_fu_441_p2 = (xor_ln785_fu_435_p2 | tmp_107_fu_397_p3);

assign p_Result_12_10_fu_2033_p4 = {{data_V_data_11_V_dout[11:8]}};

assign p_Result_12_11_fu_2181_p4 = {{data_V_data_12_V_dout[11:8]}};

assign p_Result_12_12_fu_2329_p4 = {{data_V_data_13_V_dout[11:8]}};

assign p_Result_12_13_fu_2477_p4 = {{data_V_data_14_V_dout[11:8]}};

assign p_Result_12_14_fu_2625_p4 = {{data_V_data_15_V_dout[11:8]}};

assign p_Result_12_1_fu_553_p4 = {{data_V_data_1_V_dout[11:8]}};

assign p_Result_12_2_fu_701_p4 = {{data_V_data_2_V_dout[11:8]}};

assign p_Result_12_3_fu_849_p4 = {{data_V_data_3_V_dout[11:8]}};

assign p_Result_12_4_fu_997_p4 = {{data_V_data_4_V_dout[11:8]}};

assign p_Result_12_5_fu_1145_p4 = {{data_V_data_5_V_dout[11:8]}};

assign p_Result_12_6_fu_1293_p4 = {{data_V_data_6_V_dout[11:8]}};

assign p_Result_12_7_fu_1441_p4 = {{data_V_data_7_V_dout[11:8]}};

assign p_Result_12_8_fu_1589_p4 = {{data_V_data_8_V_dout[11:8]}};

assign p_Result_12_9_fu_1737_p4 = {{data_V_data_9_V_dout[11:8]}};

assign p_Result_12_s_fu_1885_p4 = {{data_V_data_10_V_dout[11:8]}};

assign p_Result_s_fu_405_p4 = {{data_V_data_0_V_dout[11:8]}};

assign res_V_data_0_V_din = tmp_data_0_V_reg_2756;

assign res_V_data_10_V_din = tmp_data_10_V_reg_2806;

assign res_V_data_11_V_din = tmp_data_11_V_reg_2811;

assign res_V_data_12_V_din = tmp_data_12_V_reg_2816;

assign res_V_data_13_V_din = tmp_data_13_V_reg_2821;

assign res_V_data_14_V_din = tmp_data_14_V_reg_2826;

assign res_V_data_15_V_din = tmp_data_15_V_reg_2831;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2761;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2766;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2771;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2776;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2781;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2786;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2791;

assign res_V_data_8_V_din = tmp_data_8_V_reg_2796;

assign res_V_data_9_V_din = tmp_data_9_V_reg_2801;

assign select_ln340_10_fu_1927_p3 = ((or_ln340_10_fu_1921_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_25_fu_1851_p2);

assign select_ln340_11_fu_2075_p3 = ((or_ln340_11_fu_2069_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_26_fu_1999_p2);

assign select_ln340_12_fu_2223_p3 = ((or_ln340_12_fu_2217_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_27_fu_2147_p2);

assign select_ln340_13_fu_2371_p3 = ((or_ln340_13_fu_2365_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_28_fu_2295_p2);

assign select_ln340_14_fu_2519_p3 = ((or_ln340_14_fu_2513_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_29_fu_2443_p2);

assign select_ln340_15_fu_2667_p3 = ((or_ln340_15_fu_2661_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_30_fu_2591_p2);

assign select_ln340_1_fu_595_p3 = ((or_ln340_1_fu_589_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_16_fu_519_p2);

assign select_ln340_2_fu_743_p3 = ((or_ln340_2_fu_737_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_17_fu_667_p2);

assign select_ln340_3_fu_891_p3 = ((or_ln340_3_fu_885_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_18_fu_815_p2);

assign select_ln340_4_fu_1039_p3 = ((or_ln340_4_fu_1033_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_19_fu_963_p2);

assign select_ln340_5_fu_1187_p3 = ((or_ln340_5_fu_1181_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_20_fu_1111_p2);

assign select_ln340_6_fu_1335_p3 = ((or_ln340_6_fu_1329_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_21_fu_1259_p2);

assign select_ln340_7_fu_1483_p3 = ((or_ln340_7_fu_1477_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_22_fu_1407_p2);

assign select_ln340_8_fu_1631_p3 = ((or_ln340_8_fu_1625_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_23_fu_1555_p2);

assign select_ln340_9_fu_1779_p3 = ((or_ln340_9_fu_1773_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_24_fu_1703_p2);

assign select_ln340_fu_447_p3 = ((or_ln340_fu_441_p2[0:0] === 1'b1) ? 2'd3 : add_ln416_fu_371_p2);

assign select_ln777_16_fu_575_p3 = ((and_ln416_16_fu_539_p2[0:0] === 1'b1) ? icmp_ln879_16_fu_563_p2 : icmp_ln768_16_fu_569_p2);

assign select_ln777_17_fu_723_p3 = ((and_ln416_17_fu_687_p2[0:0] === 1'b1) ? icmp_ln879_17_fu_711_p2 : icmp_ln768_17_fu_717_p2);

assign select_ln777_18_fu_871_p3 = ((and_ln416_18_fu_835_p2[0:0] === 1'b1) ? icmp_ln879_18_fu_859_p2 : icmp_ln768_18_fu_865_p2);

assign select_ln777_19_fu_1019_p3 = ((and_ln416_19_fu_983_p2[0:0] === 1'b1) ? icmp_ln879_19_fu_1007_p2 : icmp_ln768_19_fu_1013_p2);

assign select_ln777_20_fu_1167_p3 = ((and_ln416_20_fu_1131_p2[0:0] === 1'b1) ? icmp_ln879_20_fu_1155_p2 : icmp_ln768_20_fu_1161_p2);

assign select_ln777_21_fu_1315_p3 = ((and_ln416_21_fu_1279_p2[0:0] === 1'b1) ? icmp_ln879_21_fu_1303_p2 : icmp_ln768_21_fu_1309_p2);

assign select_ln777_22_fu_1463_p3 = ((and_ln416_22_fu_1427_p2[0:0] === 1'b1) ? icmp_ln879_22_fu_1451_p2 : icmp_ln768_22_fu_1457_p2);

assign select_ln777_23_fu_1611_p3 = ((and_ln416_23_fu_1575_p2[0:0] === 1'b1) ? icmp_ln879_23_fu_1599_p2 : icmp_ln768_23_fu_1605_p2);

assign select_ln777_24_fu_1759_p3 = ((and_ln416_24_fu_1723_p2[0:0] === 1'b1) ? icmp_ln879_24_fu_1747_p2 : icmp_ln768_24_fu_1753_p2);

assign select_ln777_25_fu_1907_p3 = ((and_ln416_25_fu_1871_p2[0:0] === 1'b1) ? icmp_ln879_25_fu_1895_p2 : icmp_ln768_25_fu_1901_p2);

assign select_ln777_26_fu_2055_p3 = ((and_ln416_26_fu_2019_p2[0:0] === 1'b1) ? icmp_ln879_26_fu_2043_p2 : icmp_ln768_26_fu_2049_p2);

assign select_ln777_27_fu_2203_p3 = ((and_ln416_27_fu_2167_p2[0:0] === 1'b1) ? icmp_ln879_27_fu_2191_p2 : icmp_ln768_27_fu_2197_p2);

assign select_ln777_28_fu_2351_p3 = ((and_ln416_28_fu_2315_p2[0:0] === 1'b1) ? icmp_ln879_28_fu_2339_p2 : icmp_ln768_28_fu_2345_p2);

assign select_ln777_29_fu_2499_p3 = ((and_ln416_29_fu_2463_p2[0:0] === 1'b1) ? icmp_ln879_29_fu_2487_p2 : icmp_ln768_29_fu_2493_p2);

assign select_ln777_30_fu_2647_p3 = ((and_ln416_30_fu_2611_p2[0:0] === 1'b1) ? icmp_ln879_30_fu_2635_p2 : icmp_ln768_30_fu_2641_p2);

assign select_ln777_fu_427_p3 = ((and_ln416_fu_391_p2[0:0] === 1'b1) ? icmp_ln879_fu_415_p2 : icmp_ln768_fu_421_p2);

assign start_out = real_start;

assign tmp_104_fu_331_p3 = data_V_data_0_V_dout[32'd7];

assign tmp_105_fu_339_p3 = data_V_data_0_V_dout[32'd4];

assign tmp_106_fu_377_p3 = add_ln415_fu_365_p2[32'd2];

assign tmp_107_fu_397_p3 = add_ln415_fu_365_p2[32'd2];

assign tmp_108_fu_479_p3 = data_V_data_1_V_dout[32'd7];

assign tmp_109_fu_487_p3 = data_V_data_1_V_dout[32'd4];

assign tmp_110_fu_525_p3 = add_ln415_16_fu_513_p2[32'd2];

assign tmp_111_fu_545_p3 = add_ln415_16_fu_513_p2[32'd2];

assign tmp_112_fu_627_p3 = data_V_data_2_V_dout[32'd7];

assign tmp_113_fu_635_p3 = data_V_data_2_V_dout[32'd4];

assign tmp_114_fu_673_p3 = add_ln415_17_fu_661_p2[32'd2];

assign tmp_115_fu_693_p3 = add_ln415_17_fu_661_p2[32'd2];

assign tmp_116_fu_775_p3 = data_V_data_3_V_dout[32'd7];

assign tmp_117_fu_783_p3 = data_V_data_3_V_dout[32'd4];

assign tmp_118_fu_821_p3 = add_ln415_18_fu_809_p2[32'd2];

assign tmp_119_fu_841_p3 = add_ln415_18_fu_809_p2[32'd2];

assign tmp_120_fu_923_p3 = data_V_data_4_V_dout[32'd7];

assign tmp_121_fu_931_p3 = data_V_data_4_V_dout[32'd4];

assign tmp_122_fu_969_p3 = add_ln415_19_fu_957_p2[32'd2];

assign tmp_123_fu_989_p3 = add_ln415_19_fu_957_p2[32'd2];

assign tmp_124_fu_1071_p3 = data_V_data_5_V_dout[32'd7];

assign tmp_125_fu_1079_p3 = data_V_data_5_V_dout[32'd4];

assign tmp_126_fu_1117_p3 = add_ln415_20_fu_1105_p2[32'd2];

assign tmp_127_fu_1137_p3 = add_ln415_20_fu_1105_p2[32'd2];

assign tmp_128_fu_1219_p3 = data_V_data_6_V_dout[32'd7];

assign tmp_129_fu_1227_p3 = data_V_data_6_V_dout[32'd4];

assign tmp_130_fu_1265_p3 = add_ln415_21_fu_1253_p2[32'd2];

assign tmp_131_fu_1285_p3 = add_ln415_21_fu_1253_p2[32'd2];

assign tmp_132_fu_1367_p3 = data_V_data_7_V_dout[32'd7];

assign tmp_133_fu_1375_p3 = data_V_data_7_V_dout[32'd4];

assign tmp_134_fu_1413_p3 = add_ln415_22_fu_1401_p2[32'd2];

assign tmp_135_fu_1433_p3 = add_ln415_22_fu_1401_p2[32'd2];

assign tmp_136_fu_1515_p3 = data_V_data_8_V_dout[32'd7];

assign tmp_137_fu_1523_p3 = data_V_data_8_V_dout[32'd4];

assign tmp_138_fu_1561_p3 = add_ln415_23_fu_1549_p2[32'd2];

assign tmp_139_fu_1581_p3 = add_ln415_23_fu_1549_p2[32'd2];

assign tmp_140_fu_1663_p3 = data_V_data_9_V_dout[32'd7];

assign tmp_141_fu_1671_p3 = data_V_data_9_V_dout[32'd4];

assign tmp_142_fu_1709_p3 = add_ln415_24_fu_1697_p2[32'd2];

assign tmp_143_fu_1729_p3 = add_ln415_24_fu_1697_p2[32'd2];

assign tmp_144_fu_1811_p3 = data_V_data_10_V_dout[32'd7];

assign tmp_145_fu_1819_p3 = data_V_data_10_V_dout[32'd4];

assign tmp_146_fu_1857_p3 = add_ln415_25_fu_1845_p2[32'd2];

assign tmp_147_fu_1877_p3 = add_ln415_25_fu_1845_p2[32'd2];

assign tmp_148_fu_1959_p3 = data_V_data_11_V_dout[32'd7];

assign tmp_149_fu_1967_p3 = data_V_data_11_V_dout[32'd4];

assign tmp_150_fu_2005_p3 = add_ln415_26_fu_1993_p2[32'd2];

assign tmp_151_fu_2025_p3 = add_ln415_26_fu_1993_p2[32'd2];

assign tmp_152_fu_2107_p3 = data_V_data_12_V_dout[32'd7];

assign tmp_153_fu_2115_p3 = data_V_data_12_V_dout[32'd4];

assign tmp_154_fu_2153_p3 = add_ln415_27_fu_2141_p2[32'd2];

assign tmp_155_fu_2173_p3 = add_ln415_27_fu_2141_p2[32'd2];

assign tmp_156_fu_2255_p3 = data_V_data_13_V_dout[32'd7];

assign tmp_157_fu_2263_p3 = data_V_data_13_V_dout[32'd4];

assign tmp_158_fu_2301_p3 = add_ln415_28_fu_2289_p2[32'd2];

assign tmp_159_fu_2321_p3 = add_ln415_28_fu_2289_p2[32'd2];

assign tmp_160_fu_2403_p3 = data_V_data_14_V_dout[32'd7];

assign tmp_161_fu_2411_p3 = data_V_data_14_V_dout[32'd4];

assign tmp_162_fu_2449_p3 = add_ln415_29_fu_2437_p2[32'd2];

assign tmp_163_fu_2469_p3 = add_ln415_29_fu_2437_p2[32'd2];

assign tmp_164_fu_2551_p3 = data_V_data_15_V_dout[32'd7];

assign tmp_165_fu_2559_p3 = data_V_data_15_V_dout[32'd4];

assign tmp_166_fu_2597_p3 = add_ln415_30_fu_2585_p2[32'd2];

assign tmp_167_fu_2617_p3 = add_ln415_30_fu_2585_p2[32'd2];

assign tmp_data_0_V_fu_455_p3 = ((icmp_ln1494_fu_315_p2[0:0] === 1'b1) ? select_ln340_fu_447_p3 : 2'd0);

assign tmp_data_10_V_fu_1935_p3 = ((icmp_ln1494_10_fu_1795_p2[0:0] === 1'b1) ? select_ln340_10_fu_1927_p3 : 2'd0);

assign tmp_data_11_V_fu_2083_p3 = ((icmp_ln1494_11_fu_1943_p2[0:0] === 1'b1) ? select_ln340_11_fu_2075_p3 : 2'd0);

assign tmp_data_12_V_fu_2231_p3 = ((icmp_ln1494_12_fu_2091_p2[0:0] === 1'b1) ? select_ln340_12_fu_2223_p3 : 2'd0);

assign tmp_data_13_V_fu_2379_p3 = ((icmp_ln1494_13_fu_2239_p2[0:0] === 1'b1) ? select_ln340_13_fu_2371_p3 : 2'd0);

assign tmp_data_14_V_fu_2527_p3 = ((icmp_ln1494_14_fu_2387_p2[0:0] === 1'b1) ? select_ln340_14_fu_2519_p3 : 2'd0);

assign tmp_data_15_V_fu_2675_p3 = ((icmp_ln1494_15_fu_2535_p2[0:0] === 1'b1) ? select_ln340_15_fu_2667_p3 : 2'd0);

assign tmp_data_1_V_fu_603_p3 = ((icmp_ln1494_1_fu_463_p2[0:0] === 1'b1) ? select_ln340_1_fu_595_p3 : 2'd0);

assign tmp_data_2_V_fu_751_p3 = ((icmp_ln1494_2_fu_611_p2[0:0] === 1'b1) ? select_ln340_2_fu_743_p3 : 2'd0);

assign tmp_data_3_V_fu_899_p3 = ((icmp_ln1494_3_fu_759_p2[0:0] === 1'b1) ? select_ln340_3_fu_891_p3 : 2'd0);

assign tmp_data_4_V_fu_1047_p3 = ((icmp_ln1494_4_fu_907_p2[0:0] === 1'b1) ? select_ln340_4_fu_1039_p3 : 2'd0);

assign tmp_data_5_V_fu_1195_p3 = ((icmp_ln1494_5_fu_1055_p2[0:0] === 1'b1) ? select_ln340_5_fu_1187_p3 : 2'd0);

assign tmp_data_6_V_fu_1343_p3 = ((icmp_ln1494_6_fu_1203_p2[0:0] === 1'b1) ? select_ln340_6_fu_1335_p3 : 2'd0);

assign tmp_data_7_V_fu_1491_p3 = ((icmp_ln1494_7_fu_1351_p2[0:0] === 1'b1) ? select_ln340_7_fu_1483_p3 : 2'd0);

assign tmp_data_8_V_fu_1639_p3 = ((icmp_ln1494_8_fu_1499_p2[0:0] === 1'b1) ? select_ln340_8_fu_1631_p3 : 2'd0);

assign tmp_data_9_V_fu_1787_p3 = ((icmp_ln1494_9_fu_1647_p2[0:0] === 1'b1) ? select_ln340_9_fu_1779_p3 : 2'd0);

assign trunc_ln415_16_fu_499_p4 = {{data_V_data_1_V_dout[6:5]}};

assign trunc_ln415_17_fu_647_p4 = {{data_V_data_2_V_dout[6:5]}};

assign trunc_ln415_18_fu_795_p4 = {{data_V_data_3_V_dout[6:5]}};

assign trunc_ln415_19_fu_943_p4 = {{data_V_data_4_V_dout[6:5]}};

assign trunc_ln415_20_fu_1091_p4 = {{data_V_data_5_V_dout[6:5]}};

assign trunc_ln415_21_fu_1239_p4 = {{data_V_data_6_V_dout[6:5]}};

assign trunc_ln415_22_fu_1387_p4 = {{data_V_data_7_V_dout[6:5]}};

assign trunc_ln415_23_fu_1535_p4 = {{data_V_data_8_V_dout[6:5]}};

assign trunc_ln415_24_fu_1683_p4 = {{data_V_data_9_V_dout[6:5]}};

assign trunc_ln415_25_fu_1831_p4 = {{data_V_data_10_V_dout[6:5]}};

assign trunc_ln415_26_fu_1979_p4 = {{data_V_data_11_V_dout[6:5]}};

assign trunc_ln415_27_fu_2127_p4 = {{data_V_data_12_V_dout[6:5]}};

assign trunc_ln415_28_fu_2275_p4 = {{data_V_data_13_V_dout[6:5]}};

assign trunc_ln415_29_fu_2423_p4 = {{data_V_data_14_V_dout[6:5]}};

assign trunc_ln415_30_fu_2571_p4 = {{data_V_data_15_V_dout[6:5]}};

assign trunc_ln415_s_fu_351_p4 = {{data_V_data_0_V_dout[6:5]}};

assign trunc_ln708_15_fu_617_p4 = {{data_V_data_2_V_dout[7:5]}};

assign trunc_ln708_16_fu_765_p4 = {{data_V_data_3_V_dout[7:5]}};

assign trunc_ln708_17_fu_913_p4 = {{data_V_data_4_V_dout[7:5]}};

assign trunc_ln708_18_fu_1061_p4 = {{data_V_data_5_V_dout[7:5]}};

assign trunc_ln708_19_fu_1209_p4 = {{data_V_data_6_V_dout[7:5]}};

assign trunc_ln708_20_fu_1357_p4 = {{data_V_data_7_V_dout[7:5]}};

assign trunc_ln708_21_fu_1505_p4 = {{data_V_data_8_V_dout[7:5]}};

assign trunc_ln708_22_fu_1653_p4 = {{data_V_data_9_V_dout[7:5]}};

assign trunc_ln708_23_fu_1801_p4 = {{data_V_data_10_V_dout[7:5]}};

assign trunc_ln708_24_fu_1949_p4 = {{data_V_data_11_V_dout[7:5]}};

assign trunc_ln708_25_fu_2097_p4 = {{data_V_data_12_V_dout[7:5]}};

assign trunc_ln708_26_fu_2245_p4 = {{data_V_data_13_V_dout[7:5]}};

assign trunc_ln708_27_fu_2393_p4 = {{data_V_data_14_V_dout[7:5]}};

assign trunc_ln708_28_fu_2541_p4 = {{data_V_data_15_V_dout[7:5]}};

assign trunc_ln708_s_fu_469_p4 = {{data_V_data_1_V_dout[7:5]}};

assign trunc_ln_fu_321_p4 = {{data_V_data_0_V_dout[7:5]}};

assign xor_ln416_16_fu_533_p2 = (tmp_110_fu_525_p3 ^ 1'd1);

assign xor_ln416_17_fu_681_p2 = (tmp_114_fu_673_p3 ^ 1'd1);

assign xor_ln416_18_fu_829_p2 = (tmp_118_fu_821_p3 ^ 1'd1);

assign xor_ln416_19_fu_977_p2 = (tmp_122_fu_969_p3 ^ 1'd1);

assign xor_ln416_20_fu_1125_p2 = (tmp_126_fu_1117_p3 ^ 1'd1);

assign xor_ln416_21_fu_1273_p2 = (tmp_130_fu_1265_p3 ^ 1'd1);

assign xor_ln416_22_fu_1421_p2 = (tmp_134_fu_1413_p3 ^ 1'd1);

assign xor_ln416_23_fu_1569_p2 = (tmp_138_fu_1561_p3 ^ 1'd1);

assign xor_ln416_24_fu_1717_p2 = (tmp_142_fu_1709_p3 ^ 1'd1);

assign xor_ln416_25_fu_1865_p2 = (tmp_146_fu_1857_p3 ^ 1'd1);

assign xor_ln416_26_fu_2013_p2 = (tmp_150_fu_2005_p3 ^ 1'd1);

assign xor_ln416_27_fu_2161_p2 = (tmp_154_fu_2153_p3 ^ 1'd1);

assign xor_ln416_28_fu_2309_p2 = (tmp_158_fu_2301_p3 ^ 1'd1);

assign xor_ln416_29_fu_2457_p2 = (tmp_162_fu_2449_p3 ^ 1'd1);

assign xor_ln416_30_fu_2605_p2 = (tmp_166_fu_2597_p3 ^ 1'd1);

assign xor_ln416_fu_385_p2 = (tmp_106_fu_377_p3 ^ 1'd1);

assign xor_ln785_10_fu_1915_p2 = (select_ln777_25_fu_1907_p3 ^ 1'd1);

assign xor_ln785_11_fu_2063_p2 = (select_ln777_26_fu_2055_p3 ^ 1'd1);

assign xor_ln785_12_fu_2211_p2 = (select_ln777_27_fu_2203_p3 ^ 1'd1);

assign xor_ln785_13_fu_2359_p2 = (select_ln777_28_fu_2351_p3 ^ 1'd1);

assign xor_ln785_14_fu_2507_p2 = (select_ln777_29_fu_2499_p3 ^ 1'd1);

assign xor_ln785_15_fu_2655_p2 = (select_ln777_30_fu_2647_p3 ^ 1'd1);

assign xor_ln785_1_fu_583_p2 = (select_ln777_16_fu_575_p3 ^ 1'd1);

assign xor_ln785_2_fu_731_p2 = (select_ln777_17_fu_723_p3 ^ 1'd1);

assign xor_ln785_3_fu_879_p2 = (select_ln777_18_fu_871_p3 ^ 1'd1);

assign xor_ln785_4_fu_1027_p2 = (select_ln777_19_fu_1019_p3 ^ 1'd1);

assign xor_ln785_5_fu_1175_p2 = (select_ln777_20_fu_1167_p3 ^ 1'd1);

assign xor_ln785_6_fu_1323_p2 = (select_ln777_21_fu_1315_p3 ^ 1'd1);

assign xor_ln785_7_fu_1471_p2 = (select_ln777_22_fu_1463_p3 ^ 1'd1);

assign xor_ln785_8_fu_1619_p2 = (select_ln777_23_fu_1611_p3 ^ 1'd1);

assign xor_ln785_9_fu_1767_p2 = (select_ln777_24_fu_1759_p3 ^ 1'd1);

assign xor_ln785_fu_435_p2 = (select_ln777_fu_427_p3 ^ 1'd1);

assign zext_ln415_16_fu_495_p1 = tmp_109_fu_487_p3;

assign zext_ln415_17_fu_643_p1 = tmp_113_fu_635_p3;

assign zext_ln415_18_fu_791_p1 = tmp_117_fu_783_p3;

assign zext_ln415_19_fu_939_p1 = tmp_121_fu_931_p3;

assign zext_ln415_20_fu_1087_p1 = tmp_125_fu_1079_p3;

assign zext_ln415_21_fu_1235_p1 = tmp_129_fu_1227_p3;

assign zext_ln415_22_fu_1383_p1 = tmp_133_fu_1375_p3;

assign zext_ln415_23_fu_1531_p1 = tmp_137_fu_1523_p3;

assign zext_ln415_24_fu_1679_p1 = tmp_141_fu_1671_p3;

assign zext_ln415_25_fu_1827_p1 = tmp_145_fu_1819_p3;

assign zext_ln415_26_fu_1975_p1 = tmp_149_fu_1967_p3;

assign zext_ln415_27_fu_2123_p1 = tmp_153_fu_2115_p3;

assign zext_ln415_28_fu_2271_p1 = tmp_157_fu_2263_p3;

assign zext_ln415_29_fu_2419_p1 = tmp_161_fu_2411_p3;

assign zext_ln415_30_fu_2567_p1 = tmp_165_fu_2559_p3;

assign zext_ln415_32_fu_361_p1 = tmp_105_fu_339_p3;

assign zext_ln415_33_fu_509_p1 = tmp_109_fu_487_p3;

assign zext_ln415_34_fu_657_p1 = tmp_113_fu_635_p3;

assign zext_ln415_35_fu_805_p1 = tmp_117_fu_783_p3;

assign zext_ln415_36_fu_953_p1 = tmp_121_fu_931_p3;

assign zext_ln415_37_fu_1101_p1 = tmp_125_fu_1079_p3;

assign zext_ln415_38_fu_1249_p1 = tmp_129_fu_1227_p3;

assign zext_ln415_39_fu_1397_p1 = tmp_133_fu_1375_p3;

assign zext_ln415_40_fu_1545_p1 = tmp_137_fu_1523_p3;

assign zext_ln415_41_fu_1693_p1 = tmp_141_fu_1671_p3;

assign zext_ln415_42_fu_1841_p1 = tmp_145_fu_1819_p3;

assign zext_ln415_43_fu_1989_p1 = tmp_149_fu_1967_p3;

assign zext_ln415_44_fu_2137_p1 = tmp_153_fu_2115_p3;

assign zext_ln415_45_fu_2285_p1 = tmp_157_fu_2263_p3;

assign zext_ln415_46_fu_2433_p1 = tmp_161_fu_2411_p3;

assign zext_ln415_47_fu_2581_p1 = tmp_165_fu_2559_p3;

assign zext_ln415_fu_347_p1 = tmp_105_fu_339_p3;

endmodule //relu_array_array_ap_fixed_16u_relu_config4_s
